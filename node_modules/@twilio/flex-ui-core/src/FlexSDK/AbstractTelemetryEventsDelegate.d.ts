import * as FlexSDK from "@twilio/flex-sdk";
/**
 * Abstract class that outlines required methods for EventDelegates
 * to reimplement. Basic idea is that we might have different
 * event categories that will require various transformations
 * (based on category) before reporting. If we keep that logic
 * in FlexSDK file, it'll soon grow to the point it'll become unmaintainable.
 *
 * ## How to use this class
 *
 * Once you have a new event category to report, create a new class
 * that inherits from AbstractTelemetryEventsDelegate. Once inherited, implement
 * a few functions:
 * - `format` that converts an arbitrary object (X) to the event shape (T) declared by the delegate
 * - `getEventGroupName` that returns an even group name which will be used during the event group initialization
 * - `getEventName` that returns a name of the event that will be reported once `report` is called
 *
 * That way, if we ever need to create a new event category, it should
 * boil down to creation of the new class with two pre-defined methods
 * @private
 */
export default abstract class AbstractTelemetryEventsDelegate<T> {
    private eventGroup;
    initialize(SDKClient: FlexSDK.Client): void;
    /**
     * Calculate event group name that will be used to initialize a telemetry client
     * @private
     */
    abstract getEventGroupName(): string;
    /**
     * Calculate event name that will be used as an eventName field in the SDK call
     * @private
     */
    abstract getEventName(): string;
    /**
     * Format external event format to the internal, SDK-compatible format
     * @private
     */
    abstract format(event: Record<string, any>): T;
    /**
     * Reports the given event to the FlexSDK
     * @private
     */
    report(event: T): Promise<void>;
    /**
     * Reports the given grouped events to the FlexSDK
     * @private
     */
    groupReport(events: T[]): Promise<void>;
}
