/// <reference types="lodash" />
import * as React from "react";
import { ActionCreatorWithPayload } from "../../../state/QueueManagementState/utils/createAction";
import { WorkerFilter } from "../../../state/QueueManagementState/slices/workers/workers.types";
import { AppState } from "../../../state";
declare function mapStateToProps(state: AppState, ownProps: OwnProps): {
    setStateFilter: ActionCreatorWithPayload<Partial<WorkerFilter>, string>;
    setStateSearch: (((search: string) => {
        payload: {
            search: string;
            page: number;
        };
        type: "eligibleWorkers/update/filters";
    }) & import("lodash").Cancelable) | (((search: string) => {
        payload: {
            search: string;
            page: number;
        };
        type: "queueWorkers/update/filters";
    }) & import("lodash").Cancelable);
    search: string;
    isLoading: boolean;
    isQueueManagementEnabled: boolean;
    isQueueEligible: boolean;
    count: number;
    queue: import("../../../state/QueueManagementState/slices/queues/queues.types").Queue;
};
declare type OwnProps = {
    withSelection?: boolean;
    queueSid: string;
};
declare type DecoratedProps = {
    onToggleDrawer: () => void;
    onManageWorkers?: () => void;
    onChangeHandler: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
    onClickHandler: () => void;
    onCloseAssignment: () => void;
    onCloseNotFound: () => void;
};
declare type ReduxStateProps = ReturnType<typeof mapStateToProps>;
declare type ContainerState = {
    open: boolean;
    offsetTop: number;
    shouldDisplayManageWorkers: boolean;
    search: string;
    shouldDisplayNotFound: boolean;
};
declare type ConnectorProps = OwnProps & ReduxStateProps & DecoratedProps;
export declare type WrappedComponentProps = ConnectorProps & ContainerState;
declare function withFilterSection(Component: React.ComponentType<WrappedComponentProps>): React.ComponentType<OwnProps>;
export { withFilterSection };
