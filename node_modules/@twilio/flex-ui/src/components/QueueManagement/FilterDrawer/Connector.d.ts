import * as React from "react";
import { AppState } from "../../../state";
import { loadEligibleWorkers } from "../../../state/QueueManagementState/slices/workers/workers.actions";
import { WorkerFilter } from "../../../state/QueueManagementState/slices/workers/workers.types";
import { ActionCreatorWithPayload } from "../../../state/QueueManagementState/utils/createAction";
declare function mapStateToProps(state: AppState, ownProps: OwnProps): {
    setFilter: ActionCreatorWithPayload<Partial<WorkerFilter>, string>;
    getWorkers: typeof loadEligibleWorkers;
    isLoading: boolean;
    activities: string[];
};
declare type OwnProps = {
    withSelection?: boolean;
    queueSid: string;
    toggleDrawer: () => void;
    open: boolean;
};
declare type DecoratedProps = {
    handleActivitiesChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    handleReset: (e: React.MouseEvent<HTMLElement>) => void;
    handleSubmit: (e: React.FormEvent<HTMLElement>) => void;
};
declare type ReduxStateProps = ReturnType<typeof mapStateToProps>;
declare type ConnectorState = {
    activities: string[];
};
export declare type WrappedComponentProps = OwnProps & DecoratedProps & Pick<ReduxStateProps, "isLoading"> & ConnectorState;
declare function withFilterDrawer(Component: React.ComponentType<WrappedComponentProps>): React.ComponentType<OwnProps>;
export { withFilterDrawer };
