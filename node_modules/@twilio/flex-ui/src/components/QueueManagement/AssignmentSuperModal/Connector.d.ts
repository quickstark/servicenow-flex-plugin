import * as React from "react";
import { ThemeProps } from "../../theme";
import { AppState } from "../../../state";
declare function mapStateToProps(state: AppState, ownProps: OwnProps): {
    queue: import("../../../state/QueueManagementState/slices/queues/queues.types").Queue;
    isLoaded: boolean;
    queueName: string;
    formattedSkills: string;
    error: import("../../../state/QueueManagementState/slices/errors/errors.types").QueueManagementError;
};
export interface OwnProps {
    queueSid: string;
    shouldOpenModal: boolean;
    onCloseAssignmentModal: () => void;
}
declare type DecoratedProps = {
    onSetSelected: (selectedSids: string[]) => void;
    onOpen: (event: React.MouseEvent<HTMLElement>) => void;
    onSubmit: (event: React.MouseEvent<HTMLElement>) => void;
};
declare type ReduxStateProps = ReturnType<typeof mapStateToProps>;
declare type ContainerState = {
    open: boolean;
    isLoading: boolean;
    selectedSids: Set<string>;
};
declare type ContainerProps = ReduxStateProps & OwnProps & ThemeProps;
export declare type WrappedComponentProps = ContainerProps & DecoratedProps & ContainerState;
export declare function withQueueAssignment(Component: React.ComponentType<WrappedComponentProps>): React.ComponentType<OwnProps>;
export {};
