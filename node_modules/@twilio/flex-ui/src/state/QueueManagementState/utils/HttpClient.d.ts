export declare enum RequestTypes {
    Get = "GET",
    Post = "POST",
    Put = "PUT",
    Patch = "PATCH",
    Delete = "DELETE"
}
export interface ResponseBody<T> extends Body {
    ok: boolean;
    status: number;
    statusText: string;
    json(): Promise<T>;
    clone(): ResponseBody<T>;
}
/**
 * Wrapper for the HTTP GET method
 * Requires the Return Type as the generic parameter
 * @param apiEndpoint - API Endpoint to hit
 * @param requestOptions - request options to override
 * @param baseUrl - optional parameter to change the root of the API being hit, defaults to https://flex.twilio.com
 * @private
 */
declare function get<T>(apiEndpoint: string, requestOptions?: Request, baseUrl?: string): Promise<ResponseBody<T>>;
/**
 * Wrapper for the HTTP POST method
 * Requires the Return Type as the generic parameter
 * If a body exists, requires a Type as the second generic parameter
 * @param apiEndpoint - API Endpoint to hit
 * @param body - json body to post
 * @param requestOptions - request options to override
 * @param baseUrl - optional parameter to change the root of the API being hit, defaults to https://flex.twilio.com
 * @private
 */
declare function post<T, U>(apiEndpoint: string, body?: U, requestOptions?: Request, baseUrl?: string): Promise<ResponseBody<T>>;
/**
 * Wrapper for the HTTP PUT method
 * Requires the Return Type as the generic parameter
 * If a body exists, requires a Type as the second generic parameter
 * @param apiEndpoint - API Endpoint to hit
 * @param body - json body to post
 * @param requestOptions - request options to override
 * @param baseUrl - optional parameter to change the root of the API being hit, defaults to https://flex.twilio.com
 * @private
 */
declare function put<T, U>(apiEndpoint: string, body?: U, requestOptions?: Request, baseUrl?: string): Promise<ResponseBody<T>>;
/**
 * Wrapper for the HTTP PATCH method
 * Requires the Return Type as the generic parameter
 * If a body exists, requires a Type as the second generic parameter
 * @param apiEndpoint - API Endpoint to hit
 * @param body - json body to post
 * @param requestOptions - request options to override
 * @param baseUrl - optional parameter to change the root of the API being hit, defaults to https://flex.twilio.com
 * @private
 */
declare function patch<T, U>(apiEndpoint: string, body?: U, requestOptions?: Request, baseUrl?: string): Promise<ResponseBody<T>>;
/**
 * Wrapper for the HTTP DELETE method
 * Requires the Return Type as the generic parameter
 * If a body exists, requires a Type as the second generic parameter
 * @param apiEndpoint - API Endpoint to hit
 * @param body - json body to post
 * @param requestOptions - request options to override
 * @param baseUrl - optional parameter to change the root of the API being hit, defaults to https://flex.twilio.com
 * @private
 */
declare function del<T, U>(apiEndpoint: string, body?: U, requestOptions?: Request, baseUrl?: string): Promise<ResponseBody<T>>;
/**
 * Wrapper for the MOCK HTTP method
 * Requires the Return Type as the generic parameter
 * @param apiEndpoint - API Endpoint to hit
 * @param body - json body to post
 * @param baseUrl - optional parameter to change the root of the API being hit, defaults to https://flex.twilio.com
 * @private
 */
declare function mock<T>(apiEndpoint: string, body?: any): Promise<ResponseBody<T>>;
export declare const HttpClient: {
    get: typeof get;
    put: typeof put;
    post: typeof post;
    patch: typeof patch;
    del: typeof del;
    mock: typeof mock;
};
export {};
