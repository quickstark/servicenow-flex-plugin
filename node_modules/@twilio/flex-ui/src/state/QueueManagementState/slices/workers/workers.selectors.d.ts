import { WorkersState } from "./workers.types";
export declare const queueWorkersSelector: import("reselect").OutputSelector<WorkersState, import("./workers.types").QueueWorker[], (res1: string[], res2: {
    [sid: string]: import("./workers.types").QueueWorker;
}) => import("./workers.types").QueueWorker[]>;
export declare const eligibleWorkersSelector: import("reselect").OutputSelector<WorkersState, import("./workers.types").QueueWorker[], (res1: string[], res2: {
    [sid: string]: import("./workers.types").QueueWorker;
}) => import("./workers.types").QueueWorker[]>;
export declare const queueSortSelector: import("reselect").OutputSelector<WorkersState, import("./workers.types").QueueWorker[], (res1: import("./workers.types").QueueWorker[], res2: "computedFullName" | "activityName", res3: "desc" | "asc") => import("./workers.types").QueueWorker[]>;
export declare const eligibleSortSelector: import("reselect").OutputSelector<WorkersState, import("./workers.types").QueueWorker[], (res1: import("./workers.types").QueueWorker[], res2: "computedFullName" | "activityName", res3: "desc" | "asc") => import("./workers.types").QueueWorker[]>;
export declare const queueSearchSelector: import("reselect").OutputSelector<WorkersState, import("./workers.types").QueueWorker[], (res1: string, res2: import("./workers.types").QueueWorker[]) => import("./workers.types").QueueWorker[]>;
export declare const eligibleSearchSelector: import("reselect").OutputSelector<WorkersState, import("./workers.types").QueueWorker[], (res1: string, res2: import("./workers.types").QueueWorker[]) => import("./workers.types").QueueWorker[]>;
export declare const workersByPageSelector: import("reselect").OutputSelector<WorkersState, import("./workers.types").QueueWorker[], (res1: number, res2: number, res3: import("./workers.types").QueueWorker[]) => import("./workers.types").QueueWorker[]>;
export declare const lastPageSelector: import("reselect").OutputSelector<WorkersState, number, (res1: import("./workers.types").QueueWorker[], res2: number) => number>;
