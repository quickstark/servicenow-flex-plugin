import { QueueWorker } from "./workers.types";
export declare const getQueueWorkersPending: import("../../utils/createAction").ActionCreatorWithoutPayload<"queueWorkers/get/pending">, getQueueWorkersFulfilled: import("../../utils/createAction").ActionCreatorWithOptionalPayload<QueueWorker[], "queueWorkers/get/fulfilled">, getEligibleWorkersPending: import("../../utils/createAction").ActionCreatorWithoutPayload<"eligibleWorkers/get/pending">, getEligibleWorkerFulfilled: import("../../utils/createAction").ActionCreatorWithOptionalPayload<QueueWorker[], "eligibleWorkers/get/fulfilled">, getEligibleWorkerReset: import("../../utils/createAction").ActionCreatorWithoutPayload<"eligibleWorkers/get/reset">, setQueueWorkersFilter: import("../../utils/createAction").ActionCreatorWithNonInferrablePayload<"queueWorkers/update/filters">, setEligibleWorkerFilter: import("../../utils/createAction").ActionCreatorWithNonInferrablePayload<"eligibleWorkers/update/filters">, resetWorkerState: import("../../utils/createAction").ActionCreatorWithoutPayload<"workers/reset">, onError: import("../../utils/createAction").ActionCreatorWithOptionalPayload<import("../errors/errors.types").QueueManagementError, "errors/on/error">;
export declare const foo: import("../../utils/createAction").ActionCreatorWithNonInferrablePayload<"queueWorkers/update/filters">;
export declare function loadQueueWorkers(queueSid: string): Promise<void>;
export declare function loadEligibleWorkers(queueSid: string): Promise<void>;
export declare function onEligibleWorkersReset(): void;
