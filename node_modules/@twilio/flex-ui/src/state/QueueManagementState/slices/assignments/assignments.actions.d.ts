import { Assignment, DetailedAssignment } from "./assignments.types";
export declare const getAssignmentsPending: import("../../utils/createAction").ActionCreatorWithoutPayload<"assignments/get/pending">, getAssignmentsFulfilled: import("../../utils/createAction").ActionCreatorWithOptionalPayload<Assignment[], "assignments/get/fulfilled">, getOneAssignmentPending: import("../../utils/createAction").ActionCreatorWithoutPayload<"assignment/get/pending">, getOneAssignmentFulfilled: import("../../utils/createAction").ActionCreatorWithOptionalPayload<DetailedAssignment, "assignment/get/fulfilled">, createAssignmentPending: import("../../utils/createAction").ActionCreatorWithoutPayload<"assignment/create/pending">, createAssignmentFulfilled: import("../../utils/createAction").ActionCreatorWithOptionalPayload<DetailedAssignment, "assignment/create/fulfilled">, undoPending: import("../../utils/createAction").ActionCreatorWithoutPayload<"assignment/undo/pending">, undoFulfilled: import("../../utils/createAction").ActionCreatorWithOptionalPayload<{
    reversedAssignment: DetailedAssignment;
    newAssignment: DetailedAssignment;
}, "assignment/undo/fulfilled">, clearActiveAssignment: import("../../utils/createAction").ActionCreatorWithoutPayload<"assignment/clear/active">, onError: import("../../utils/createAction").ActionCreatorWithOptionalPayload<import("../errors/errors.types").QueueManagementError, "errors/on/error">;
export declare function loadQueueAssignments(queueSid: string): Promise<void>;
export declare function assignWorkers(taskQueueSid: string, workerSids: string[]): Promise<void>;
export declare function getAssignmentDetails(queueSid: string, assignmentSid: string): Promise<void>;
export declare function undoQueueAssignment(assignment: DetailedAssignment): Promise<DetailedAssignment>;
