import { QueuePageMetaData } from "../workers/workers.types";
export interface AssignmentsState {
    isLoading: boolean;
    bySid: {
        [sid: string]: Assignment | DetailedAssignment;
    };
    sids: string[];
    activeSid: null | string;
}
export declare type AssignmentResult = "success" | "failure";
export declare enum AssignmentType {
    New = "new_assignment",
    Undo = "undo_assignment"
}
export interface SkillDelta {
    workerSid: string;
    workerFriendlyName: string;
    add: string[];
    remove: string[];
    enable: string[];
    disable: string[];
}
export interface AgentAssignment {
    sid: string;
    fullName: string;
    friendlyName: string;
    reason: string;
    delta: SkillDelta;
}
export interface AssignmentInfo {
    count: number;
    agents: AgentAssignment[];
}
export interface Assignment {
    sid: string;
    queueSid: string;
    queueName: string;
    operationType: AssignmentType;
    agentsMoved: number;
    agentsFailed: number;
    agentsSkipped: number;
    author: string;
    authorSid: string;
    isoTimeStamp?: number;
    friendlyTimeStamp: string;
    relatedAssignment: string | null;
    relatedAssignmentStatus: AssignmentResult | null;
    canUndo: boolean;
    result: AssignmentResult;
    wasUndone: boolean;
}
export interface DetailedAssignment {
    sid: string;
    queueSid: string;
    queueName: string;
    operationType: AssignmentType;
    requestCount: number;
    result: AssignmentResult;
    success: AssignmentInfo;
    failed: AssignmentInfo;
    skipped: AssignmentInfo;
    agentsMoved: number;
    agentsFailed: number;
    agentsSkipped: number;
    isoTimeStamp?: number;
    friendlyTimeStamp: string;
    relatedAssignmentSid?: string;
    relatedAssignmentStatus: AssignmentResult | null;
    author: string;
    authorSid: string;
    canUndo: boolean;
    wasUndone: boolean;
}
export interface SkillDeltaDto {
    worker_sid: string;
    friendly_name: string;
    add: SkillDto[];
    remove: SkillDto[];
    enable: SkillDto[];
    disable: SkillDto[];
}
export interface SkillDto {
    name: string;
}
export interface WorkerAssignmentDetailDto {
    sid: string;
    full_name: string;
    friendly_name: string;
    reason: string;
    delta: SkillDeltaDto;
}
export interface WorkerAssignmentResultDto {
    count: number;
    agents: WorkerAssignmentDetailDto[];
}
export interface QueueAssignmentsResponseDto {
    assignments: QueueAssignmentResponseDto[] | null;
    next_page: string | null;
    current_page: string;
    previous_page: string | null;
    page: number;
    page_size: number;
}
export interface QueueAssignmentResponseDto {
    sid: string;
    task_queue_friendly_name: string;
    task_queue_sid: string;
    operation_type: AssignmentType;
    request_count: number;
    result: AssignmentResult;
    time_stamp: number;
    time_string: string;
    task_queue_assignment_sid: string;
    related_assignment_sid: string;
    related_assignment_status: AssignmentResult;
    requested_by: string;
    requested_by_sid: string;
    succeeded: number;
    failed: number;
    skipped: number;
    undo_permitted: boolean;
}
export interface DetailedAssignmentResponseDto {
    task_queue_assignment_sid: string;
    task_queue_sid: string;
    request_count: number;
    task_queue_friendly_name: string;
    operation_type: AssignmentType;
    result: AssignmentResult;
    success: WorkerAssignmentResultDto;
    failure: WorkerAssignmentResultDto;
    skipped: WorkerAssignmentResultDto;
    time_stamp: number;
    time_string: string;
    related_assignment_sid?: string;
    related_assignment_status: AssignmentResult | null;
    requested_by?: string;
    undo_permitted: boolean;
    requested_by_sid?: string;
}
export interface QueueHistoryData {
    assignments: Assignment[];
    metaData: QueuePageMetaData;
}
export interface AssignmentHistoryInfo {
    queueSid: string;
    assignmentSid: string;
    author: string;
    authorSid: string;
}
export interface UndoAssignmentRequest {
    queueSid: string;
    assignmentSid: string;
    author: string;
    authorSid: string;
}
export interface UndoRequestDto {
    requested_by: string;
    requested_by_sid: string;
}
export interface AuthorInfo {
    sid: string;
    name: string;
}
export interface AssignmentMapper {
    taskQueueSid: string;
    workerSids: string[];
    skills: string[];
    activities: string[];
    authorInfo: AuthorInfo;
}
export interface AssignRequestDto {
    task_queue_sid: string;
    worker_sids: string[];
    requested_by: string;
    requested_by_sid: string;
}
export interface AssignRequestFilterDto {
    activities: string[];
    skills: AssignRequestSkillsDto;
    workers: AssignRequestWorkersDto;
}
export interface SkillsDto {
    name: string;
}
export interface AssignRequestSkillsDto {
    required_skills: SkillsDto[];
    blocked_skills: SkillsDto[];
}
export declare type AssignmentRequestType = "include" | "exclude";
export interface AssignRequestWorkersDto {
    action: AssignmentRequestType;
    sids: string[];
}
export declare function isDetailedAssignment(assignment: Assignment | DetailedAssignment): assignment is DetailedAssignment;
