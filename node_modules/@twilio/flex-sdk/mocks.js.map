{"version":3,"sources":["webpack://@twilio/flex-sdk/webpack/bootstrap","webpack://@twilio/flex-sdk/external \"inversify\"","webpack://@twilio/flex-sdk/./src/errors/ErrorCodes.ts","webpack://@twilio/flex-sdk/./src/errors/FlexSdkError.ts","webpack://@twilio/flex-sdk/./src/errors/ErrorHelper.ts","webpack://@twilio/flex-sdk/./src/errors/InternalError.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.to-string\"","webpack://@twilio/flex-sdk/./src/modules/logger/Logger/LogEntry.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.promise\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.symbol\"","webpack://@twilio/flex-sdk/./src/modules/config/index.ts","webpack://@twilio/flex-sdk/external \"regenerator-runtime/runtime\"","webpack://@twilio/flex-sdk/./src/modules/websocket/index.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.symbol.description\"","webpack://@twilio/flex-sdk/./src/modules/sync/sync.rtti.ts","webpack://@twilio/flex-sdk/./src/backend/backend.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/telemetry.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/client/Client/ClientEvent.ts","webpack://@twilio/flex-sdk/./src/modules/logger/logger.rtti.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.iterator\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.iterator\"","webpack://@twilio/flex-sdk/external \"core-js/modules/web.dom-collections.iterator\"","webpack://@twilio/flex-sdk/./src/modules/auth/auth.rtti.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.concat\"","webpack://@twilio/flex-sdk/./src/modules/session/index.ts","webpack://@twilio/flex-sdk/./src/modules/stats/stats.rtti.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.symbol.iterator\"","webpack://@twilio/flex-sdk/./src/utils/assert.ts","webpack://@twilio/flex-sdk/./src/modules/config/config.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/sync/SyncClient/SyncClient.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.for-each\"","webpack://@twilio/flex-sdk/external \"core-js/modules/web.dom-collections.for-each\"","webpack://@twilio/flex-sdk/./src/modules/websocket/websocket.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventGroup.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventName.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventSource.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/TelemetrySdkClient/TelemetrySDKSessionData.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.regexp.to-string\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.keys\"","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryClientFactory/createTelemetryClient.ts","webpack://@twilio/flex-sdk/./src/utils/mapKeys.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.get-own-property-descriptor\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.function.name\"","webpack://@twilio/flex-sdk/./src/modules/events/EventPublisher/EventPublisher.ts","webpack://@twilio/flex-sdk/./src/modules/auth/index.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.get-prototype-of\"","webpack://@twilio/flex-sdk/./src/modules/session/session.rtti.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.reflect.construct\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.slice\"","webpack://@twilio/flex-sdk/./src/modules/client/client.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/logger/Logger/LoggerName.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.map\"","webpack://@twilio/flex-sdk/./src/modules/sync/Subscribable/createSubscribable.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.regexp.exec\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.filter\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.get-own-property-descriptors\"","webpack://@twilio/flex-sdk/./src/modules/sync/Sync/SyncEvent.ts","webpack://@twilio/flex-sdk/./node_modules/loglevel/lib/loglevel.js","webpack://@twilio/flex-sdk/external \"events\"","webpack://@twilio/flex-sdk/./src/modules/sync/SyncProvider/SyncProductId.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.index-of\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.includes\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.includes\"","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/telemetrySdkClient.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/events/events.rtti.ts","webpack://@twilio/flex-sdk/external \"loglevel\"","webpack://@twilio/flex-sdk/external \"twilio-sync\"","webpack://@twilio/flex-sdk/./src/backend/generated/RealtimeQueueStats/model/timeSpan.ts","webpack://@twilio/flex-sdk/external \"lodash.clonedeep\"","webpack://@twilio/flex-sdk/./src/utils/typeGuards.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.reduce\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.reverse\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.from\"","webpack://@twilio/flex-sdk/./src/modules/sync/Sync/MapMode.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.replace\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.map\"","webpack://@twilio/flex-sdk/./src/modules/websocket/Twilsock/TwilsockEvent.ts","webpack://@twilio/flex-sdk/./src/modules/session/SessionSettings/defaultSessionSettings.ts","webpack://@twilio/flex-sdk/./src/modules/client/ClientSettings/ClientSettingsStore.ts","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfig/AccountConfigImpl/AccountConfigDataContainer/AccountConfigDataContainer.ts","webpack://@twilio/flex-sdk/./src/modules/logger/LoggerFactory/getLogger.ts","webpack://@twilio/flex-sdk/./src/modules/logger/DefaultLoggerLevel/defaultLoggerLevel.ts","webpack://@twilio/flex-sdk/./src/backend/SyncAdapter/SyncAdapterImpl.ts","webpack://@twilio/flex-sdk/./src/backend/TwilsockAdapter/TwilsockAdapterImpl.ts","webpack://@twilio/flex-sdk/./src/backend/HttpAdapter/HttpAdapterImpl.ts","webpack://@twilio/flex-sdk/./src/utils/processHttpAdapterResponse.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Configuration/api/configuration.service.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Configuration/ApiServiceBinder.ts","webpack://@twilio/flex-sdk/./src/utils/mergeUserSettings.ts","webpack://@twilio/flex-sdk/./src/modules/client/ClientProvider/createClient.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Telemetry/api/telemetry.service.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Telemetry/ApiServiceBinder.ts","webpack://@twilio/flex-sdk/./src/backend/generated/RealtimeQueueStats/api/queueStats.service.ts","webpack://@twilio/flex-sdk/./src/backend/generated/RealtimeQueueStats/ApiServiceBinder.ts","webpack://@twilio/flex-sdk/external \"lodash.camelcase\"","webpack://@twilio/flex-sdk/external \"lodash.snakecase\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.values\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.trim\"","webpack://@twilio/flex-sdk/external \"twilsock\"","webpack://@twilio/flex-sdk/external \"lodash.mergewith\"","webpack://@twilio/flex-sdk/external \"lodash.mapkeys\"","webpack://@twilio/flex-sdk/external \"lodash.transform\"","webpack://@twilio/flex-sdk/./src/modules/auth/Authenticator/FederatedAuth/FederatedAuthHelper.ts","webpack://@twilio/flex-sdk/./src/modules/auth/Authenticator/FederatedAuth/FederatedAuth.ts","webpack://@twilio/flex-sdk/./src/modules/auth/AuthenticatorDataContainer/AuthenticatorDataContainerImpl.ts","webpack://@twilio/flex-sdk/./src/modules/auth/auth.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/auth/AuthenticatorFactory/createAuthenticator/createAuthenticator.ts","webpack://@twilio/flex-sdk/./src/modules/auth/TwilioIdpUrlFunction/getTwilioIdpUrl.ts","webpack://@twilio/flex-sdk/./src/modules/session/Session/SessionImpl.ts","webpack://@twilio/flex-sdk/./src/modules/session/session.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/client/Client/ClientImpl/ClientImpl.ts","webpack://@twilio/flex-sdk/./src/modules/client/client.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/events/events.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfigProvider/AccountConfigProvider.ts","webpack://@twilio/flex-sdk/./src/modules/config/EnvironmentConfig/EnvironmentConfigImpl.ts","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfig/AccountConfigImpl/AccountConfigStore/AccountConfigStore.ts","webpack://@twilio/flex-sdk/./src/modules/config/PublicConfigProvider/getPublicConfig.ts","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfig/AccountConfigImpl/AccountConfigUpdate/updateAccountConfig.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/TwilsockClient/TwilsockClient.ts","webpack://@twilio/flex-sdk/./src/modules/config/config.ioc.ts","webpack://@twilio/flex-sdk/./src/utils/retry.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/Twilsock/TwilsockImpl.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/websocket.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/rbac/rbac.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/rbac/HasRole/hasRole.ts","webpack://@twilio/flex-sdk/./src/modules/rbac/rbac.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/rbac/RequiredRole/requiredRole.ts","webpack://@twilio/flex-sdk/./src/modules/logger/Logger/LoggerImpl/LoggerImpl.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logentry/formatEntry.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logEntryPlugin.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logentry/createLogEntry.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logentry/setContext.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logentry/setData.ts","webpack://@twilio/flex-sdk/./src/modules/logger/logger.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/sync/Sync/SyncImpl.ts","webpack://@twilio/flex-sdk/./src/modules/sync/SyncMap/SyncMapImpl.ts","webpack://@twilio/flex-sdk/./src/modules/sync/SyncMapItem/SyncMapItemImpl.ts","webpack://@twilio/flex-sdk/./src/modules/sync/SyncMapProvider/getSyncMap.ts","webpack://@twilio/flex-sdk/./src/modules/sync/SyncMapItemProvider/getSyncMapItem.ts","webpack://@twilio/flex-sdk/./src/modules/sync/SyncProvider/getSync.ts","webpack://@twilio/flex-sdk/./src/modules/sync/sync.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryClient/TelemetryClientImpl/TelemetryClientImpl.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryEventGroup/TelemetryEventGroupImpl/TelemetryEventGroupImpl.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryProcessor/TwilioEventProcessor/toSdkBackendEvent.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryProcessor/TwilioEventProcessor/TwilioTelemetryProcessor.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/telemetry.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryEventGroupFactory/createEventGroup.ts","webpack://@twilio/flex-sdk/./src/modules/stats/RealtimeStats/QueueStatsProvider/getQueueStats.ts","webpack://@twilio/flex-sdk/./src/modules/stats/RealtimeStats/QueueStats/QueueStatsImpl/QueueStatsImpl.ts","webpack://@twilio/flex-sdk/./src/modules/stats/RealtimeStats/QueueStats/TasksByTime/TasksByTimeImpl.ts","webpack://@twilio/flex-sdk/./src/modules/stats/RealtimeStats/RealtimeStatsImpl.ts","webpack://@twilio/flex-sdk/./src/modules/stats/stats.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/stats/RealtimeStats/QueueStats/TasksByTimeFactory/getTasksByTime.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/telemetrySdkClient.ioc.ts","webpack://@twilio/flex-sdk/./src/ioc.config.ts","webpack://@twilio/flex-sdk/./src/backend/openApi.container.ts","webpack://@twilio/flex-sdk/external \"reflect-metadata\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.reflect.get\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.find\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.number.constructor\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.number.is-nan\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.weak-map\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.ends-with\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.match\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.splice\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.assign\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.entries\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.regexp.constructor\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.split\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.starts-with\"","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfig/AccountConfigMock/AccountConfig.mock.ts","webpack://@twilio/flex-sdk/./src/modules/auth/Authenticator/AuthenticatorMock/AuthenticatorMock.ts","webpack://@twilio/flex-sdk/./src/modules/auth/AuthenticatorDataContainer/AuthenticatorDataContainer.mock.ts","webpack://@twilio/flex-sdk/./src/modules/auth/auth.ioc.mock.ts","webpack://@twilio/flex-sdk/./src/modules/auth/AuthenticatorFactory/createAuthenticatorMock/createAuthenticatorMock.ts","webpack://@twilio/flex-sdk/./src/modules/auth/TwilioIdpUrlFunction/TwilioIdpUrlMock/getTwilioIdpUrlMock.ts","webpack://@twilio/flex-sdk/./src/modules/session/Session/Session.mock.ts","webpack://@twilio/flex-sdk/./src/modules/session/session.ioc.mock.ts","webpack://@twilio/flex-sdk/./src/modules/client/Client/ClientMock/Client.mock.ts","webpack://@twilio/flex-sdk/./src/modules/client/client.ioc.mock.ts","webpack://@twilio/flex-sdk/./src/modules/events/events.ioc.mock.ts","webpack://@twilio/flex-sdk/./src/modules/config/EnvironmentConfig/EnvironmentConfig.mock.ts","webpack://@twilio/flex-sdk/./src/modules/config/PublicConfigProvider/PublicConfigProvideMock/getPublicConfigMock.ts","webpack://@twilio/flex-sdk/./src/modules/config/config.ioc.mock.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/Twilsock/Twilsock.mock.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/TwilsockClient/TwilsockClient.mock.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/websocket.ioc.mock.ts","webpack://@twilio/flex-sdk/./src/modules/logger/Logger/LoggerMock/Logger.mock.ts","webpack://@twilio/flex-sdk/./src/modules/logger/logger.ioc.mock.ts","webpack://@twilio/flex-sdk/./src/modules/sync/SyncClient/SyncClient.mock.ts","webpack://@twilio/flex-sdk/./src/modules/sync/SyncMapItem/SyncMapItem.mock.ts","webpack://@twilio/flex-sdk/./src/modules/sync/SyncMap/SyncMap.mock.ts","webpack://@twilio/flex-sdk/./src/modules/sync/Sync/Sync.mock.ts","webpack://@twilio/flex-sdk/./src/modules/sync/sync.ioc.mock.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryClient/TelemetryClientMock/createTelemetryClient.mock.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryClient/TelemetryClientMock/TelemetryClient.mock.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryEventGroup/TelemetryEventGroupMock/TelemetryEventGroup.mock.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryProcessor/TelemetryProcessorMock/TelemetryProcessor.mock.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/telemetry.ioc.mock.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryEventGroup/TelemetryEventGroupMock/createEventGroup.mock.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/telemetrySdkClient.ioc.mock.ts","webpack://@twilio/flex-sdk/./src/modules/stats/RealtimeStats/QueueStats/TasksByTime/TasksByTime.mock.ts","webpack://@twilio/flex-sdk/./src/modules/stats/RealtimeStats/QueueStats/QueueStatsMock/QueueStats.mock.ts","webpack://@twilio/flex-sdk/./src/modules/stats/RealtimeStats/RealtimeStats.mock.ts","webpack://@twilio/flex-sdk/./src/modules/stats/stats.ioc.mock.ts","webpack://@twilio/flex-sdk/./src/ioc.config.mock.ts","webpack://@twilio/flex-sdk/./src/backend/openApi.container.mock.ts","webpack://@twilio/flex-sdk/./src/mocks.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ErrorCode","errorDetails","_defineProperty","_errorDetails","Forbidden","InvalidParams","InvalidState","NotFound","TooManyRequests","SDK","Unknown","UntrustedDomain","InvalidCertificate","InvalidSSO","InvalidAccountSid","InvalidAccessToken","AccessTokenExpired","ValidationError","AuthorizationError","PermissionDeniedError","UnsupportedMediaError","TwilsockConnectionError","SyncAccessForbiddenError","SyncMapNotFoundError","SyncInvalidMapItemDataError","SyncInvalidMapItemKeyError","SyncMapItemNotFoundError","SyncNameNotFoundError","SyncNameAlreadyExistsError","SyncInvalidNameError","SyncConnectionError","isValidErrorCode","error","values","find","code","FlexSdkError","_Error","_inherits","_super","errorCode","details","source","_this","_classCallCheck","this","detailsMessage","undefined","concat","message","_errorCode","_source","_details","setPrototypeOf","_assertThisInitialized","_wrapNativeSuper","Error","throwFlexSdkError","errorResponse","console","warn","throwFlexSdkErrorFromResponse","_x","_x2","_throwFlexSdkErrorFromResponse","apply","arguments","_callee","response","regeneratorRuntime","wrap","_context","prev","next","json","sent","stop","InternalError","InternalError_inherits","length","InternalError_classCallCheck","InternalError_assertThisInitialized","InternalError_wrapNativeSuper","Severity","LogEntry","loggerName","severity","Debug","timestamp","Date","context","_config_rtti__WEBPACK_IMPORTED_MODULE_0__","__webpack_exports__","_websocket_rtti__WEBPACK_IMPORTED_MODULE_0__","_Twilsock_TwilsockEvent__WEBPACK_IMPORTED_MODULE_1__","newableSyncClientRTTI","for","syncRTTI","syncProviderRTTI","syncCacheRTTI","syncMapProviderRTTI","syncMapItemProviderRTTI","newableSyncMapRTTI","newableSyncMapItemRTTI","syncAdapterRTTI","twilsockAdapterRTTI","httpAdapterRTTI","telemetryServiceRTTI","queueStatsServiceRTTI","configurationServiceRTTI","telemetryClientRTTI","telemetryClientFactoryRTTI","telemetryEventGroupRTTI","telemetryEventGroupFactoryRTTI","telemetryProcessorRTTI","ClientEvent","loggerFactoryRTTI","newableLoggerRTTI","loglevelFactoryRTTI","defaultPluginsRTTI","loggerSettingsRTTI","loggerInstancesRTTI","authenticatorRTTI","authenticatorDataContainerRTTI","authenticatorFactoryRTTI","twilioIdpUrlRTTI","twilioIdpUrlMockOptionsRTTI","authenticatorMockOptionsRTTI","_session_rtti__WEBPACK_IMPORTED_MODULE_0__","realtimeStatsRTTI","tasksByTimeFactoryRTTI","queueStatsProviderRTTI","newableQueueStatsRTTI","newableTasksByTimeRTTI","assertObject","_typeof","Array","isArray","assertString","assertNotEmptyString","trim","assertKeyInObject","environmentConfigRTTI","accountConfigRTTI","configDataContainerRTTI","accountConfigProviderRTTI","accountConfigUpdaterRTTI","publicConfigProviderRTTI","publicConfigMockOptionsRTTI","SyncClientEvent","SyncClientState","twilio_sync__WEBPACK_IMPORTED_MODULE_0__","newableTwilsockClientRTTI","productIdRTTI","twilsockRTTI","TelemetrySdkEventGroup","TelemetrySdkEventName","TelemetrySdkEventSource","SDKDependency","createTelemetryClient","container","telemetryClient","mapArrayKeys","cb","newArray","forEach","item","newValue","mapAllKeys","push","transform","result","mapKeysToCamelCase","camelcase","mapRootKeysTo","mapkeys","_","mapRootKeysToSnakeCase","snakecase","mapRootKeysToCamelCase","mapAllKeysToSnakeCase","EventPublisher","_dec","injectable","_dec2","inject","eventEmitterRTTI","_temp","_descriptor","eventName","listener","emitter","on","removeAllListeners","removeListener","event","_this$emitter","_len","args","_key","emit","from","alias","_len2","_key2","_class2","configurable","writable","initializer","_class","_auth_rtti__WEBPACK_IMPORTED_MODULE_0__","sessionRTTI","sessionSettingsRTTI","clientRTTI","clientProviderRTTI","clientSettingsRTTI","clientMockOptionsRTTI","LoggerName","SdkLoggerName","TelemetryLoggerName","createSubscribable","options","subscribeFunction","unsubscribeFunction","_objectSpread","subscribe","unsubscribe","dateFields","dateField","hasKey","dateValue","mapValue","SyncEvent","root","definition","__WEBPACK_AMD_DEFINE_RESULT__","define","noop","isIE","window","navigator","test","userAgent","logMethods","bindMethod","obj","methodName","method","Function","e","traceForIE","log","trace","realMethod","replaceLoggingMethods","level","methodFactory","debug","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","defaultLevel","factory","currentLevel","self","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","document","location","indexOf","encodeURIComponent","exec","slice","levels","TRACE","DEBUG","INFO","WARN","ERROR","SILENT","getLevel","setLevel","persist","toUpperCase","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","enableAll","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","TypeError","logger","_log","noConflict","getLoggers","__WEBPACK_AMD_DEFINE_FACTORY__","SyncProductId","telemetrySdkClientRTTI","TimeSpan","MapMode","TwilsockEvent","getDefaultSessionSettings","lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__","lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default","defaultSessionSettings","autoUpdateToken","cloneDeep","ClientSettingsStore","session","_session","_logger","_region","set","_appName","_appVersion","AccountConfigDataContainer","data","sdkLoggerNameToLoglevel","_sdkLoggerNameToLogle","TwilioChat","twilioChatLoglevel","TwilioSync","twilioSyncLoglevel","Twilsock","twilsockLoglevel","loggers","loglevel","loglevelFactory","plugins","keys","includes","getSdkLoglevel","reduce","instance","plugin","getDefaultLoggerSettings","defaultLoggerSettings","SyncAdapterImpl","syncProvider","SyncAdapter","_getMapItem","_getSyncObjectByPath","_asyncToGenerator","mark","path","_path$split","_path$split2","productIdString","syncObjectType","uniqueNameOrSid","itemKey","productId","split","_slicedToArray","abrupt","getDocument","getMapItem","getMap","getList","_callee2","mapItemKey","sync","map","_context2","getMapById","_x3","_x4","TwilsockAdapterImpl","twilsockInjected","twilsock","_post","url","body","post","HttpAdapterImpl","envConfig","_performNetworkCall","authMethod","performNetworkCall","headers","Headers","Authorization","btoa","token","Content-Type","JSON","stringify","urlEnvSpecifier","region","startsWith","replace","environmentSpecificUrl","getEnvironmentSpecificUrl","fetch","getRequestData","mapBody","ok","convertDateStringValuesToDate","dateRegex","dateKeyRegex","RegExp","processedResponse","entries","_ref","_ref2","ConfigurationServiceImpl","httpAdapter","_updateConfiguration","_fetchPublicConfiguration","_fetchConfiguration","queryParamName","queryParamValue","String","_callee3","accountConfigData","_context3","ApiServiceBinder","ApiServiceBinder_classCallCheck","to","inSingletonScope","mergeUserSettings","settings","userSettings","mergeWith","_srcValue","_object","objectHasKey","objectHasGetterForKey","getPrototypeOf","sendClientInitEvent","telemetrySdkClient","durationInMs","group","createEventGroup","Default","addEvents","ClientInitialized","eventSource","Client","durationMs","t0","createClient","_x5","_x6","_createClient","t0Ms","clientSettings","client","_dependencies","now","init","setSessionData","dependencies","SyncClient","version","t1","TelemetryServiceImpl","twilsockAdapter","_postTelemetryEvents","events","basePath","QueueStatsServiceImpl","syncAdapter","_getWorkerStats","_getMetadata","_getHistoricalStats","_getCurrentTasksStats","queueSid","syncObject","getSyncObjectByPath","timeSpanBucketKey","_callee4","_context4","getSSOLoginRequestBody","config","payload","products","resource","redirectUrl","FederatedAuth","authenticatorDataContainer","enviromentConfig","Auth","_refreshToken","_validateToken","_getIdpUrl","authServiceUrl","accountSid","FederatedAuthHelper","Promise","resolve","AuthenticatorDataContainerImpl","AuthenticatorDataContainerImpl_dec","AuthenticatorDataContainerImpl_class","AuthenticatorDataContainerImpl_classCallCheck","_accountSid","authModuleContainer","ContainerModule","toFactory","createAuthenticator","toDynamicValue","port","twilioServiceLoginUrl","getTwilioIdpUrl","SessionImpl","SessionImpl_dec","SessionImpl_class","connection","authFactory","accountConfigProvider","SessionImpl_classCallCheck","SessionImpl_asyncToGenerator","accountConfig","needsToAutoUpdateToken","Session","_destroy","_autoUpdateToken","_updateToken","_init","auth","tokenData","_token","connect","TokenAboutToExpire","handleTokenAboutToExpire","validateToken","_roles","roles","updateToken","newToken","refreshToken","isActive","info","_callee5","_context5","destroy","sessionModuleContainer","toConstantValue","ClientImpl","ClientImpl_dec","postConstruct","ClientImpl_temp","_EventPublisher","telemetryClientFactory","realtimeStats","_telemetrySdkClient2","_value","ClientImpl_classCallCheck","_connection","_telemetryClientFactory","_telemetrySdkClient","_sendDestroyEvent","ClientImpl_asyncToGenerator","_classPrivateFieldGet","ClientDestroyed","_classPrivateFieldSet","account","proxyEvent","TokenExpired","ConnectionError","ConnectionLost","Connected","ConnectionRestored","Disconnected","WeakMap","getOwnPropertyDescriptor","ClientImpl_class","clientModuleContainer","toProvider","eventsModuleContainer","EventEmitter","dataContainer","configurationService","newConfigData","fetchConfiguration","getEnvironmentConfig","_window$__TWILIO_FLEX","__TWILIO_FLEX_SDK__","environmentConfig","AccountConfigStore","AccountConfigStore_dec","AccountConfigStore_class","updater","AccountConfigStore_classCallCheck","accountConfigUpdater","_set","dataWithoutAccountSid","updateConfigCall","updatedConfigData","_objectWithoutProperties","updateInCallOrder","currentUpdateConfigPromise","then","RUNTIME_DOMAIN_REGEXP","getPublicConfigQueryParam","option","isAccountSidOption","paramName","paramValue","domain","sanitizedDomain","endsWith","parsedRuntimeDomain","match","sanitizeRuntimeDomain","runtimeDomain","queryParam","responseData","fetchPublicConfiguration","configurations","TwilsockClientEvent","updateAccountConfig","updatedConfiguration","updateConfiguration","updateAccountConfig_objectSpread","configModuleContainer","_getPublicConfig","getPublicConfig","retry","_retry","functionToRetry","initialDelay","maxAttempts","retryCount","maxDelay","errorToReturn","_loop2","_ret","_args2","_error$reply","_error$reply$status","delay","v","reply","status","reject","Math","pow","setTimeout","delegateYield","retry_typeof","TwilsockImpl","TwilsockImpl_dec","TwilsockImpl_class","TwilsockImpl_inherits","_connect","TC","TwilsockImpl_classCallCheck","NewableTwilsockClient","TwilsockImpl_asyncToGenerator","clientOptions","twilsockClient","clientMetadata","type","sdk","sdkv","app","appName","appv","appVersion","proxyEventsFromTwilsockClient","proxyLogsFromTwilsockClient","waitUntilConnectedOrRejected","getRawTwilsockClient","StateChanged","listenAndEmitConnectionError","_this2","_this2$logger","_this3","flexError","_get","TwilsockImpl_getPrototypeOf","TokenUpdated","_this4","isConnected","successHandler","connectionErrorHandler","removeConnectionListeners","_error$body","_error$body2","_this5","connectionDestroyed","disconnect","websocketModuleContainer","toConstructor","TwilsockClient","rbacRTTI","hasRole","role","rbacModuleContainer","requiredRole","target","propertyKey","descriptor","originalMethod","currentRoles","wrongRole","toString","LoggerImpl","LoggerImpl_dec","LoggerImpl_class","LoggerImpl_classCallCheck","LoggerImpl_defineProperty","_this$loglevel","_this$loglevel2","_this$loglevel3","_this$loglevel4","_this$loglevel5","_this$loglevel6","toTwoDigits","number","formatDate","date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","miliseconds","getMilliseconds","factories","originalFactory","logLevel","firstParam","isLogEntry","messages","unshift","logEntry","messagePrefix","reverse","logEntryPlugin","f","loggerModuleContainer","getLoglevel","Map","SyncImpl","SyncImpl_dec","SyncImpl_class","SyncImpl_inherits","_getMapById","_waitUntilConnectedOrRejected","newableSyncClient","syncMapProvider","SyncImpl_classCallCheck","NewableSyncClient","Sync","_this$syncClient","syncClient","connectionState","SyncImpl_asyncToGenerator","listenOnTokenUpdateEvent","listenOnDisconnectEvent","ConnectionStateChanged","newState","Denied","tokenUpdateHandler","disconnectHandler","mapId","mapMode","_args5","OpenExisting","_callee6","_context6","Destroyed","shutdown","SubscribeEvent","SyncMapImpl","syncSdkSyncMap","syncMapItemProvider","SyncMapImpl_classCallCheck","sid","dateUpdated","uniqueName","defaultSubscribableOptions","SyncMapItemImpl","syncMap","mapItem","SyncMapItemImpl_classCallCheck","SyncMapItemImpl_defineProperty","callback","subscribers","ItemUpdated","itemUpdatedHandler","subscriberIndex","splice","updateValue","fn","subscribable","finalOptions","SyncMapItemImpl_objectSpread","subKey","subItem","subscribableSubItems","subValue","getSubValue","newSubscribable","deleteRemovedSubKeys","assign","updatedSubValue","newSubItemSubscribable","fromObject","newData","filter","keyToRemove","subscribedSubKey","isIndexObject","sdkSyncMap","SyncMapConstructor","id","sdkSyncMapItem","SyncMapItemConstructor","getSync","syncCache","handleSyncDestroyed","delete","syncModuleContainer","syncSdkClient","_getSyncMap","getSyncMap","_getSyncMapItem","getSyncMapItem","syncProductId","TelemetryClientImpl","TelemetryClientImpl_dec","TelemetryClientImpl_class","eventGroupFactory","TelemetryClientImpl_classCallCheck","TelemetryClient","_setSessionData","sessionData","TelemetryEventGroupImpl","TelemetryEventGroupImpl_dec","TelemetryEventGroupImpl_class","processor","TelemetryEventGroupImpl_classCallCheck","_addErrorEvent","_addEvents","TelemetryEventGroupImpl_asyncToGenerator","_this$processor","_args","processEvents","errorEvent","toBackendEvent","payloadType","groupName","mappedSessionData","mappedEventData","toSdkBackendEvent_objectSpread","client_timestamp","toISOString","event_group","payload_type","toSdkBackendEvents","TwilioTelemetryProcessor","TwilioTelemetryProcessor_dec","TwilioTelemetryProcessor_class","telemetryService","TwilioTelemetryProcessor_classCallCheck","TelemetryProcessor","_sendTelemetryEvents","_processEvents","TwilioTelemetryProcessor_asyncToGenerator","backendEvents","backendEventsBatch","arrayOfPromises","isTelemetryDisabled","sendTelemetryEvents","_toConsumableArray","all","_error$source","postTelemetryEvents","telemetryModuleContainer","eventGroup","getTasksByTime","tasksByTime","QueueStatsConstructor","queueStatsService","metadata","getMetadata","QueueStatsImpl","metadataMapItem","QueueStatsImpl_classCallCheck","tasks","getSubscribable","friendlyName","queueFriendlyName","_getAllTaskChannelStats","_getTaskChannelStats","QueueStatsImpl_asyncToGenerator","workerStats","subscribableOptions","getWorkerStats","TasksByTimeImpl","TasksByTimeImpl_classCallCheck","_getForPeriod","_getCurrentTasks","TasksByTimeImpl_asyncToGenerator","getCurrentTasksStats","getSubscribableForSubKey","period","getHistoricalStats","RealtimeStatsImpl","RealtimeStatsImpl_dec","RealtimeStatsImpl_class","getQueueStats","rbac","RealtimeStatsImpl_classCallCheck","_getQueueStatsBySid","queueStats","validatePermissions","statsModuleContainer","_getQueueStats","telemetrySdkClientModuleContainer","getContainer","Container","load","TelemetryBinder","with","RealtimeQueueStatsBinder","ConfigurationServiceBinder","withContainer","AccountConfigMock","$setAccountConfigData","AuthenticatorMock","AuthenticatorMock_dec","mockOptions","AuthenticatorMock_classCallCheck","AuthenticatorMock_defineProperty","jest","valid","_this$mockOptions","mockToken","refreshedToken","$idpUrl","optional","_this$mockOptions2","onConstructed","authenticatorConstructed","AuthenticatorMock_class","AuthenticatorDataContainerMock","AuthenticatorDataContainer_mock_dec","AuthenticatorDataContainer_mock_class","AuthenticatorDataContainer_mock_classCallCheck","authModuleContainerMock","isBound","twilioIdpUrl","getTwilioIdpUrlMock","SessionMock","Session_mock_dec","Session_mock_class","Session_mock_classCallCheck","Session_mock_defineProperty","sessionModuleContainerMock","ClientMock","Client_mock_dec","Client_mock_class","Client_mock_classCallCheck","Client_mock_defineProperty","clientModuleContainerMock","eventsModuleContainerMock","environmentConfigMock","mockPublicConfig","publicAttributes","loginPopup","publicConfig","configModuleContainerMock","newConfig","config_ioc_mock_objectSpread","_getPublicConfigMock","getPublicConfigMock","TwilsockMock","Twilsock_mock_inherits","newableTwilsockClient","Twilsock_mock_classCallCheck","Twilsock_mock_defineProperty","Twilsock_mock_assertThisInitialized","$emit","_get2","Twilsock_mock_getPrototypeOf","TwilsockClientMock","genMockFromModule","mockImplementation","websocketModuleContainerMock","LoggerImplMock","Logger_mock_dec","Logger_mock_class","Logger_mock_classCallCheck","Logger_mock_defineProperty","loggerModuleContainerMock","SyncClientMock","SyncMapItemMock","SyncMapItem_mock_classCallCheck","SyncMapItem_mock_defineProperty","updateHandler","SyncMapMock","SyncMap_mock_classCallCheck","SyncMap_mock_defineProperty","items","existingItem","$update","SyncMock","Sync_mock_dec","Sync_mock_class","Sync_mock_inherits","Sync_mock_classCallCheck","Sync_mock_defineProperty","Sync_mock_assertThisInitialized","maps","syncModuleContainerMock","createTelemetryClientMock","TelemetryClientMock","TelemetryClient_mock_dec","TelemetryClient_mock_class","TelemetryClient_mock_classCallCheck","TelemetryClient_mock_defineProperty","TelemetryEventGroupMock","TelemetryEventGroup_mock_dec","TelemetryEventGroup_mock_class","TelemetryEventGroup_mock_classCallCheck","TelemetryEventGroup_mock_defineProperty","_this$events","TelemetryProcessorMock","TelemetryProcessor_mock_dec","TelemetryProcessor_mock_class","TelemetryProcessor_mock_classCallCheck","telemetryModuleContainerMock","telemetryClientAttributes","createEventGroupMock","telemetrySdkClientModuleContainerMock","TasksByTimeMock","TasksByTime_mock_dec","TasksByTime_mock_class","TasksByTime_mock_classCallCheck","TasksByTime_mock_defineProperty","mockResolvedValue","activeTasks","waitingTasks","reservedTasks","pendingTasks","assignedTasks","wrappingTasks","totalTasks","longestTaskWaitingSid","longestTaskWaitingFrom","longestTaskWaitingAge","tasksByPriority","1","2","timestampUpdated","totalTasksCount","handledTasksCount","handledTasksWithinSlThresholdCount","handledTasksWithinSlThresholdPercentage","shortAbandonedTasksCount","shortAbandonedTasksPercentage","abandonedTasksCount","abandonedTasksPercentage","flowOutTasksCount","flowOutTasksPercentage","slaPercentage","QueueStatsMock","QueueStats_mock_dec","QueueStats_mock_class","QueueStats_mock_classCallCheck","QueueStats_mock_defineProperty","activityStatistics","availableWorkers","workers","totalAvailableWorkers","totalUnavailableWorkers","totalOfflineWorkers","totalEligibleWorkers","RealtimeStatsMock","RealtimeStats_mock_dec","RealtimeStats_mock_class","RealtimeStats_mock_classCallCheck","statsModuleContainerMock","MockContainer","_Container","ioc_config_mock_inherits","ioc_config_mock_classCallCheck","loadModules","originalContainer","parent","ConfigurationBinder","symbol","unbind","makeMockFactory","mockRTTI","optionsRTTI","mocks","makeCreateClient","getMock"],"mappings":"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","file":"mocks.js","sourcesContent":[" \t\n \tvar installedModules = {};\n\n \t\n \tfunction __webpack_require__(moduleId) {\n\n \t\t\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t\n \t\tmodule.l = true;\n\n \t\t\n \t\treturn module.exports;\n \t}\n\n\n \t\n \t__webpack_require__.m = modules;\n\n \t\n \t__webpack_require__.c = installedModules;\n\n \t\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t\n \t\n \t\n \t\n \t\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t\n \t__webpack_require__.p = \"\";\n\n\n \t\n \treturn __webpack_require__(__webpack_require__.s = 107);\n","module.exports = require(\"inversify\");","\n\n\n\nexport enum ErrorCode {\n    \n\n\n    Forbidden = 403,\n    \n\n\n    InvalidParams = 400,\n    \n\n\n    InvalidState = 409,\n    \n\n\n    NotFound = 404,\n    \n\n\n    SDK = 500,\n    \n\n\n    Unknown = 501,\n    \n\n\n    UntrustedDomain = 70002,\n    \n\n\n    InvalidCertificate = 70251,\n    \n\n\n    InvalidSSO = 45212,\n    \n\n\n    InvalidAccountSid = 45213,\n    \n\n\n    InvalidAccessToken = 20101,\n    \n\n\n    AccessTokenExpired = 20104,\n    \n\n\n    ValidationError = 45004,\n    \n\n\n    AuthorizationError = 45003,\n    \n\n\n    PermissionDeniedError = 20003,\n    \n\n\n    UnsupportedMediaError = 20415,\n    \n\n\n    TwilsockConnectionError = 51216,\n    \n\n\n    SyncAccessForbiddenError = 54007,\n    \n\n\n    SyncMapNotFoundError = 54200,\n    \n\n\n    SyncMapItemNotFoundError = 54201,\n    \n\n\n    SyncInvalidMapItemDataError = 54206,\n    \n\n\n    SyncInvalidMapItemKeyError = 54209,\n    \n\n\n    SyncNameNotFoundError = 54300,\n    \n\n\n    SyncNameAlreadyExistsError = 54301,\n    \n\n\n    SyncInvalidNameError = 54302,\n    \n\n\n    SyncConnectionError = 45307,\n    \n\n\n    TooManyRequests = 20429\n}\n\ntype ErrorInfo = string; \ntype ErrorInfoMap = { [TKey in ErrorCode]: ErrorInfo };\n\n\nconst errorDetails: ErrorInfoMap = {\n    [ErrorCode.Forbidden]: \"User is not authorized to perform the requested operation\",\n    [ErrorCode.InvalidParams]: \"Invalid parameters\",\n    [ErrorCode.InvalidState]: \"Invalid state\",\n    [ErrorCode.NotFound]: \"Resource not found\",\n    [ErrorCode.TooManyRequests]: \"Too many requests\",\n    [ErrorCode.SDK]: \"Generic error from inner SDK\",\n    [ErrorCode.Unknown]: \"Unknown error\",\n    [ErrorCode.UntrustedDomain]: \"Validation error: invalid domain\",\n    [ErrorCode.InvalidCertificate]: \"Validation error: invalid certificate\",\n    [ErrorCode.InvalidSSO]: \"Validation error: invalid SSO\",\n    [ErrorCode.InvalidAccountSid]: \"Validation error: invalid account sid\",\n    [ErrorCode.InvalidAccessToken]: \"Invalid Access Token\",\n    [ErrorCode.AccessTokenExpired]: \"Access Token expired or expiration date invalid\",\n    [ErrorCode.ValidationError]: \"Validation error: request body validation fails\",\n    [ErrorCode.AuthorizationError]: \"Attempt to access resource where access is not allowed for given credentials\",\n    [ErrorCode.PermissionDeniedError]: \"You lack permission to the resource and method you requested\",\n    [ErrorCode.UnsupportedMediaError]: \"The server does not support the media type transmitted in the request\",\n    [ErrorCode.TwilsockConnectionError]: \"Twilsock connection error\",\n    [ErrorCode.SyncAccessForbiddenError]: \"Sync access forbidden for identity\",\n    [ErrorCode.SyncMapNotFoundError]: \"Sync map not found\",\n    [ErrorCode.SyncInvalidMapItemDataError]: \"Invalid sync map item data\",\n    [ErrorCode.SyncInvalidMapItemKeyError]: \"Invalid sync map item key\",\n    [ErrorCode.SyncMapItemNotFoundError]: \"Sync map item not found\",\n    [ErrorCode.SyncNameNotFoundError]: \"Sync unique name not found\",\n    [ErrorCode.SyncNameAlreadyExistsError]: \"Sync unique name already exists\",\n    [ErrorCode.SyncInvalidNameError]: \"Sync invalid unique name\",\n    [ErrorCode.SyncConnectionError]: \"Sync connection error\"\n};\n\nexport function isValidErrorCode(error: number): boolean {\n    const errorFound = Object.values(ErrorCode).find((code: number) => code === error);\n    return !!errorFound;\n}\n\nexport function getMessage(error: ErrorCode): string {\n    return isValidErrorCode(error) ? errorDetails[error] : \"Error\";\n}\n","import { ErrorCode, getMessage } from \"./ErrorCodes\";\n\n\n\n\n\nexport class FlexSdkError extends Error {\n    private readonly _details: string | undefined;\n\n    private readonly _errorCode: ErrorCode;\n\n    private readonly _source: Error | undefined;\n\n    constructor(errorCode: ErrorCode, details?: string, source?: Error) {\n        const detailsMessage = details !== undefined ? `: ${details}` : \"\";\n        const message = `${getMessage(errorCode)}${detailsMessage}`;\n        super(message);\n        this._errorCode = errorCode;\n        this._source = source;\n        this._details = details;\n\n        Object.setPrototypeOf(this, FlexSdkError.prototype);\n    }\n\n    \n\n\n\n\n\n    public get code(): ErrorCode {\n        return this._errorCode;\n    }\n\n    \n\n\n\n\n\n    public get details(): string | undefined {\n        return this._details;\n    }\n\n    \n\n\n\n    public get source(): Error | undefined {\n        return this._source;\n    }\n}\n","import { FlexSdkError } from \"./FlexSdkError\";\nimport { isValidErrorCode, ErrorCode } from \"./ErrorCodes\";\n\nexport interface ErrorResponse {\n    code?: number;\n    message?: string;\n}\n\nexport function throwFlexSdkError(errorResponse: ErrorResponse) {\n    if (!errorResponse.code || !isValidErrorCode(errorResponse.code)) {\n        console.warn(\"Unknown error code\"); \n    }\n\n    const errorCode = errorResponse.code ? errorResponse.code : ErrorCode.Unknown;\n    throw new FlexSdkError(errorCode, errorResponse.message);\n}\n\nexport async function throwFlexSdkErrorFromResponse(response: Response, message?: string) {\n    const errorResponse: ErrorResponse = await response.json();\n    errorResponse.message = message || errorResponse.message;\n    throwFlexSdkError(errorResponse);\n}\n","\n\n\n\nexport class InternalError extends Error {\n    constructor(message: string = \"Internal Error\") {\n        super(message);\n        Object.setPrototypeOf(this, InternalError.prototype);\n    }\n}\n","module.exports = require(\"core-js/modules/es.object.to-string\");","\n\n\nexport enum Severity {\n    Trace = \"trace\",\n    Debug = \"debug\",\n    Info = \"info\",\n    Warn = \"warn\",\n    Error = \"error\"\n}\n\nexport class LogEntry {\n    constructor(loggerName: string, severity: Severity = Severity.Debug) {\n        this.loggerName = loggerName;\n        this.severity = severity;\n        this.timestamp = new Date();\n        this.context = {};\n    }\n\n    readonly loggerName: string;\n\n    readonly timestamp: Date;\n\n    readonly severity: Severity;\n\n    data: unknown[];\n\n    errorCode?: number;\n\n    readonly context?: {\n        sessionId?: string;\n        userSid?: string;\n        resourceSid?: string;\n        stack?: string;\n    };\n}\n","module.exports = require(\"core-js/modules/es.promise\");","module.exports = require(\"core-js/modules/es.symbol\");","export type { AccountConfig, AccountConfigProvider, AccountConfigKeys } from \"./AccountConfig/AccountConfig\";\nexport type { AccountConfigData } from \"~/backend/generated/Configuration/model/accountConfigData\";\nexport type { IntegrationsConfig } from \"~/backend/generated/Configuration/model/integrationsConfig\";\nexport type { OutboundFlows } from \"~/backend/generated/Configuration/model/outboundFlows\";\nexport type { SkillDefinition } from \"~/backend/generated/Configuration/model/skillDefinition\";\nexport type { QueueStatsConfiguration } from \"~/backend/generated/Configuration/model/queueStatsConfiguration\";\nexport type { TaskQueue } from \"~/backend/generated/Configuration/model/taskQueue\";\nexport type { WorkerChannel } from \"~/backend/generated/Configuration/model/workerChannel\";\nexport type { DefaultQueueStatsConfiguration } from \"~/backend/generated/Configuration/model/defaultQueueStatsConfiguration\";\nexport type { QueueConfiguration } from \"~/backend/generated/Configuration/model/queueConfiguration\";\nexport type { QueueChannelConfiguration } from \"~/backend/generated/Configuration/model/queueChannelConfiguration\";\n\nexport type { EnvironmentConfig } from \"./EnvironmentConfig/EnvironmentConfig\";\nexport {\n    accountConfigRTTI,\n    accountConfigProviderRTTI,\n    environmentConfigRTTI,\n    publicConfigProviderRTTI,\n    configDataContainerRTTI\n} from \"./config.rtti\";\nexport type {\n    PublicConfigProvider,\n    AccountSidOption,\n    RuntimeDomainOption\n} from \"./PublicConfigProvider/PublicConfigProvider\";\n\nexport type { PublicConfig } from \"~/backend/generated/Configuration/model/publicConfig\";\nexport type { PublicConfigAttributes } from \"~/backend/generated/Configuration/model/publicConfigAttributes\";\n","module.exports = require(\"regenerator-runtime/runtime\");","export { twilsockRTTI } from \"./websocket.rtti\";\nexport type { Twilsock, TwilsockResult, Headers } from \"./Twilsock/Twilsock\";\nexport { TwilsockEvent } from \"./Twilsock/TwilsockEvent\";\n","module.exports = require(\"core-js/modules/es.symbol.description\");","export const newableSyncClientRTTI = Symbol.for(\"NewableSyncClient\");\nexport const syncRTTI = Symbol.for(\"Sync\");\nexport const syncProviderRTTI = Symbol.for(\"SyncProvider\");\nexport const syncCacheRTTI = Symbol.for(\"SyncCache\");\nexport const syncMapProviderRTTI = Symbol.for(\"SyncMapProvider\");\nexport const syncMapItemProviderRTTI = Symbol.for(\"SyncMapItemProvider\");\nexport const newableSyncMapRTTI = Symbol.for(\"NewableSyncMap\");\nexport const newableSyncMapItemRTTI = Symbol.for(\"NewableSyncMapItem\");\n","export const syncAdapterRTTI = Symbol.for(\"SyncAdapter\");\nexport const twilsockAdapterRTTI = Symbol.for(\"TwilsockAdapter\");\nexport const httpAdapterRTTI = Symbol.for(\"HttpAdapter\");\nexport const telemetryServiceRTTI = \"TelemetryService\";\nexport const queueStatsServiceRTTI = \"QueueStatsService\";\nexport const configurationServiceRTTI = \"ConfigurationService\";\n","export const telemetryClientRTTI = Symbol.for(\"TelemetryClient\");\nexport const telemetryClientFactoryRTTI = Symbol.for(\"TelemetryClientFactory\");\nexport const telemetryEventGroupRTTI = Symbol.for(\"TelemetryEventGroup\");\nexport const telemetryEventGroupFactoryRTTI = Symbol.for(\"TelemetryEventGroupFactory\");\nexport const telemetryProcessorRTTI = Symbol.for(\"TelemetryProcessor\");\n","\n\n\nexport enum ClientEvent {\n    TokenExpired = \"tokenExpired\",\n    TokenAboutToExpire = \"tokenAboutToExpire\",\n    ConnectionLost = \"connectionLost\",\n    ConnectionRestored = \"connectionRestored\",\n    Disconnected = \"disconnected\"\n}\n","export const loggerFactoryRTTI = Symbol.for(\"loggerFactory\");\nexport const newableLoggerRTTI = Symbol.for(\"NewableLogger\");\nexport const loglevelFactoryRTTI = Symbol.for(\"loglevelFactory\");\nexport const defaultPluginsRTTI = Symbol.for(\"loggerDefaultPlugins\");\nexport const loggerSettingsRTTI = Symbol.for(\"LoggerSettings\");\nexport const loggerInstancesRTTI = Symbol.for(\"LoggerInstances\");\n","module.exports = require(\"core-js/modules/es.array.iterator\");","module.exports = require(\"core-js/modules/es.string.iterator\");","module.exports = require(\"core-js/modules/web.dom-collections.iterator\");","export const authenticatorRTTI = Symbol.for(\"Authenticator\");\nexport const authenticatorDataContainerRTTI = Symbol.for(\"AuthenticatorDataContainer\");\nexport const authenticatorFactoryRTTI = Symbol.for(\"AuthenticatorFactory\");\nexport const twilioIdpUrlRTTI = Symbol.for(\"TwilioIdpUrl\");\nexport const twilioIdpUrlMockOptionsRTTI = Symbol.for(\"twilioIdpUrlMockOptions\");\nexport const authenticatorMockOptionsRTTI = Symbol.for(\"authenticatorMockOptions\");\n","module.exports = require(\"core-js/modules/es.array.concat\");","export type { Session, SessionSettings } from \"./Session/Session\";\nexport { sessionRTTI, sessionSettingsRTTI } from \"./session.rtti\";\n","export const realtimeStatsRTTI = Symbol.for(\"RealtimeStats\");\n\nexport const tasksByTimeFactoryRTTI = Symbol.for(\"TasksByTimeFactory\");\nexport const queueStatsProviderRTTI = Symbol.for(\"QueueStatsProvider\");\n\nexport const newableQueueStatsRTTI = Symbol.for(\"NewableQueueStats\");\nexport const newableTasksByTimeRTTI = Symbol.for(\"NewableTasksByTime\");\n","module.exports = require(\"core-js/modules/es.symbol.iterator\");","import { FlexSdkError, ErrorCode } from \"~/errors\";\n\nexport function assertArray<T>(value: Array<T>, name: string): asserts value is Array<T> {\n    if (!Array.isArray(value)) {\n        throw new FlexSdkError(ErrorCode.InvalidParams, `${name}, expected an array`);\n    }\n}\n\nexport function assertBoolean(value: boolean, name: string): asserts value is boolean {\n    if (typeof value !== \"boolean\") {\n        throw new FlexSdkError(ErrorCode.InvalidParams, `${name}, expected a boolean`);\n    }\n}\n\nexport function assertDefined<T>(value: T, name: string): asserts value is T {\n    if (typeof value === \"undefined\") {\n        throw new FlexSdkError(ErrorCode.InvalidParams, `${name}, expected a defined value`);\n    }\n}\n\nexport function assertNumber(value: number, name: string): asserts value is number {\n    if (typeof value !== \"number\" || Number.isNaN(value)) {\n        throw new FlexSdkError(ErrorCode.InvalidParams, `${name}, expected a number`);\n    }\n}\n\nexport function assertObject<T>(value: T, name: string): asserts value is T {\n    if (typeof value !== \"object\" || value === null || Array.isArray(value)) {\n        throw new FlexSdkError(ErrorCode.InvalidParams, `${name}, expected an object`);\n    }\n}\n\nexport function assertString(value: string, name: string): asserts value is string {\n    if (typeof value !== \"string\") {\n        throw new FlexSdkError(ErrorCode.InvalidParams, `${name}, expected a string`);\n    }\n}\n\nexport function assertNotEmptyString(value: string, name: string): asserts value is string {\n    assertString(value, name);\n    if (value.trim() === \"\") {\n        throw new FlexSdkError(ErrorCode.InvalidParams, `${name}, expected a string which is not empty`);\n    }\n}\n\nexport function assertKeyInObject<T>(key: string, object: T) {\n    if (!(key in object)) {\n        throw new FlexSdkError(ErrorCode.InvalidParams, `${key} is not a valid key`);\n    }\n}\n","export const environmentConfigRTTI = Symbol.for(\"EnvironmentConfig\");\nexport const accountConfigRTTI = Symbol.for(\"AccountConfig\");\nexport const accountConfigDataRTTI = Symbol.for(\"AccountConfigData\");\nexport const configDataContainerRTTI = Symbol.for(\"ConfigDataContainer\");\nexport const accountConfigProviderRTTI = Symbol.for(\"AccountConfigProvider\");\nexport const accountConfigUpdaterRTTI = Symbol.for(\"AccountConfigUpdater\");\nexport const publicConfigProviderRTTI = Symbol.for(\"PublicConfigProvider\");\nexport const publicConfigMockOptionsRTTI = Symbol.for(\"PublicConfigMockOptions\");\n","import { SyncClient } from \"twilio-sync\";\n\nexport { SyncClient };\n\nexport type SyncOptions = {\n    region?: string;\n};\n\nexport enum SyncClientEvent {\n    ConnectionStateChanged = \"connectionStateChanged\"\n}\n\nexport enum SyncClientState {\n    Connected = \"connected\",\n    Error = \"error\",\n    Disconnected = \"disconnected\",\n    Denied = \"denied\"\n}\n\nexport interface NewableSyncClient {\n    new (token: string, options: SyncOptions): SyncClient;\n}\n\nexport interface SyncDocument<T extends object = object> {\n    \n}\n\nexport interface SyncList<T extends object = object> {\n    \n}\n","module.exports = require(\"core-js/modules/es.array.for-each\");","module.exports = require(\"core-js/modules/web.dom-collections.for-each\");","export const newableTwilsockClientRTTI = Symbol.for(\"NewableTwilsockClient\");\nexport const productIdRTTI = Symbol.for(\"ProductID\");\nexport const twilsockRTTI = Symbol.for(\"Twilsock\");\n","export enum TelemetrySdkEventGroup {\n    Default = \"default\"\n}\n","export enum TelemetrySdkEventName {\n    ClientInitialized = \"client_initialized\",\n    ClientDestroyed = \"client_destroyed\"\n}\n","export enum TelemetrySdkEventSource {\n    Client = \"Client\"\n}\n","\n\n\nexport enum SDKDependency {\n    TwilioChat = \"twilio_chat\",\n    TwilioSync = \"twilio_sync\",\n    TwilioClient = \"twilio_client\",\n    Twilsock = \"twilsock\"\n}\n\n\n\n\nexport interface TelemetrySDKSessionData {\n    \n\n\n    dependencies?: { [key in SDKDependency]?: string };\n}\n","module.exports = require(\"core-js/modules/es.regexp.to-string\");","module.exports = require(\"core-js/modules/es.object.keys\");","import { interfaces } from \"inversify\";\nimport { telemetryClientRTTI } from \"~/modules/telemetry/telemetry.rtti\";\nimport { TelemetryClient } from \"~/modules/telemetry/TelemetryClient/TelemetryClient\";\n\nexport function createTelemetryClient<U extends object>(\n    container: interfaces.Container,\n    name: string\n): TelemetryClient<U> {\n    const telemetryClient = container.get<TelemetryClient<U>>(telemetryClientRTTI);\n    telemetryClient.name = name;\n    return telemetryClient;\n}\n","import camelcase from \"lodash.camelcase\";\nimport snakecase from \"lodash.snakecase\";\nimport mapkeys from \"lodash.mapkeys\";\nimport transform from \"lodash.transform\";\n\ninterface LooseObject {\n    [key: string]: unknown;\n}\n\nconst mapArrayKeys = <T extends object>(object: T[], cb: (key: string) => string) => {\n    const newArray = [] as object[];\n    object.forEach((item: T) => {\n        let newValue: T;\n        if (Array.isArray(item)) {\n            newValue = mapArrayKeys(item, cb) as T;\n        } else if (typeof item === \"object\") {\n            \n            newValue = mapAllKeys(item, cb) as T;\n        } else {\n            newValue = item;\n        }\n        newArray.push(newValue);\n    });\n    return newArray;\n};\n\nconst mapAllKeys = <T extends object>(object: T, cb: (key: string) => string) => {\n    \n    return transform<any, LooseObject>(\n        object,\n        (result: LooseObject, value: Object, key: string) => {\n            if (Array.isArray(value)) {\n                \n                result[`${cb(key)}`] = mapArrayKeys(value, cb);\n            } else if (value instanceof Object && !(value instanceof Date)) {\n                \n                result[`${cb(key)}`] = mapAllKeys(value, cb);\n            } else {\n                \n                result[`${cb(key)}`] = value;\n            }\n        },\n        {}\n    );\n};\n\nexport const mapKeysToCamelCase = <T extends object>(object: T) => mapAllKeys(object, (key: string) => camelcase(key));\n\nconst mapRootKeysTo = <T extends object>(object: T, cb: (key: string) => string) =>\n    \n    mapkeys<any>(object, (_, key: string) => cb(key));\n\nexport const mapRootKeysToSnakeCase = <T extends object>(object: T) =>\n    mapRootKeysTo(object, (key: string) => snakecase(key));\n\nexport const mapRootKeysToCamelCase = <T extends object>(object: T) =>\n    mapRootKeysTo(object, (key: string) => camelcase(key));\n\nexport const mapAllKeysToSnakeCase = <T extends object>(object: T) =>\n    mapAllKeys(object, (key: string) => snakecase(key));\n","module.exports = require(\"core-js/modules/es.object.get-own-property-descriptor\");","module.exports = require(\"core-js/modules/es.function.name\");","import { injectable, inject } from \"inversify\";\nimport { Emitter } from \"./Emitter\";\nimport { eventEmitterRTTI } from \"~/modules/events/events.rtti\";\n\n\n\n\n@injectable()\nexport abstract class EventPublisher<E extends string | symbol> {\n    @inject(eventEmitterRTTI) private readonly emitter: Emitter;\n\n    public on(eventName: E, listener: (...args: unknown[]) => void) {\n        this.emitter.on(eventName, listener);\n        return this;\n    }\n\n    public removeAllListeners() {\n        this.emitter.removeAllListeners();\n        return this;\n    }\n\n    public removeListener(eventName: E, listener: (...args: unknown[]) => void) {\n        this.emitter.removeListener(eventName, listener);\n        return this;\n    }\n\n    protected emit(event: E, ...args: unknown[]) {\n        return this.emitter.emit(event, ...args);\n    }\n\n    protected proxyEvent<T extends string | symbol>(from: EventPublisher<T> | Emitter, event: T, alias: E) {\n        from.on(event, (...args: unknown[]) => {\n            this.emit(alias, ...args);\n        });\n    }\n}\n","export type { Authenticator, IdpConfig, Role, TokenData } from \"./Authenticator/Authenticator\";\nexport type { AuthenticatorFactory } from \"./AuthenticatorFactory/AuthenticatorFactory\";\nexport { authenticatorRTTI, authenticatorFactoryRTTI, twilioIdpUrlRTTI } from \"./auth.rtti\";\nexport type { TwilioIdpUrlFunction } from \"./TwilioIdpUrlFunction/TwilioIdpUrl\";\n","module.exports = require(\"core-js/modules/es.object.get-prototype-of\");","export const sessionRTTI = Symbol.for(\"Session\");\nexport const sessionSettingsRTTI = Symbol.for(\"SessionSettings\");\n","module.exports = require(\"core-js/modules/es.reflect.construct\");","module.exports = require(\"core-js/modules/es.array.slice\");","export const clientRTTI = Symbol.for(\"Client\");\nexport const clientProviderRTTI = Symbol.for(\"ClientProvider\");\nexport const clientSettingsRTTI = Symbol.for(\"ClientSettings\");\nexport const clientMockOptionsRTTI = Symbol.for(\"ClientMockOptions\");\n","\n\n\nexport enum LoggerName {\n    Client = \"flex:Client\",\n    Session = \"flex:Session\",\n    Twilsock = \"flex:Twilsock\",\n    Auth = \"flex:Auth\",\n    Config = \"flex:Config\",\n    Sync = \"flex:Sync\",\n    SyncAdapter = \"flex:SyncAdapter\",\n    QueueStats = \"flex:QueueStats\"\n    \n}\n\n\n\n\nexport enum SdkLoggerName {\n    TwilioChat = \"twilio-chat\",\n    TwilioSync = \"twilio-sync\",\n    Twilsock = \"twilsock\"\n}\n\n\n\n\nexport enum TelemetryLoggerName {\n    TelemetryClient = \"TelemetryClient\",\n    TelemetryProcessor = \"TelemetryProcessor\",\n    TelemetrySdkClient = \"TelemetrySdkClient\"\n}\n\n\n\n\nexport type InternalLoggerName = LoggerName | SdkLoggerName | TelemetryLoggerName;\n","module.exports = require(\"core-js/modules/es.map\");","import { SubscribableOptions } from \"./SubscribableOptions\";\nimport { Subscribable } from \"./Subscribable\";\nimport { mapKeysToCamelCase } from \"~/utils/mapKeys\";\nimport { hasKey } from \"~/utils/typeGuards\";\n\nfunction mapValue(value: object, options: SubscribableOptions): object {\n    const newValue = options.mapKeysToCamelCase ? mapKeysToCamelCase(value) : value;\n\n    if (options.dateFields) {\n        options.dateFields.forEach((dateField) => {\n            if (hasKey(newValue, dateField)) {\n                const dateValue = newValue[dateField] as string;\n                newValue[dateField] = dateValue ? new Date(dateValue) : undefined;\n            }\n        });\n    }\n\n    return newValue;\n}\n\nexport function createSubscribable<T>(\n    value: object,\n    options: SubscribableOptions,\n    subscribeFunction: Function,\n    unsubscribeFunction: Function\n): Subscribable<T> {\n    const subscribable = {\n        subscribe: subscribeFunction,\n        unsubscribe: unsubscribeFunction,\n        ...mapValue(value, options)\n    };\n\n    return subscribable as Subscribable<T>;\n}\n","module.exports = require(\"core-js/modules/es.regexp.exec\");","module.exports = require(\"core-js/modules/es.array.filter\");","module.exports = require(\"core-js/modules/es.object.get-own-property-descriptors\");","export enum SyncEvent {\n    Destroyed = \"destroyed\"\n}\n","\n\n\n\n\n\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    \n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    \n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                \n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    \n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                \n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    \n    \n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; \n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    \n\n    function replaceLoggingMethods(level, loggerName) {\n        \n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        \n        this.log = this.debug;\n    }\n\n    \n    \n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    \n    \n    function defaultMethodFactory(methodName, level, loggerName) {\n        \n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = \"loglevel\";\n      if (name) {\n        storageKey += \":\" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          \n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          \n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          \n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          \n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      \n\n\n\n\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  \n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      \n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    \n\n\n\n\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"string\" || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    \n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n","module.exports = require(\"events\");","export enum SyncProductId {\n    Flex = \"flex\",\n    FlexInsights = \"flex_insights\"\n}\n","module.exports = require(\"core-js/modules/es.array.index-of\");","module.exports = require(\"core-js/modules/es.array.includes\");","module.exports = require(\"core-js/modules/es.string.includes\");","export const telemetrySdkClientRTTI = Symbol.for(\"TelemetrySdkClient\");\n","export const eventEmitterRTTI = Symbol.for(\"eventEmitter\");\n","module.exports = require(\"loglevel\");","module.exports = require(\"twilio-sync\");","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport enum TimeSpan {\n    Today = \"tasks_today\",\n    ThirtyMinutes = \"tasks_thirty_minutes\"\n}\n","module.exports = require(\"lodash.clonedeep\");","export function hasKey(value: object, key: string): value is { [key: string]: unknown } {\n    return Object.prototype.hasOwnProperty.call(value, key);\n}\n","module.exports = require(\"core-js/modules/es.array.reduce\");","module.exports = require(\"core-js/modules/es.array.reverse\");","module.exports = require(\"core-js/modules/es.array.from\");","export enum MapMode {\n    OpenExisting = \"open_existing\",\n    OpenOrCreate = \"open_or_create\",\n    CreateNew = \"create_new\"\n}\n","module.exports = require(\"core-js/modules/es.string.replace\");","module.exports = require(\"core-js/modules/es.array.map\");","export enum TwilsockEvent {\n    TokenExpired = \"tokenExpired\",\n    TokenAboutToExpire = \"tokenAboutToExpire\",\n    StateChanged = \"stateChanged\",\n    ConnectionError = \"connectionError\",\n    Connected = \"connected\",\n    Disconnected = \"disconnected\",\n    TokenUpdated = \"tokenUpdated\"\n}\n","import cloneDeep from \"lodash.clonedeep\";\nimport { SessionSettings } from \"~/modules/session\";\n\nconst defaultSessionSettings: SessionSettings = {\n    autoUpdateToken: true\n};\n\nexport function getDefaultSessionSettings(): SessionSettings {\n    return cloneDeep(defaultSessionSettings);\n}\n","import { injectable, inject } from \"inversify\";\nimport { ClientSettings } from \"~/modules/client\";\nimport { SessionSettings, sessionSettingsRTTI } from \"~/modules/session\";\nimport { LoggerSettings, loggerSettingsRTTI } from \"~/modules/logger\";\n\n@injectable()\nexport class ClientSettingsStore implements ClientSettings {\n    private readonly _session: SessionSettings;\n\n    private readonly _logger: LoggerSettings;\n\n    \n    \n    private _region: string;\n\n    private _appName: string;\n\n    private _appVersion: string;\n\n    constructor(\n        @inject(sessionSettingsRTTI) session: SessionSettings,\n        @inject(loggerSettingsRTTI) logger: LoggerSettings\n    ) {\n        this._session = session;\n        this._logger = logger;\n    }\n\n    get session(): SessionSettings {\n        return this._session;\n    }\n\n    get logger(): LoggerSettings {\n        return this._logger;\n    }\n\n    get region(): string {\n        return this._region;\n    }\n\n    set region(value: string) {\n        this._region = value;\n    }\n\n    get appName(): string {\n        return this._appName;\n    }\n\n    set appName(value: string) {\n        this._appName = value;\n    }\n\n    get appVersion(): string {\n        return this._appVersion;\n    }\n\n    set appVersion(value: string) {\n        this._appVersion = value;\n    }\n}\n","import { injectable } from \"inversify\";\nimport { AccountConfigData } from \"~/backend/generated/Configuration/model/accountConfigData\";\nimport { ConfigDataContainer } from \"~/modules/config/AccountConfig/ConfigDataContainer\";\nimport { InternalError } from \"~/errors\";\n\n@injectable()\nexport class AccountConfigDataContainer implements ConfigDataContainer<AccountConfigData> {\n    private data?: AccountConfigData;\n\n    get(): AccountConfigData {\n        if (!this.data) {\n            throw new InternalError(\"Config data hasn't been fetched\");\n        }\n        return this.data;\n    }\n\n    set(data: AccountConfigData): void {\n        this.data = data;\n    }\n}\n","import { interfaces } from \"inversify\";\n\nimport twilioChatLoglevel from \"loglevels/twilio-chat\";\n\nimport twilioSyncLoglevel from \"loglevels/twilio-sync\";\n\nimport twilsockLoglevel from \"loglevels/twilsock\";\n\nimport * as defaultLoglevel from \"loglevel\";\nimport {\n    loglevelFactoryRTTI,\n    newableLoggerRTTI,\n    defaultPluginsRTTI,\n    loggerSettingsRTTI,\n    loggerInstancesRTTI\n} from \"~/modules/logger/logger.rtti\";\nimport { LoglevelFactory, LoggerPlugin, LoggerInstances } from \"./LoggerFactory\";\nimport { LoggerSettings, Logger, Loglevel } from \"~/modules/logger\";\nimport { assertString } from \"~/utils/assert\";\nimport { InternalLoggerName, SdkLoggerName } from \"~/modules/logger/Logger/LoggerName\";\nimport { NewableLogger } from \"~/modules/logger/Logger/Logger\";\n\nconst sdkLoggerNameToLoglevel: { [name in SdkLoggerName]: defaultLoglevel.RootLogger } = {\n    [SdkLoggerName.TwilioChat]: twilioChatLoglevel,\n    [SdkLoggerName.TwilioSync]: twilioSyncLoglevel,\n    [SdkLoggerName.Twilsock]: twilsockLoglevel\n};\n\nconst getSdkLoglevel = (name: SdkLoggerName) => {\n    return sdkLoggerNameToLoglevel[name].getLogger(name);\n};\n\nexport const getLogger = (container: interfaces.Container) => (name: InternalLoggerName): Logger => {\n    assertString(name, \"name\");\n\n    const loggers = container.get<LoggerInstances>(loggerInstancesRTTI);\n    let logger = loggers.get(name);\n    if (logger) {\n        return logger;\n    }\n\n    const defaultLevel = container.get<LoggerSettings>(loggerSettingsRTTI).level;\n    const loglevelFactory = container.get<LoglevelFactory>(loglevelFactoryRTTI);\n    const plugins = container.get<LoggerPlugin[]>(defaultPluginsRTTI);\n\n    let loglevel;\n    if (Object.keys(sdkLoggerNameToLoglevel).includes(name)) {\n        loglevel = getSdkLoglevel(name as SdkLoggerName);\n    } else {\n        loglevel = loglevelFactory(name);\n    }\n\n    loglevel = plugins.reduce((instance: Loglevel, plugin: LoggerPlugin) => plugin(instance), loglevel);\n\n    const LoggerConstructor = container.get<NewableLogger>(newableLoggerRTTI);\n    logger = new LoggerConstructor(loglevel);\n\n    logger.setLevel(defaultLevel);\n\n    loggers.set(name, logger);\n    return logger;\n};\n","import cloneDeep from \"lodash.clonedeep\";\nimport { LoggerSettings } from \"~/modules/logger\";\n\nconst defaultLoggerSettings: LoggerSettings = {\n    level: \"ERROR\"\n};\n\nexport function getDefaultLoggerSettings(): LoggerSettings {\n    return cloneDeep(defaultLoggerSettings);\n}\n","\nimport { injectable, inject } from \"inversify\";\nimport { Logger, LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport {\n    SyncDocument,\n    SyncList,\n    SyncMap,\n    SyncMapItem,\n    SyncProvider,\n    SyncProductId,\n    syncProviderRTTI\n} from \"~/modules/sync\";\n\nimport { SyncAdapter } from \"./SyncAdapter\";\nimport { InternalError } from \"~/errors\";\n\n@injectable()\nexport class SyncAdapterImpl implements SyncAdapter {\n    private readonly logger: Logger;\n\n    private readonly syncProvider: SyncProvider;\n\n    constructor(\n        @inject(syncProviderRTTI) syncProvider: SyncProvider,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory\n    ) {\n        this.logger = getLogger(LoggerName.SyncAdapter);\n        this.syncProvider = syncProvider;\n    }\n\n    \n\n\n\n\n    async getSyncObjectByPath<T extends object>(\n        path: string\n    ): Promise<SyncDocument<T> | SyncList<T> | SyncMap | SyncMapItem<T>> {\n        this.logger.trace(\"getSyncObjectByPath\", path);\n        \n        const [_slash, productIdString, syncObjectType, uniqueNameOrSid, _items, itemKey] = path.split(\"/\");\n\n        const productId = productIdString as SyncProductId;\n        if (!Object.values(SyncProductId).includes(productId)) {\n            throw new InternalError(`Unknown product id: ${productIdString}`);\n        }\n\n        if (syncObjectType === \"Documents\") {\n            return this.getDocument<T>(productId, uniqueNameOrSid);\n        }\n        if (syncObjectType === \"Maps\") {\n            if (itemKey) {\n                return this.getMapItem<T>(productId, uniqueNameOrSid, itemKey);\n            }\n\n            return this.getMap(productId, uniqueNameOrSid);\n        }\n        if (syncObjectType === \"Lists\") {\n            return this.getList<T>(productId, uniqueNameOrSid);\n        }\n\n        throw new InternalError(\"Invalid Sync Object URL\");\n    }\n\n    private getDocument<T extends object>(productId: SyncProductId, uniqueNameOrSid: string): Promise<SyncDocument<T>> {\n        this.logger.trace(\"getDocument\", productId, uniqueNameOrSid);\n        \n        throw new Error(\"Not implemented.\");\n    }\n\n    private getList<T extends object>(productId: SyncProductId, uniqueNameOrSid: string): Promise<SyncList<T>> {\n        this.logger.trace(\"getList\", productId, uniqueNameOrSid);\n        \n        throw new Error(\"Not implemented.\");\n    }\n\n    private getMap(productId: SyncProductId, uniqueNameOrSid: string): Promise<SyncMap> {\n        this.logger.trace(\"getMap\", productId, uniqueNameOrSid);\n        \n        throw new Error(\"Not implemented.\");\n    }\n\n    private async getMapItem<T extends object>(\n        productId: SyncProductId,\n        uniqueNameOrSid: string,\n        mapItemKey: string\n    ): Promise<SyncMapItem<T>> {\n        this.logger.trace(\"getMapItem\", productId, uniqueNameOrSid, mapItemKey);\n        const sync = await this.syncProvider(productId);\n        const map = await sync.getMapById(uniqueNameOrSid);\n        const item = await map.get(mapItemKey);\n\n        return item as SyncMapItem<T>;\n    }\n}\n","import { injectable, inject } from \"inversify\";\nimport { Twilsock, twilsockRTTI, TwilsockResult } from \"~/modules/websocket\";\nimport { TwilsockAdapter } from \"./TwilsockAdapter\";\n\n@injectable()\nexport class TwilsockAdapterImpl implements TwilsockAdapter {\n    private readonly twilsock: Twilsock;\n\n    constructor(@inject(twilsockRTTI) twilsockInjected: Twilsock) {\n        this.twilsock = twilsockInjected;\n    }\n\n    public async post<U>(url: string, body: object): Promise<TwilsockResult<U>> {\n        const result = await this.twilsock.post<U>(url, {}, body);\n        return result;\n    }\n}\n","import { injectable, inject } from \"inversify\";\nimport { throwFlexSdkErrorFromResponse } from \"~/errors\";\nimport { sessionRTTI, Session } from \"~/modules/session\";\nimport { HttpAdapter } from \"./HttpAdapter\";\nimport { EnvironmentConfig, environmentConfigRTTI } from \"~/modules/config\";\nimport { mapRootKeysToCamelCase, mapRootKeysToSnakeCase } from \"~/utils/mapKeys\";\n\n@injectable()\nexport class HttpAdapterImpl implements HttpAdapter {\n    private readonly session: Session;\n\n    private readonly envConfig: EnvironmentConfig;\n\n    constructor(@inject(sessionRTTI) session: Session, @inject(environmentConfigRTTI) envConfig: EnvironmentConfig) {\n        this.session = session;\n        this.envConfig = envConfig;\n    }\n\n    public get<T>(url: string, authMethod?: string) {\n        return this.performNetworkCall<T>(url, \"GET\", authMethod);\n    }\n\n    public post<T>(url: string, authMethod?: string, body?: {}) {\n        return this.performNetworkCall<T>(url, \"POST\", authMethod, body);\n    }\n\n    public put<T>(url: string, authMethod?: string, body?: {}) {\n        return this.performNetworkCall<T>(url, \"PUT\", authMethod, body);\n    }\n\n    public delete<T>(url: string, authMethod?: string) {\n        return this.performNetworkCall<T>(url, \"DELETE\", authMethod);\n    }\n\n    private getRequestData(method: string, authMethod?: string, body?: object) {\n        let headers: Headers | undefined;\n        if (authMethod === \"jwe\") {\n            headers = new Headers({\n                Authorization: `Basic ${btoa(`token:${this.session.token}`)})`,\n                \"Content-Type\": \"application/json\"\n            });\n        }\n        return { headers, method, body: JSON.stringify(body) };\n    }\n\n    private getEnvironmentSpecificUrl(url: string) {\n        let urlEnvSpecifier = \"\";\n        const region = this.envConfig.region || \"\";\n        if (region.startsWith(\"dev-\")) {\n            urlEnvSpecifier = \".dev\";\n        } else if (region.startsWith(\"stage-\")) {\n            urlEnvSpecifier = \".stage\";\n        }\n        return url.replace(\"[environment]\", urlEnvSpecifier);\n    }\n\n    private mapBody(body: object | undefined) {\n        if (body) {\n            return mapRootKeysToSnakeCase(body);\n        }\n        return body;\n    }\n\n    private async performNetworkCall<T>(url: string, method: string, authMethod?: string, body?: object): Promise<T> {\n        const environmentSpecificUrl = this.getEnvironmentSpecificUrl(url);\n        const response: Response = await fetch(\n            environmentSpecificUrl,\n            this.getRequestData(method, authMethod, this.mapBody(body))\n        );\n        if (!response.ok) {\n            await throwFlexSdkErrorFromResponse(response);\n        }\n        const result = await response.json();\n\n        return mapRootKeysToCamelCase(result) as Promise<T>;\n    }\n}\n","import { hasKey } from \"./typeGuards\";\n\nexport function convertDateStringValuesToDate<T extends object>(response: object): T {\n    const dateRegex = /^\\d{4}-\\d{1,2}-\\d{1,2}/;\n    const dateKeyRegex = new RegExp(\"date\", \"i\");\n    const processedResponse: Record<string, unknown | Date> = {};\n    Object.entries(response).forEach(([key, value]) => {\n        if (hasKey(response, key) && dateKeyRegex.test(key) && dateRegex.test(value)) {\n            processedResponse[key] = new Date(value);\n        } else {\n            processedResponse[key] = value;\n        }\n    });\n    return processedResponse as T;\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\nimport { inject, injectable } from \"inversify\";\nimport { FlexSdkError, ErrorCode } from \"~/errors\";\nimport { httpAdapterRTTI } from \"~/backend/backend.rtti\";\nimport { HttpAdapter } from \"~/backend/HttpAdapter/HttpAdapter\";\nimport { convertDateStringValuesToDate } from \"~/utils/processHttpAdapterResponse\";\n\nimport { AccountConfigData } from \"../model/accountConfigData\";\nimport { PublicConfigResponse } from \"../model/publicConfigResponse\";\n\nimport { ConfigurationService } from \"./configuration.serviceInterface\";\n\n@injectable()\nexport class ConfigurationServiceImpl implements ConfigurationService {\n    private httpAdapter: HttpAdapter;\n\n    constructor(@inject(httpAdapterRTTI) httpAdapter: HttpAdapter) {\n        this.httpAdapter = httpAdapter;\n    }\n\n    \n\n\n\n\n    public async fetchConfiguration(): Promise<AccountConfigData> {\n        const response = await this.httpAdapter.get<AccountConfigData>(\n            `https://flex-api[environment].twilio.com/v1/Configuration`,\n            \"jwe\"\n        );\n        const processedResponse = convertDateStringValuesToDate<AccountConfigData>(response);\n        return processedResponse;\n    }\n\n    \n\n\n\n\n\n\n    public async fetchPublicConfiguration(\n        queryParamName: \"AccountSid\" | \"RuntimeDomain\",\n        queryParamValue: string\n    ): Promise<PublicConfigResponse> {\n        if (queryParamName === null || queryParamName === undefined) {\n            throw new FlexSdkError(ErrorCode.InvalidParams, \"Required parameter queryParamName was null or undefined.\");\n        }\n        if (queryParamValue === null || queryParamValue === undefined) {\n            throw new FlexSdkError(\n                ErrorCode.InvalidParams,\n                \"Required parameter queryParamValue was null or undefined.\"\n            );\n        }\n        const response = await this.httpAdapter.get<PublicConfigResponse>(\n            `https://flex-api[environment].twilio.com/v1/Configuration/Public?${encodeURIComponent(\n                String(queryParamName)\n            )}=${encodeURIComponent(String(queryParamValue))}`,\n            undefined\n        );\n        const processedResponse = convertDateStringValuesToDate<PublicConfigResponse>(response);\n        return processedResponse;\n    }\n\n    \n\n\n\n\n\n    public async updateConfiguration(accountConfigData: Partial<AccountConfigData>): Promise<AccountConfigData> {\n        if (accountConfigData === null || accountConfigData === undefined) {\n            throw new FlexSdkError(\n                ErrorCode.InvalidParams,\n                \"Required parameter accountConfigData was null or undefined.\"\n            );\n        }\n        const response = await this.httpAdapter.post<AccountConfigData>(\n            `https://flex-api[environment].twilio.com/v1/Configuration`,\n            \"jwe\",\n            accountConfigData\n        );\n        const processedResponse = convertDateStringValuesToDate<AccountConfigData>(response);\n        return processedResponse;\n    }\n}\n","import { interfaces } from \"inversify\";\n\nimport { ConfigurationServiceImpl } from \"./api/configuration.service\";\nimport { ConfigurationService } from \"./api/configuration.serviceInterface\";\n\nexport class ApiServiceBinder {\n    public static with(container: interfaces.Container) {\n        container.bind<ConfigurationService>(\"ConfigurationService\").to(ConfigurationServiceImpl).inSingletonScope();\n    }\n}\n","import mergeWith from \"lodash.mergewith\";\nimport { FlexSdkError, ErrorCode } from \"~/errors\";\nimport { assertObject } from \"./assert\";\nimport { DeepPartial } from \"./DeepPartial\";\n\nexport function mergeUserSettings<T>(settings: T, userSettings?: DeepPartial<T>): void {\n    if (typeof userSettings !== \"undefined\") {\n        assertObject(userSettings, \"userSettings\");\n    }\n\n    \n    const customMerger = (\n        value: undefined | Object,\n        _srcValue: never,\n        key: string,\n        \n        _object: object,\n        \n        _source: never\n    ) => {\n        const objectHasKey = Object.prototype.hasOwnProperty.call(_object, key);\n        \n        const objectHasGetterForKey = Object.prototype.hasOwnProperty.call(Object.getPrototypeOf(_object), key);\n        if (!objectHasKey && !objectHasGetterForKey) {\n            \n            throw new FlexSdkError(ErrorCode.InvalidParams, `${key} is not a valid property`);\n        }\n\n        return undefined; \n    };\n\n    mergeWith(settings, userSettings, customMerger);\n}\n","import { interfaces } from \"inversify\";\nimport { SyncClient } from \"twilio-sync\";\nimport { Client, ClientSettings, ClientUserSettings, clientRTTI, clientSettingsRTTI } from \"~/modules/client\";\nimport { Session, sessionRTTI } from \"~/modules/session\";\nimport { mergeUserSettings } from \"~/utils/mergeUserSettings\";\nimport { assertNotEmptyString } from \"~/utils/assert\";\nimport {\n    TelemetrySdkEvent,\n    TelemetrySdkEventGroup,\n    TelemetrySdkEventName,\n    TelemetrySdkEventSource,\n    TelemetrySdkClient,\n    telemetrySdkClientRTTI,\n    SDKDependency\n} from \"~/modules/telemetrySdkClient\";\n\nimport { Logger, LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { FlexSdkError, ErrorCode, throwFlexSdkError } from \"~/errors\";\n\nconst sendClientInitEvent = async (logger: Logger, telemetrySdkClient: TelemetrySdkClient, durationInMs: number) => {\n    try {\n        const group = telemetrySdkClient.createEventGroup<TelemetrySdkEvent>(TelemetrySdkEventGroup.Default);\n        await group.addEvents({\n            eventName: TelemetrySdkEventName.ClientInitialized,\n            eventSource: TelemetrySdkEventSource.Client,\n            durationMs: durationInMs\n        });\n    } catch (e) {\n        logger.error(\"Failed to send client init event\", e);\n    }\n};\n\nexport async function createClient(\n    container: interfaces.Container,\n    token: string,\n    userSettings?: ClientUserSettings\n): Promise<Client> {\n    const t0Ms = Date.now();\n\n    assertNotEmptyString(token, \"token\");\n    const clientSettings = container.get<ClientSettings>(clientSettingsRTTI);\n    const getLogger = container.get<LoggerFactory>(loggerFactoryRTTI);\n    const logger = getLogger(LoggerName.Client);\n\n    mergeUserSettings(clientSettings, userSettings);\n\n    const client = container.get<Client>(clientRTTI);\n    const session = container.get<Session>(sessionRTTI);\n\n    try {\n        await session.init(token);\n    } catch (err) {\n        \n        \n        if (err.code === 2002 || err.code === 20003) {\n            \n            throw new FlexSdkError(ErrorCode.Forbidden, \"Insufficient permissions\");\n        } else {\n            throwFlexSdkError(err);\n        }\n    }\n\n    try {\n        const telemetrySdkClient = container.get<TelemetrySdkClient>(telemetrySdkClientRTTI);\n\n        await telemetrySdkClient.setSessionData({\n            dependencies: {\n                [SDKDependency.TwilioSync]: SyncClient.version,\n                [SDKDependency.Twilsock]: \"default\"\n            }\n        });\n\n        const durationMs = Date.now() - t0Ms;\n        \n        await sendClientInitEvent(logger, telemetrySdkClient, durationMs);\n    } catch (e) {\n        logger.error(\"Failed to set session data for telemetry\", e);\n    }\n\n    return client;\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\nimport { inject, injectable } from \"inversify\";\nimport { twilsockAdapterRTTI } from \"~/backend/backend.rtti\";\nimport { TwilsockAdapter } from \"~/backend/TwilsockAdapter/TwilsockAdapter\";\nimport { TwilsockResult } from \"~/modules/websocket\";\n\nimport { Events } from \"../model/events\";\n\nimport { TelemetryService } from \"./telemetry.serviceInterface\";\n\n@injectable()\nexport class TelemetryServiceImpl implements TelemetryService {\n    private basePath: string = \"http://flex-sdk.twilio.com/v1\";\n    private twilsockAdapter: TwilsockAdapter;\n\n    constructor(@inject(twilsockAdapterRTTI) twilsockAdapter: TwilsockAdapter) {\n        this.twilsockAdapter = twilsockAdapter;\n    }\n\n    \n\n\n\n\n    public async postTelemetryEvents(events: Events): Promise<TwilsockResult<void>> {\n        if (events === null || events === undefined) {\n            throw new Error(\"Required parameter events was null or undefined when calling postTelemetryEvents.\");\n        }\n\n        const response = await this.twilsockAdapter.post<void>(`${this.basePath}/Telemetry/Events`, events);\n        return response;\n    }\n}\n","import { interfaces } from \"inversify\";\n\nimport { TelemetryServiceImpl } from \"./api/telemetry.service\";\nimport { TelemetryService } from \"./api/telemetry.serviceInterface\";\n\nexport class ApiServiceBinder {\n    public static with(container: interfaces.Container) {\n        container.bind<TelemetryService>(\"TelemetryService\").to(TelemetryServiceImpl).inSingletonScope();\n    }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\nimport { inject, injectable } from \"inversify\";\n\nimport { FlexSdkError, ErrorCode } from \"~/errors\";\nimport { SyncAdapter } from \"~/backend/SyncAdapter/SyncAdapter\";\nimport { syncAdapterRTTI } from \"~/backend/backend.rtti\";\nimport { SyncDocument, SyncList, SyncMap, SyncMapItem } from \"~/modules/sync\";\n\nimport { CurrentTasksStatsBucket } from \"../model/currentTasksStatsBucket\";\nimport { HistoricalTasksStatsBucket } from \"../model/historicalTasksStatsBucket\";\nimport { Metadata } from \"../model/metadata\";\nimport { TimeSpan } from \"../model/timeSpan\";\nimport { WorkerStats } from \"../model/workerStats\";\n\nimport { QueueStatsService } from \"./queueStats.serviceInterface\";\n\n@injectable()\nexport class QueueStatsServiceImpl implements QueueStatsService {\n    private readonly syncAdapter: SyncAdapter;\n\n    constructor(@inject(syncAdapterRTTI) syncAdapter: SyncAdapter) {\n        this.syncAdapter = syncAdapter;\n    }\n\n    \n\n\n\n\n    public async getCurrentTasksStats(queueSid: string): Promise<SyncMapItem<CurrentTasksStatsBucket>> {\n        if (queueSid === null || queueSid === undefined) {\n            throw new FlexSdkError(ErrorCode.InvalidParams, \"Required parameter queueSid was null or undefined.\");\n        }\n\n        const syncObject = (await this.syncAdapter.getSyncObjectByPath(\n            `/flex_insights/Maps/${encodeURIComponent(String(queueSid))}.realtime_statistics.v1/Items/tasks_now`\n        )) as SyncMapItem<CurrentTasksStatsBucket>;\n        return syncObject;\n    }\n\n    \n\n\n\n\n\n    public async getHistoricalStats(\n        queueSid: string,\n        timeSpanBucketKey: TimeSpan\n    ): Promise<SyncMapItem<HistoricalTasksStatsBucket>> {\n        if (queueSid === null || queueSid === undefined) {\n            throw new FlexSdkError(ErrorCode.InvalidParams, \"Required parameter queueSid was null or undefined.\");\n        }\n\n        if (timeSpanBucketKey === null || timeSpanBucketKey === undefined) {\n            throw new FlexSdkError(\n                ErrorCode.InvalidParams,\n                \"Required parameter timeSpanBucketKey was null or undefined.\"\n            );\n        }\n\n        const syncObject = (await this.syncAdapter.getSyncObjectByPath(\n            `/flex_insights/Maps/${encodeURIComponent(\n                String(queueSid)\n            )}.realtime_statistics.v1/Items/${encodeURIComponent(String(timeSpanBucketKey))}`\n        )) as SyncMapItem<HistoricalTasksStatsBucket>;\n        return syncObject;\n    }\n\n    \n\n\n\n\n    public async getMetadata(queueSid: string): Promise<SyncMapItem<Metadata>> {\n        if (queueSid === null || queueSid === undefined) {\n            throw new FlexSdkError(ErrorCode.InvalidParams, \"Required parameter queueSid was null or undefined.\");\n        }\n\n        const syncObject = (await this.syncAdapter.getSyncObjectByPath(\n            `/flex_insights/Maps/${encodeURIComponent(String(queueSid))}.realtime_statistics.v1/Items/metadata`\n        )) as SyncMapItem<Metadata>;\n        return syncObject;\n    }\n\n    \n\n\n\n\n    public async getWorkerStats(queueSid: string): Promise<SyncMapItem<WorkerStats>> {\n        if (queueSid === null || queueSid === undefined) {\n            throw new FlexSdkError(ErrorCode.InvalidParams, \"Required parameter queueSid was null or undefined.\");\n        }\n\n        const syncObject = (await this.syncAdapter.getSyncObjectByPath(\n            `/flex_insights/Maps/${encodeURIComponent(\n                String(queueSid)\n            )}.realtime_statistics.v1/Items/worker_activities_statistics`\n        )) as SyncMapItem<WorkerStats>;\n        return syncObject;\n    }\n}\n","import { interfaces } from \"inversify\";\n\nimport { QueueStatsServiceImpl } from \"./api/queueStats.service\";\nimport { QueueStatsService } from \"./api/queueStats.serviceInterface\";\n\nexport class ApiServiceBinder {\n    public static with(container: interfaces.Container) {\n        container.bind<QueueStatsService>(\"QueueStatsService\").to(QueueStatsServiceImpl).inSingletonScope();\n    }\n}\n","module.exports = require(\"lodash.camelcase\");","module.exports = require(\"lodash.snakecase\");","module.exports = require(\"core-js/modules/es.object.values\");","module.exports = require(\"core-js/modules/es.string.trim\");","module.exports = require(\"twilsock\");","module.exports = require(\"lodash.mergewith\");","module.exports = require(\"lodash.mapkeys\");","module.exports = require(\"lodash.transform\");","import { IdpConfig } from \"~/modules/auth\";\n\ninterface SSOLoginRequestBody {\n    products: Array<string>;\n    resource: string;\n}\n\n\n\n\n\n\nfunction sanitizeSSOParams(s: string): string {\n    return s.replace(/((Token|Expiration|Identity|Roles)=[^&]+[&]?)/g, \"\").replace(/[&?]$/, \"\");\n}\n\nexport function getSSOLoginRequestBody(config: IdpConfig): string {\n    const payload: SSOLoginRequestBody = {\n        products: [\"flex\"],\n        resource: sanitizeSSOParams(config.redirectUrl)\n    };\n\n    return JSON.stringify(payload);\n}\n","import { injectable, inject } from \"inversify\";\nimport { IdpConfig, TokenData, Authenticator } from \"~/modules/auth\";\nimport { throwFlexSdkErrorFromResponse, InternalError } from \"~/errors\";\nimport { assertNotEmptyString } from \"~/utils/assert\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, LoggerName } from \"~/modules/logger\";\nimport { EnvironmentConfig, environmentConfigRTTI } from \"~/modules/config\";\nimport { authenticatorDataContainerRTTI } from \"~/modules/auth/auth.rtti\";\nimport { AuthenticatorDataContainer } from \"~/modules/auth/AuthenticatorDataContainer/AuthenticatorDataContainer\";\nimport * as FederatedAuthHelper from \"./FederatedAuthHelper\";\n\n@injectable()\nexport class FederatedAuth implements Authenticator {\n    private readonly enviromentConfig: EnvironmentConfig;\n\n    private readonly authenticatorDataContainer: AuthenticatorDataContainer;\n\n    private readonly logger: Logger;\n\n    constructor(\n        @inject(environmentConfigRTTI) envConfig: EnvironmentConfig,\n        @inject(authenticatorDataContainerRTTI) authenticatorDataContainer: AuthenticatorDataContainer,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory\n    ) {\n        this.enviromentConfig = envConfig;\n        this.authenticatorDataContainer = authenticatorDataContainer;\n        this.logger = getLogger(LoggerName.Auth);\n    }\n\n    public async getIdpUrl(config: IdpConfig): Promise<string> {\n        assertNotEmptyString(config.redirectUrl, \"redirect url\");\n\n        const headers = new Headers({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const payload = FederatedAuthHelper.getSSOLoginRequestBody(config);\n        const authServiceUrl = this.enviromentConfig.authServiceUrl;\n        const accountSid = this.authenticatorDataContainer.accountSid;\n        const url = `${authServiceUrl}/${accountSid}/authenticate`;\n\n        const response = await fetch(url, {\n            headers,\n            method: \"POST\",\n            body: payload\n        });\n\n        if (!response.ok) {\n            await throwFlexSdkErrorFromResponse(response);\n        }\n\n        const data = await response.json();\n        if (!data.location) {\n            this.logger.error(\"No redirect location from /authenticate request, data: \", data);\n            throw new InternalError(\"Invalid response from /authenticate endpoint\");\n        }\n        return data.location;\n    }\n\n    async validateToken(token: string): Promise<TokenData> {\n        assertNotEmptyString(token, \"token\");\n\n        const headers = new Headers({\n            Authorization: `Basic ${btoa(`token:${token}`)})`,\n            \"Content-Type\": \"application/json\"\n        });\n\n        const authServiceUrl = this.enviromentConfig.authServiceUrl;\n        const accountSid = this.authenticatorDataContainer.accountSid;\n        const url = `${authServiceUrl}/${accountSid}/Tokens/validate`;\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({ token })\n        });\n\n        if (!response.ok) {\n            await throwFlexSdkErrorFromResponse(response);\n        }\n\n        return response.json();\n    }\n\n    async refreshToken(token: string): Promise<string> {\n        assertNotEmptyString(token, \"token\");\n\n        const authServiceUrl = this.enviromentConfig.authServiceUrl;\n        const accountSid = this.authenticatorDataContainer.accountSid;\n        const url = `${authServiceUrl}/${accountSid}/Tokens/refresh`;\n\n        const headers = new Headers({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const response = await fetch(url, {\n            headers,\n            method: \"POST\",\n            body: JSON.stringify({ token })\n        });\n\n        if (!response.ok) {\n            await throwFlexSdkErrorFromResponse(response, \"Could not refresh token\");\n        }\n\n        const payload = await response.json();\n        return Promise.resolve(payload.token);\n    }\n}\n","import { injectable } from \"inversify\";\nimport { AuthenticatorDataContainer } from \"./AuthenticatorDataContainer\";\n\n@injectable()\nexport class AuthenticatorDataContainerImpl implements AuthenticatorDataContainer {\n    private _accountSid: string;\n\n    get accountSid(): string {\n        return this._accountSid;\n    }\n\n    set accountSid(accountSid: string) {\n        this._accountSid = accountSid;\n    }\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    authenticatorRTTI,\n    authenticatorFactoryRTTI,\n    twilioIdpUrlRTTI,\n    authenticatorDataContainerRTTI\n} from \"./auth.rtti\";\nimport { Authenticator } from \"./Authenticator/Authenticator\";\nimport { FederatedAuth } from \"./Authenticator/FederatedAuth/FederatedAuth\";\nimport { AuthenticatorFactory } from \"./AuthenticatorFactory/AuthenticatorFactory\";\nimport { createAuthenticator } from \"./AuthenticatorFactory/createAuthenticator/createAuthenticator\";\nimport { TwilioIdpUrlFunction } from \"./TwilioIdpUrlFunction/TwilioIdpUrl\";\nimport { getTwilioIdpUrl } from \"./TwilioIdpUrlFunction/getTwilioIdpUrl\";\nimport { AuthenticatorDataContainer } from \"./AuthenticatorDataContainer/AuthenticatorDataContainer\";\nimport { AuthenticatorDataContainerImpl } from \"./AuthenticatorDataContainer/AuthenticatorDataContainerImpl\";\n\nexport const authModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Authenticator>(authenticatorRTTI).to(FederatedAuth);\n    bind<AuthenticatorDataContainer>(authenticatorDataContainerRTTI)\n        .to(AuthenticatorDataContainerImpl)\n        .inSingletonScope();\n    bind<AuthenticatorFactory>(authenticatorFactoryRTTI).toFactory((context: interfaces.Context) => {\n        return (accountSid: string) => {\n            return createAuthenticator(context.container, accountSid);\n        };\n    });\n    bind<TwilioIdpUrlFunction>(twilioIdpUrlRTTI).toDynamicValue((context: interfaces.Context) => {\n        return (port?: string) => {\n            return getTwilioIdpUrl(context.container, port);\n        };\n    });\n});\n","import { interfaces } from \"inversify\";\nimport { Authenticator, authenticatorRTTI } from \"~/modules/auth\";\nimport { authenticatorDataContainerRTTI } from \"~/modules/auth/auth.rtti\";\nimport { AuthenticatorDataContainer } from \"~/modules/auth/AuthenticatorDataContainer/AuthenticatorDataContainer\";\n\nexport function createAuthenticator(container: interfaces.Container, accountSid: string): Authenticator {\n    const authenticatorDataContainer = container.get<AuthenticatorDataContainer>(authenticatorDataContainerRTTI);\n    authenticatorDataContainer.accountSid = accountSid;\n\n    const auth = container.get<Authenticator>(authenticatorRTTI);\n    return auth;\n}\n","import { interfaces } from \"inversify\";\nimport { environmentConfigRTTI, EnvironmentConfig } from \"~/modules/config\";\n\nexport function getTwilioIdpUrl(container: interfaces.Container, port?: string): string {\n    const envConfig = container.get<EnvironmentConfig>(environmentConfigRTTI);\n\n    const twilioServiceLoginUrl = envConfig.twilioServiceLoginUrl;\n    return port ? `${twilioServiceLoginUrl}?localPort=${port}` : twilioServiceLoginUrl;\n}\n","import { injectable, inject } from \"inversify\";\nimport { Role, AuthenticatorFactory, authenticatorFactoryRTTI } from \"~/modules/auth\";\nimport { AccountConfigProvider, accountConfigProviderRTTI, AccountConfig } from \"~/modules/config\";\nimport { sessionSettingsRTTI, Session, SessionSettings } from \"~/modules/session\";\nimport { Twilsock, twilsockRTTI, TwilsockEvent } from \"~/modules/websocket\";\nimport { InternalError } from \"~/errors\";\nimport { Logger, LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\n\n@injectable()\nexport class SessionImpl implements Session {\n    private accountConfig: AccountConfig;\n\n    private readonly authFactory: AuthenticatorFactory;\n\n    private _token: string;\n\n    private readonly connection: Twilsock;\n\n    private readonly settings: SessionSettings;\n\n    private readonly accountConfigProvider: AccountConfigProvider;\n\n    private _roles: Array<Role> = [];\n\n    private isActive: boolean = true;\n\n    private readonly logger: Logger;\n\n    private needsToAutoUpdateToken: boolean;\n\n    constructor(\n        @inject(twilsockRTTI) connection: Twilsock,\n        @inject(sessionSettingsRTTI) settings: SessionSettings,\n        @inject(authenticatorFactoryRTTI) authFactory: AuthenticatorFactory,\n        @inject(accountConfigProviderRTTI) accountConfigProvider: AccountConfigProvider,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory\n    ) {\n        this.connection = connection;\n        this.settings = settings;\n        this.accountConfigProvider = accountConfigProvider;\n        this.authFactory = authFactory;\n        this.logger = getLogger(LoggerName.Session);\n        this.logger.debug(\"Session constructed\");\n    }\n\n    async init(token: string): Promise<void> {\n        this.logger.debug(\"will initialize session with token: \", token);\n        this.logger.debug(\"will update token: \", this.settings.autoUpdateToken);\n\n        this._token = token;\n        await this.connection.connect(token);\n        if (this.settings.autoUpdateToken) {\n            this.connection.on(TwilsockEvent.TokenAboutToExpire, this.handleTokenAboutToExpire);\n        }\n\n        \n        this.accountConfig = await this.accountConfigProvider();\n\n        \n        const accountSid = this.accountConfig.get(\"accountSid\");\n\n        if (this.needsToAutoUpdateToken) {\n            await this.autoUpdateToken();\n        }\n\n        const auth = this.authFactory(accountSid);\n        const tokenData = await auth.validateToken(this._token);\n        this._roles = tokenData.roles;\n\n        return Promise.resolve();\n    }\n\n    async updateToken(token: string): Promise<void> {\n        await this.connection.updateToken(token);\n        this._token = token;\n        this.logger.debug(\"new token set\");\n    }\n\n    private readonly handleTokenAboutToExpire = async () => {\n        if (this.accountConfig) {\n            await this.autoUpdateToken();\n        } else {\n            this.needsToAutoUpdateToken = true;\n        }\n    };\n\n    private async autoUpdateToken() {\n        const accountSid = this.accountConfig.get(\"accountSid\");\n        if (!accountSid) {\n            throw new InternalError(\"Account sid not set\");\n        }\n\n        this.logger.debug(\"updating token\");\n        const auth = this.authFactory(accountSid);\n        try {\n            const newToken = await auth.refreshToken(this.token);\n            if (!this.isActive) {\n                this.logger.trace(\"autoUpdateToken, session destroyed after refreshToken\");\n                return;\n            }\n\n            await this.updateToken(newToken);\n            this.logger.info(\"token auto-updated\");\n        } catch (e) {\n            this.logger.error(\"Failed to update token\", e);\n        }\n    }\n\n    async destroy() {\n        this.isActive = false;\n        this.connection.removeListener(TwilsockEvent.TokenAboutToExpire, this.handleTokenAboutToExpire);\n        await this.connection.destroy();\n    }\n\n    get token(): string {\n        return this._token;\n    }\n\n    get roles(): Array<Role> {\n        return this._roles;\n    }\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { sessionRTTI, sessionSettingsRTTI } from \"./session.rtti\";\nimport { Session, SessionSettings } from \"./Session/Session\";\nimport { SessionImpl } from \"./Session/SessionImpl\";\nimport { getDefaultSessionSettings } from \"./SessionSettings/defaultSessionSettings\";\n\nexport const sessionModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Session>(sessionRTTI).to(SessionImpl).inSingletonScope();\n    bind<SessionSettings>(sessionSettingsRTTI).toConstantValue(getDefaultSessionSettings());\n});\n","import { injectable, inject, postConstruct } from \"inversify\";\nimport { Client, ClientConfigType, ClientEvent } from \"~/modules/client\";\nimport { Role } from \"~/modules/auth\";\nimport { accountConfigRTTI, AccountConfig } from \"~/modules/config\";\nimport { EventPublisher } from \"~/modules/events\";\nimport { Twilsock, twilsockRTTI, TwilsockEvent } from \"~/modules/websocket\";\nimport { Session, sessionRTTI } from \"~/modules/session\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, LoggerName } from \"~/modules/logger\";\nimport { TelemetryClient, TelemetryClientFactory, telemetryClientFactoryRTTI } from \"~/modules/telemetry\";\nimport {\n    telemetrySdkClientRTTI,\n    TelemetrySdkEvent,\n    TelemetrySdkEventGroup,\n    TelemetrySdkClient,\n    TelemetrySdkEventName,\n    TelemetrySdkEventSource\n} from \"~/modules/telemetrySdkClient\";\nimport { RealtimeStats, realtimeStatsRTTI } from \"~/modules/stats\";\n\n@injectable()\nexport class ClientImpl extends EventPublisher<ClientEvent> implements Client {\n    readonly #session: Session;\n\n    readonly #connection: Twilsock;\n\n    readonly #logger: Logger;\n\n    readonly #telemetryClientFactory: TelemetryClientFactory<any>; \n\n    public readonly config: ClientConfigType;\n\n    readonly #telemetrySdkClient: TelemetrySdkClient;\n\n    readonly realtimeStats: RealtimeStats;\n\n    constructor(\n        @inject(sessionRTTI) session: Session,\n        @inject(twilsockRTTI) connection: Twilsock,\n        @inject(accountConfigRTTI) accountConfig: AccountConfig,\n        @inject(telemetryClientFactoryRTTI) telemetryClientFactory: TelemetryClientFactory<any>, \n        @inject(realtimeStatsRTTI) realtimeStats: RealtimeStats,\n        @inject(telemetrySdkClientRTTI) telemetrySdkClient: TelemetrySdkClient,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory\n    ) {\n        super();\n        this.#session = session;\n        this.#connection = connection;\n        this.config = {\n            account: accountConfig\n        };\n        this.#telemetryClientFactory = telemetryClientFactory;\n        this.realtimeStats = realtimeStats;\n        this.#telemetrySdkClient = telemetrySdkClient;\n        this.#logger = getLogger(LoggerName.Client);\n    }\n\n    @postConstruct()\n    setupProxies() {\n        this.proxyEvent(this.#connection, TwilsockEvent.TokenAboutToExpire, ClientEvent.TokenAboutToExpire);\n        this.proxyEvent(this.#connection, TwilsockEvent.TokenExpired, ClientEvent.TokenExpired);\n        this.proxyEvent(this.#connection, TwilsockEvent.ConnectionError, ClientEvent.ConnectionLost);\n        this.proxyEvent(this.#connection, TwilsockEvent.Connected, ClientEvent.ConnectionRestored);\n        this.proxyEvent(this.#connection, TwilsockEvent.Disconnected, ClientEvent.Disconnected);\n    }\n\n    async updateToken(token: string) {\n        await this.#session.updateToken(token);\n    }\n\n    #sendDestroyEvent = async () => {\n        try {\n            const telemetrySdkClient = this.#telemetrySdkClient;\n            const group = telemetrySdkClient.createEventGroup<TelemetrySdkEvent>(TelemetrySdkEventGroup.Default);\n            await group.addEvents({\n                eventName: TelemetrySdkEventName.ClientDestroyed,\n                eventSource: TelemetrySdkEventSource.Client\n            });\n        } catch (e) {\n            this.#logger.error(\"Failed to send telemetry destroy event\", e);\n        }\n    };\n\n    async destroy() {\n        await this.#sendDestroyEvent();\n        this.#logger.debug(\"client log out\");\n        await this.#session.destroy();\n        this.removeAllListeners();\n    }\n\n    get roles(): Array<Role> {\n        return this.#session.roles;\n    }\n\n    get token(): string {\n        return this.#session.token;\n    }\n\n    createTelemetryClient<U extends object>(name: string): TelemetryClient<U> {\n        return this.#telemetryClientFactory(name);\n    }\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    Client,\n    ClientSettings,\n    ClientUserSettings,\n    ClientProvider,\n    clientRTTI,\n    clientProviderRTTI,\n    clientSettingsRTTI\n} from \"~/modules/client\";\nimport { ClientImpl } from \"./Client/ClientImpl/ClientImpl\";\nimport { createClient } from \"./ClientProvider/createClient\";\nimport { ClientSettingsStore } from \"./ClientSettings/ClientSettingsStore\";\n\nexport const clientModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<ClientSettings>(clientSettingsRTTI).to(ClientSettingsStore).inSingletonScope();\n\n    bind<Client>(clientRTTI).to(ClientImpl).inSingletonScope();\n    bind<ClientProvider>(clientProviderRTTI).toProvider<Client>((context: interfaces.Context) => {\n        return (token: string, userSettings?: ClientUserSettings) => {\n            return createClient(context.container, token, userSettings);\n        };\n    });\n});\n","import { EventEmitter } from \"events\";\nimport { ContainerModule, interfaces } from \"inversify\";\nimport { eventEmitterRTTI } from \"./events.rtti\";\nimport { Emitter } from \"./EventPublisher/Emitter\";\n\nexport const eventsModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Emitter>(eventEmitterRTTI).toDynamicValue(() => new EventEmitter());\n});\n","import { interfaces } from \"inversify\";\nimport { AccountConfig, AccountConfigData, accountConfigRTTI, configDataContainerRTTI } from \"~/modules/config\";\nimport { ConfigDataContainer } from \"~/modules/config/AccountConfig/ConfigDataContainer\";\nimport { ConfigurationService } from \"~/backend/generated/Configuration/api/configuration.serviceInterface\";\nimport { configurationServiceRTTI } from \"~/backend/backend.rtti\";\n\n\n\n\nexport const accountConfigProvider = async (container: interfaces.Container): Promise<AccountConfig> => {\n    const dataContainer = container.get<ConfigDataContainer<AccountConfigData>>(configDataContainerRTTI);\n    const configurationService = container.get<ConfigurationService>(configurationServiceRTTI);\n    const newConfigData = await configurationService.fetchConfiguration();\n    dataContainer.set(newConfigData);\n\n    const accountConfig = container.get<AccountConfig>(accountConfigRTTI);\n    return accountConfig;\n};\n","import { EnvironmentConfig } from \"~/modules/config\";\n\nexport const getEnvironmentConfig = (): EnvironmentConfig => ({\n    authServiceUrl: \"https://iam.twilio.com/v1/Accounts\",\n    twilioServiceLoginUrl: \"https://flex.twilio.com/admin\",\n    ...window.__TWILIO_FLEX_SDK__?.environmentConfig\n});\n","import { injectable, inject } from \"inversify\";\nimport { AccountConfigKeys, AccountConfigData, AccountConfig } from \"~/modules/config\";\nimport { configDataContainerRTTI, accountConfigUpdaterRTTI } from \"~/modules/config/config.rtti\";\nimport { assertKeyInObject } from \"~/utils/assert\";\nimport { AccountConfigUpdater } from \"~/modules/config/AccountConfig/AccountConfigUpdater\";\nimport { ConfigDataContainer } from \"~/modules/config/AccountConfig/ConfigDataContainer\";\n\n@injectable()\nexport class AccountConfigStore implements AccountConfig {\n    private readonly dataContainer: ConfigDataContainer<AccountConfigData>;\n\n    private readonly accountConfigUpdater: AccountConfigUpdater;\n\n    private currentUpdateConfigPromise: Promise<AccountConfigData> | undefined;\n\n    constructor(\n        @inject(configDataContainerRTTI) dataContainer: ConfigDataContainer<AccountConfigData>,\n        @inject(accountConfigUpdaterRTTI) updater: AccountConfigUpdater\n    ) {\n        this.dataContainer = dataContainer;\n        this.accountConfigUpdater = updater;\n    }\n\n    get<K extends AccountConfigKeys>(key: K): AccountConfigData[K] {\n        return this.dataContainer.get()[key];\n    }\n\n    async set(config: Partial<AccountConfigData>): Promise<void> {\n        const data = this.dataContainer.get();\n\n        \n        const { accountSid, ...dataWithoutAccountSid } = data; \n        Object.keys(config).map((key: string) => assertKeyInObject(key, dataWithoutAccountSid));\n\n        \n        const updateConfigCall = () => this.accountConfigUpdater(accountSid, config);\n        const updatedConfigData = await this.updateInCallOrder(updateConfigCall);\n        this.dataContainer.set(updatedConfigData);\n\n        return Promise.resolve();\n    }\n\n    updateInCallOrder(updateConfigCall: () => Promise<AccountConfigData>) {\n        if (this.currentUpdateConfigPromise) {\n            \n            \n            this.currentUpdateConfigPromise = this.currentUpdateConfigPromise.then(() => {\n                return updateConfigCall();\n            });\n        } else {\n            this.currentUpdateConfigPromise = updateConfigCall();\n        }\n\n        return this.currentUpdateConfigPromise;\n    }\n}\n","import { interfaces } from \"inversify\";\nimport { RuntimeDomainOption, AccountSidOption, PublicConfig } from \"~/modules/config\";\nimport { InternalError } from \"~/errors\";\nimport { XOR } from \"~/utils/utilityTypes\";\nimport { ConfigurationService } from \"~/backend/generated/Configuration/api/configuration.serviceInterface\";\nimport { configurationServiceRTTI } from \"~/backend/backend.rtti\";\nimport { mapRootKeysToCamelCase } from \"~/utils/mapKeys\";\n\nconst TWILIO_DOMAIN = \".twil.io\";\nconst RUNTIME_DOMAIN_REGEXP = /^([a-z]+-[a-z]+-\\d+)$/;\n\nfunction sanitizeRuntimeDomain(domain: string): string {\n    let sanitizedDomain = domain.trim();\n\n    if (sanitizedDomain.endsWith(\"/\")) {\n        sanitizedDomain = sanitizedDomain.replace(/\\/$/, \"\");\n    }\n\n    if (!sanitizedDomain.endsWith(TWILIO_DOMAIN)) {\n        const parsedRuntimeDomain = sanitizedDomain.match(RUNTIME_DOMAIN_REGEXP);\n        if (parsedRuntimeDomain && parsedRuntimeDomain[1]) {\n            sanitizedDomain += TWILIO_DOMAIN;\n        }\n    }\n\n    return sanitizedDomain;\n}\n\nfunction isAccountSidOption(option: XOR<AccountSidOption, RuntimeDomainOption>): option is AccountSidOption {\n    return !!(option as AccountSidOption).accountSid;\n}\n\nfunction getPublicConfigQueryParam(\n    option: XOR<AccountSidOption, RuntimeDomainOption>\n): { paramName: \"AccountSid\" | \"RuntimeDomain\"; paramValue: string } {\n    if (isAccountSidOption(option)) {\n        const accountSid = (option as AccountSidOption).accountSid;\n        return { paramName: \"AccountSid\", paramValue: accountSid };\n    }\n\n    const runtimeDomain = (option as RuntimeDomainOption).runtimeDomain;\n    const sanitizedDomain = sanitizeRuntimeDomain(runtimeDomain);\n    return { paramName: \"RuntimeDomain\", paramValue: sanitizedDomain };\n}\n\nexport async function getPublicConfig(\n    container: interfaces.Container,\n    option: XOR<AccountSidOption, RuntimeDomainOption>\n): Promise<PublicConfig> {\n    const configurationService = container.get<ConfigurationService>(configurationServiceRTTI);\n\n    const queryParam = getPublicConfigQueryParam(option);\n    const responseData = await configurationService.fetchPublicConfiguration(\n        queryParam.paramName,\n        queryParam.paramValue\n    );\n    if (!(responseData && responseData.configurations && responseData.configurations.length)) {\n        throw new InternalError(\"Invalid response from public configuration endpoint\");\n    }\n    return mapRootKeysToCamelCase(responseData.configurations[0]) as PublicConfig;\n}\n","import { interfaces } from \"inversify\";\nimport { AccountConfigData } from \"~/modules/config\";\nimport { ConfigurationService } from \"~/backend/generated/Configuration/api/configuration.serviceInterface\";\nimport { configurationServiceRTTI } from \"~/backend/backend.rtti\";\n\nexport const updateAccountConfig = async (\n    container: interfaces.Container,\n    accountSid: string,\n    config: Partial<AccountConfigData>\n): Promise<AccountConfigData> => {\n    const configurationService = container.get<ConfigurationService>(configurationServiceRTTI);\n    const updatedConfiguration = await configurationService.updateConfiguration({ accountSid, ...config });\n    return updatedConfiguration;\n};\n","import { TwilsockClient } from \"twilsock\";\n\nexport { TwilsockClient };\n\nexport type TwilsockOptions = {\n    region?: string;\n    clientMetadata: {\n        type: string;\n        sdk: string;\n        sdkv: string;\n        app?: string;\n        appv?: string;\n    };\n};\n\nexport enum TwilsockClientEvent {\n    TokenExpired = \"tokenExpired\",\n    TokenAboutToExpire = \"tokenAboutToExpire\",\n    StateChanged = \"stateChanged\",\n    ConnectionError = \"connectionError\",\n    Connected = \"connected\",\n    Disconnected = \"disconnected\",\n    TokenUpdated = \"tokenUpdated\"\n}\n\nexport interface NewableTwilsockClient {\n    new (token: string, productId: string, options?: TwilsockOptions): TwilsockClient;\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    AccountConfig,\n    AccountConfigProvider,\n    AccountConfigData,\n    EnvironmentConfig,\n    PublicConfigProvider,\n    AccountSidOption,\n    RuntimeDomainOption,\n    PublicConfig,\n    accountConfigRTTI,\n    accountConfigProviderRTTI,\n    environmentConfigRTTI,\n    publicConfigProviderRTTI,\n    configDataContainerRTTI\n} from \"~/modules/config\";\nimport { accountConfigProvider } from \"./AccountConfigProvider/AccountConfigProvider\";\nimport { accountConfigUpdaterRTTI } from \"./config.rtti\";\nimport { getEnvironmentConfig } from \"./EnvironmentConfig/EnvironmentConfigImpl\";\nimport { AccountConfigStore } from \"./AccountConfig/AccountConfigImpl/AccountConfigStore/AccountConfigStore\";\nimport { getPublicConfig } from \"./PublicConfigProvider/getPublicConfig\";\nimport { XOR } from \"~/utils/utilityTypes\";\nimport { updateAccountConfig } from \"./AccountConfig/AccountConfigImpl/AccountConfigUpdate/updateAccountConfig\";\nimport { ConfigDataContainer } from \"./AccountConfig/ConfigDataContainer\";\nimport { AccountConfigDataContainer } from \"./AccountConfig/AccountConfigImpl/AccountConfigDataContainer/AccountConfigDataContainer\";\nimport { AccountConfigUpdater } from \"./AccountConfig/AccountConfigUpdater\";\n\nexport const configModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<AccountConfig>(accountConfigRTTI).to(AccountConfigStore).inSingletonScope();\n    bind<ConfigDataContainer<AccountConfigData>>(configDataContainerRTTI)\n        .to(AccountConfigDataContainer)\n        .inSingletonScope();\n    bind<AccountConfigProvider>(accountConfigProviderRTTI).toProvider<AccountConfig>((context: interfaces.Context) => {\n        return () => accountConfigProvider(context.container);\n    });\n    bind<AccountConfigUpdater>(accountConfigUpdaterRTTI).toDynamicValue((context: interfaces.Context) => {\n        return (accountSid: string, config: Partial<AccountConfigData>) =>\n            updateAccountConfig(context.container, accountSid, config);\n    });\n    bind<EnvironmentConfig>(environmentConfigRTTI).toDynamicValue(getEnvironmentConfig);\n    bind<PublicConfigProvider>(publicConfigProviderRTTI).toProvider<PublicConfig>((context: interfaces.Context) => {\n        return (option: XOR<AccountSidOption, RuntimeDomainOption>) => getPublicConfig(context.container, option);\n    });\n});\n","import { Logger } from \"~/modules/logger\";\n\nconst HTTP_STATUS_CODE_TOO_MANY_REQUESTS = 429;\n\nexport async function retry<T>(\n    functionToRetry: Function,\n    logger?: Logger,\n    initialDelay: number = 100,\n    maxAttempts: number = 10\n): Promise<T> {\n    let retryCount = 0;\n    const maxDelay = 15 * 60 * 1000; \n    let errorToReturn;\n\n    do {\n        try {\n            if (logger && retryCount > 0) {\n                logger.debug(\"Retry attempt: \", retryCount);\n            }\n\n            \n            return await functionToRetry();\n        } catch (error) {\n            \n            \n            const httpErrorCode = error.reply?.status?.code;\n            if (httpErrorCode === HTTP_STATUS_CODE_TOO_MANY_REQUESTS) {\n                if (retryCount >= maxAttempts) {\n                    errorToReturn = error;\n                    break;\n                }\n            } else {\n                return Promise.reject(error);\n            }\n        }\n\n        let delay = 1.5 ** retryCount * initialDelay;\n\n        \n        if (delay > maxDelay) {\n            delay = maxDelay;\n        }\n\n        \n        await new Promise((resolve) => setTimeout(resolve, delay));\n    } while (retryCount++ < maxAttempts);\n\n    return Promise.reject(errorToReturn);\n}\n","import { injectable, inject } from \"inversify\";\nimport loglevel from \"loglevel\";\nimport { version } from \"package.json\";\nimport { EventPublisher } from \"~/modules/events\";\nimport {\n    TwilsockClient,\n    NewableTwilsockClient,\n    TwilsockClientEvent\n} from \"~/modules/websocket/TwilsockClient/TwilsockClient\";\nimport { newableTwilsockClientRTTI, productIdRTTI } from \"~/modules/websocket/websocket.rtti\";\nimport { Headers, Twilsock, TwilsockResult, TwilsockEvent } from \"~/modules/websocket\";\nimport { ErrorCode, FlexSdkError, throwFlexSdkError, InternalError } from \"~/errors\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, LoggerName, loglevelMethodName } from \"~/modules/logger\";\nimport { environmentConfigRTTI, EnvironmentConfig } from \"~/modules/config\";\nimport { clientSettingsRTTI, ClientUserSettings } from \"~/modules/client\";\nimport { retry } from \"~/utils/retry\";\n\nconst FLEX_SDK_NAME = \"flex-sdk\";\nconst FLEX_SDK_PLATFORM = \"JS\";\n\n@injectable()\nexport class TwilsockImpl extends EventPublisher<TwilsockEvent> implements Twilsock {\n    private readonly productId: string;\n\n    private readonly NewableTwilsockClient: NewableTwilsockClient;\n\n    private twilsockClient?: TwilsockClient;\n\n    private readonly logger: Logger;\n\n    private readonly environmentConfig: EnvironmentConfig;\n\n    private readonly clientSettings: ClientUserSettings;\n\n    constructor(\n        @inject(newableTwilsockClientRTTI) TC: NewableTwilsockClient,\n        @inject(productIdRTTI) productId: string,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory,\n        @inject(environmentConfigRTTI) environmentConfig: EnvironmentConfig,\n        @inject(clientSettingsRTTI) clientSettings: ClientUserSettings\n    ) {\n        super();\n        this.NewableTwilsockClient = TC;\n        this.productId = productId;\n        this.logger = getLogger(LoggerName.Twilsock);\n        this.logger.debug(\"Twilsock constructed\");\n        this.environmentConfig = environmentConfig;\n        this.clientSettings = clientSettings;\n    }\n\n    async connect(token: string): Promise<void> {\n        if (this.twilsockClient) {\n            throw new InternalError(\"Twilsock connection already exists\");\n        }\n        const clientOptions = {\n            region: this.clientSettings.region || this.environmentConfig.region,\n            clientMetadata: {\n                type: FLEX_SDK_NAME,\n                sdk: FLEX_SDK_PLATFORM,\n                sdkv: version,\n                app: this.clientSettings.appName,\n                appv: this.clientSettings.appVersion\n            }\n        };\n        this.twilsockClient = new this.NewableTwilsockClient(token, this.productId, clientOptions);\n        this.proxyEventsFromTwilsockClient();\n        this.proxyLogsFromTwilsockClient();\n        this.twilsockClient.connect();\n        await this.waitUntilConnectedOrRejected();\n    }\n\n    private proxyEventsFromTwilsockClient() {\n        this.proxyEvent(this.getRawTwilsockClient(), TwilsockClientEvent.TokenExpired, TwilsockEvent.TokenExpired);\n        this.proxyEvent(\n            this.getRawTwilsockClient(),\n            TwilsockClientEvent.TokenAboutToExpire,\n            TwilsockEvent.TokenAboutToExpire\n        );\n        this.proxyEvent(this.getRawTwilsockClient(), TwilsockClientEvent.StateChanged, TwilsockEvent.StateChanged);\n        this.proxyEvent(this.getRawTwilsockClient(), TwilsockClientEvent.Connected, TwilsockEvent.Connected);\n        this.proxyEvent(this.getRawTwilsockClient(), TwilsockClientEvent.Disconnected, TwilsockEvent.Disconnected);\n        this.listenAndEmitConnectionError();\n    }\n\n    private proxyLogsFromTwilsockClient() {\n        const twilsockLoglevel = loglevel.getLogger(\"twilsock\");\n        twilsockLoglevel.methodFactory = (methodName: loglevelMethodName) => (...messages: unknown[]) => {\n            \n\n\n\n            return this.logger[methodName](...messages);\n        };\n        twilsockLoglevel.setLevel(\"trace\");\n    }\n\n    private listenAndEmitConnectionError(): void {\n        this.getRawTwilsockClient().on(TwilsockClientEvent.ConnectionError, (error) => {\n            const errorCode = error.errorCode || ErrorCode.TwilsockConnectionError;\n            const flexError = new FlexSdkError(errorCode, error?.message);\n            super.emit(TwilsockEvent.ConnectionError, flexError);\n        });\n    }\n\n    async updateToken(token: string): Promise<void> {\n        if (!this.twilsockClient) {\n            throw new FlexSdkError(ErrorCode.InvalidState, \"no twilsock client\");\n        }\n\n        try {\n            await this.twilsockClient.updateToken(token);\n            this.emit(TwilsockEvent.TokenUpdated, token);\n        } catch (error) {\n            throwFlexSdkError(error);\n        }\n    }\n\n    private waitUntilConnectedOrRejected(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (this.getRawTwilsockClient().isConnected) {\n                resolve();\n                return;\n            }\n\n            const successHandler = () => {\n                return resolve();\n            };\n\n            const connectionErrorHandler = (error: FlexSdkError) => {\n                return reject(error);\n            };\n\n            const removeConnectionListeners = () => {\n                this.removeListener(TwilsockEvent.Connected, successHandler);\n                this.removeListener(TwilsockEvent.ConnectionError, connectionErrorHandler);\n            };\n\n            this.on(TwilsockEvent.Connected, () => {\n                removeConnectionListeners();\n                successHandler();\n            });\n            this.on(TwilsockEvent.ConnectionError, (error: FlexSdkError) => {\n                removeConnectionListeners();\n                connectionErrorHandler(error);\n            });\n        });\n    }\n\n    getRawTwilsockClient() {\n        if (!this.twilsockClient) {\n            throw new InternalError(\"Twilsock hasn't been initialized\");\n        }\n        return this.twilsockClient;\n    }\n\n    async post<T>(url: string, headers: Headers, body: object): Promise<TwilsockResult<T>> {\n        try {\n            return await retry<TwilsockResult<T>>(\n                () => this.getRawTwilsockClient().post(url, headers, body),\n                this.logger\n            );\n        } catch (error) {\n            const code: number = error.body?.code || ErrorCode.SDK;\n            const message: string = error.body?.message || error.message;\n\n            throw new FlexSdkError(code, message, error);\n        }\n    }\n\n    async destroy() {\n        if (!this.twilsockClient) {\n            return;\n        }\n        const twilsockClient = this.twilsockClient;\n        const connectionDestroyed = new Promise((resolve) => {\n            twilsockClient.on(TwilsockClientEvent.Disconnected, resolve);\n        });\n        await twilsockClient.disconnect();\n        await connectionDestroyed;\n        delete this.twilsockClient;\n        this.removeAllListeners();\n    }\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { newableTwilsockClientRTTI, twilsockRTTI, productIdRTTI } from \"./websocket.rtti\";\nimport { NewableTwilsockClient, TwilsockClient } from \"./TwilsockClient/TwilsockClient\";\nimport { Twilsock } from \"./Twilsock/Twilsock\";\nimport { TwilsockImpl } from \"./Twilsock/TwilsockImpl\";\n\nexport const websocketModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<NewableTwilsockClient>(newableTwilsockClientRTTI).toConstructor(TwilsockClient);\n    bind<string>(productIdRTTI).toConstantValue(\"flex\");\n    bind<Twilsock>(twilsockRTTI).to(TwilsockImpl).inSingletonScope();\n});\n","export const rbacRTTI = Symbol.for(\"Rbac\");\n","import { interfaces } from \"inversify\";\nimport { Role } from \"~/modules/auth\";\nimport { Session, sessionRTTI } from \"~/modules/session\";\n\nexport const hasRole = (container: interfaces.Container) => (role: Role) => {\n    const session = container.get<Session>(sessionRTTI);\n    const userRoles = session.roles;\n    return userRoles.includes(role);\n};\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { requiredRole } from \"./RequiredRole/requiredRole\";\nimport { rbacRTTI } from \"./rbac.rtti\";\nimport { Rbac } from \"./Rbac\";\nimport { hasRole } from \"./HasRole/hasRole\";\n\nexport const rbacModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Rbac>(rbacRTTI).toDynamicValue((context: interfaces.Context) => {\n        return {\n            requiredRole: requiredRole(context.container),\n            hasRole: hasRole(context.container)\n        };\n    });\n});\n","import { interfaces } from \"inversify\";\n\nimport { Role } from \"~/modules/auth\";\nimport { Session, sessionRTTI } from \"~/modules/session\";\nimport { FlexSdkError, ErrorCode } from \"~/errors\";\n\nexport const requiredRole = (container: interfaces.Container) => (role: Role) => {\n    return function decorator(target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n        const originalMethod = descriptor.value;\n        const session = container.get<Session>(sessionRTTI);\n\n        \n        descriptor.value = function wrappedMethod(...args: Array<unknown>) {\n            const currentRoles = session.roles;\n            if (!currentRoles.includes(role)) {\n                const wrongRole: string = currentRoles.length ? currentRoles.toString() : \"no role\";\n                throw new FlexSdkError(ErrorCode.Forbidden, `Expected the role ${role}, but got ${wrongRole} instead.`);\n            }\n\n            const result = originalMethod.apply(this, args);\n            return result;\n        };\n    };\n};\n","import { injectable } from \"inversify\";\nimport { Logger, LoggerLevel, LoggerLevelNumbers, Loglevel, LogEntry } from \"~/modules/logger\";\n\n@injectable()\nexport class LoggerImpl implements Logger {\n    private readonly loglevel: Loglevel;\n\n    constructor(loglevel: Loglevel) {\n        this.loglevel = loglevel;\n    }\n\n    trace = (...args: unknown[] | LogEntry[]) => {\n        this.loglevel.trace(...args);\n    };\n\n    debug = (...args: unknown[] | LogEntry[]) => {\n        this.loglevel.debug(...args);\n    };\n\n    \n\n\n    log = (...args: unknown[] | LogEntry[]) => {\n        this.loglevel.debug(...args);\n    };\n\n    info = (...args: unknown[] | LogEntry[]) => {\n        this.loglevel.info(...args);\n    };\n\n    warn = (...args: unknown[] | LogEntry[]) => {\n        this.loglevel.warn(...args);\n    };\n\n    error = (...args: unknown[] | LogEntry[]) => {\n        this.loglevel.error(...args);\n    };\n\n    setLevel = (level: LoggerLevel) => {\n        this.loglevel.setLevel(level);\n    };\n\n    getLevel = (): LoggerLevelNumbers => {\n        return this.loglevel.getLevel();\n    };\n}\n","import { LogLevelNumbers, MethodFactory } from \"loglevel\";\nimport { LogEntry } from \"~/modules/logger\";\n\nconst toTwoDigits = (number: Number) => {\n    if (number < 10) {\n        return `0${number}`;\n    }\n    return `${number}`;\n};\n\nconst formatDate = (date: Date): string => {\n    const year = date.getFullYear();\n    const month = toTwoDigits(date.getMonth() + 1);\n    const day = toTwoDigits(date.getDate());\n    const hours = toTwoDigits(date.getHours());\n    const minutes = toTwoDigits(date.getMinutes());\n    const seconds = toTwoDigits(date.getSeconds());\n    const miliseconds = toTwoDigits(date.getMilliseconds());\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}.${miliseconds}`;\n};\n\nexport const formatEntry = (originalFactory: MethodFactory) => (\n    methodName: string,\n    logLevel: LogLevelNumbers,\n    loggerName: string\n) => {\n    return (logEntry: LogEntry, ...messages: unknown[]) => {\n        const timestamp = formatDate(logEntry.timestamp);\n        const level = logEntry.severity.toUpperCase();\n        const messagePrefix = `[${timestamp}] Flex SDK → ${loggerName} (${level}): `;\n        const method = originalFactory(methodName, logLevel, loggerName);\n        return method(messagePrefix, ...messages);\n    };\n};\n","import { Loglevel } from \"~/modules/logger\";\nimport { createLogEntry } from \"./logentry/createLogEntry\";\nimport { setContext } from \"./logentry/setContext\";\nimport { setData } from \"./logentry/setData\";\nimport { formatEntry } from \"./logentry/formatEntry\";\n\nconst factories = [createLogEntry, setContext, setData, formatEntry].reverse();\n\nexport const logEntryPlugin = (loglevel: Loglevel) => {\n    factories.forEach((f) => {\n        const originalFactory = loglevel.methodFactory;\n        \n        loglevel.methodFactory = f(originalFactory);\n    });\n\n    loglevel.setLevel(loglevel.getLevel());\n    return loglevel;\n};\n","import { LogLevelNumbers, MethodFactory } from \"loglevel\";\nimport { LogEntry, Severity } from \"~/modules/logger\";\n\nexport const createLogEntry = (originalFactory: MethodFactory) => (\n    methodName: string,\n    logLevel: LogLevelNumbers,\n    loggerName: string\n) => {\n    return (firstParam: LogEntry | unknown, ...messages: unknown[]) => {\n        const isLogEntry = firstParam instanceof LogEntry;\n        if (!isLogEntry) {\n            messages.unshift(firstParam);\n        }\n\n        const logEntry = isLogEntry ? (firstParam as LogEntry) : new LogEntry(loggerName, methodName as Severity);\n        const method = originalFactory(methodName, logLevel, loggerName);\n        return method(logEntry, ...messages);\n    };\n};\n","import { LogLevelNumbers, MethodFactory } from \"loglevel\";\nimport { LogEntry } from \"~/modules/logger\";\n\nexport const setContext = (originalFactory: MethodFactory) => (\n    methodName: string,\n    logLevel: LogLevelNumbers,\n    loggerName: string\n) => {\n    return (logEntry: LogEntry, ...messages: unknown[]) => {\n        \n        \n\n        const method = originalFactory(methodName, logLevel, loggerName);\n        return method(logEntry, ...messages);\n    };\n};\n","import { LogLevelNumbers, MethodFactory } from \"loglevel\";\nimport { LogEntry } from \"~/modules/logger\";\n\nexport const setData = (originalFactory: MethodFactory) => (\n    methodName: string,\n    logLevel: LogLevelNumbers,\n    loggerName: string\n) => {\n    return (logEntry: LogEntry, ...messages: unknown[]) => {\n        if (!logEntry.data) {\n            \n            logEntry.data = messages;\n        }\n\n        const method = originalFactory(methodName, logLevel, loggerName);\n        return method(logEntry, ...messages);\n    };\n};\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { getLogger as getLoglevel } from \"loglevel\";\nimport { Logger, NewableLogger, LoggerSettings } from \"./Logger/Logger\";\nimport {\n    loggerFactoryRTTI,\n    newableLoggerRTTI,\n    loglevelFactoryRTTI,\n    defaultPluginsRTTI,\n    loggerSettingsRTTI,\n    loggerInstancesRTTI\n} from \"./logger.rtti\";\nimport { LoglevelFactory, LoggerPlugin, LoggerInstances } from \"./LoggerFactory/LoggerFactory\";\nimport { getLogger } from \"./LoggerFactory/getLogger\";\nimport { getDefaultLoggerSettings } from \"./DefaultLoggerLevel/defaultLoggerLevel\";\nimport { LoggerImpl } from \"./Logger/LoggerImpl/LoggerImpl\";\nimport { logEntryPlugin } from \"./plugins/logEntryPlugin\";\n\nexport const loggerModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<LoglevelFactory>(loglevelFactoryRTTI).toConstantValue(getLoglevel);\n    bind<interfaces.Factory<Logger>>(loggerFactoryRTTI).toFactory<Logger>((context: interfaces.Context) =>\n        getLogger(context.container)\n    );\n    bind<NewableLogger>(newableLoggerRTTI).toConstructor(LoggerImpl);\n    bind<LoggerPlugin[]>(defaultPluginsRTTI).toConstantValue([logEntryPlugin]);\n    bind<LoggerSettings>(loggerSettingsRTTI).toConstantValue(getDefaultLoggerSettings());\n    bind<LoggerInstances>(loggerInstancesRTTI).toConstantValue(new Map());\n});\n","import { injectable, inject } from \"inversify\";\nimport { EventPublisher } from \"~/modules/events\";\nimport { SyncMap, MapMode, Sync, SyncProductId } from \"~/modules/sync\";\nimport { NewableSyncClient, SyncClient, SyncClientEvent, SyncClientState } from \"~/modules/sync/SyncClient/SyncClient\";\nimport { newableSyncClientRTTI, syncMapProviderRTTI } from \"~/modules/sync/sync.rtti\";\nimport { FlexSdkError, ErrorCode, throwFlexSdkError, InternalError } from \"~/errors\";\nimport { Logger, LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { twilsockRTTI, Twilsock, TwilsockEvent } from \"~/modules/websocket\";\nimport { environmentConfigRTTI, EnvironmentConfig } from \"~/modules/config\";\nimport { clientSettingsRTTI, ClientUserSettings } from \"~/modules/client\";\nimport { SyncMapProvider } from \"~/modules/sync/SyncMapProvider/SyncMapProvider\";\nimport { SyncEvent } from \"./SyncEvent\";\n\n@injectable()\nexport class SyncImpl extends EventPublisher<SyncEvent> implements Sync {\n    private syncClient: SyncClient;\n\n    private readonly NewableSyncClient: NewableSyncClient;\n\n    private readonly logger: Logger;\n\n    private readonly twilsock: Twilsock;\n\n    private readonly environmentConfig: EnvironmentConfig;\n\n    private readonly clientSettings: ClientUserSettings;\n\n    private readonly syncMapProvider: SyncMapProvider;\n\n    constructor(\n        @inject(newableSyncClientRTTI) newableSyncClient: NewableSyncClient,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory,\n        @inject(twilsockRTTI) twilsock: Twilsock,\n        @inject(environmentConfigRTTI) environmentConfig: EnvironmentConfig,\n        @inject(clientSettingsRTTI) clientSettings: ClientUserSettings,\n        @inject(syncMapProviderRTTI) syncMapProvider: SyncMapProvider\n    ) {\n        super();\n        this.NewableSyncClient = newableSyncClient;\n        this.logger = getLogger(LoggerName.Sync);\n        this.twilsock = twilsock;\n        this.environmentConfig = environmentConfig;\n        this.clientSettings = clientSettings;\n        this.syncMapProvider = syncMapProvider;\n    }\n\n    public isConnected(): boolean {\n        return this.syncClient?.connectionState === SyncClientState.Connected;\n    }\n\n    async connect(token: string, productId: SyncProductId): Promise<void> {\n        if (this.syncClient) {\n            return;\n        }\n\n        const clientOptions = {\n            \n            \n            region: this.clientSettings.region || this.environmentConfig.region,\n            productId\n        };\n        this.syncClient = new this.NewableSyncClient(token, clientOptions);\n        await this.waitUntilConnectedOrRejected();\n        this.listenOnTokenUpdateEvent();\n        this.listenOnDisconnectEvent();\n    }\n\n    private async waitUntilConnectedOrRejected(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (this.syncClient.connectionState === SyncClientState.Connected) {\n                resolve();\n            }\n\n            const connectionStateHandler = (newState: SyncClientState) => {\n                this.logger.debug(`Connection state changed: ${newState}`);\n                if (newState === SyncClientState.Connected) {\n                    resolve();\n                }\n\n                if (newState === SyncClientState.Error) {\n                    this.syncClient.removeAllListeners();\n                }\n\n                if ([SyncClientState.Error, SyncClientState.Disconnected, SyncClientState.Denied].includes(newState)) {\n                    reject(new FlexSdkError(ErrorCode.SyncConnectionError));\n                }\n            };\n\n            this.syncClient.on(SyncClientEvent.ConnectionStateChanged, connectionStateHandler);\n        });\n    }\n\n    private listenOnTokenUpdateEvent(): void {\n        const tokenUpdateHandler = async (token: string) => {\n            try {\n                await this.syncClient.updateToken(token);\n            } catch (error) {\n                throwFlexSdkError(error);\n            }\n        };\n        this.twilsock.on(TwilsockEvent.TokenUpdated, tokenUpdateHandler);\n    }\n\n    private listenOnDisconnectEvent(): void {\n        const disconnectHandler = async () => {\n            try {\n                await this.destroy();\n            } catch (error) {\n                throwFlexSdkError(error);\n            }\n        };\n        this.twilsock.on(TwilsockEvent.Disconnected, disconnectHandler);\n    }\n\n    async getMapById(mapId: string, mapMode: MapMode = MapMode.OpenExisting): Promise<SyncMap> {\n        if (!this.syncClient) {\n            throw new InternalError(\"Sync client hasn't been initialized\");\n        }\n\n        return this.syncMapProvider(this.syncClient, mapId, mapMode);\n    }\n\n    async destroy(): Promise<void> {\n        this.emit(SyncEvent.Destroyed);\n        if (!this.syncClient) {\n            return;\n        }\n        await this.syncClient.shutdown();\n        this.syncClient.removeAllListeners();\n        this.logger.debug(\"Sync client destroyed\");\n    }\n}\n","import { SyncMap as SyncSdkSyncMap } from \"twilio-sync\";\n\nimport { SyncMap, SyncMapItem } from \"~/modules/sync\";\nimport { SyncMapItemProvider } from \"~/modules/sync/SyncMapItemProvider/SyncMapItemProvider\";\n\nexport class SyncMapImpl implements SyncMap {\n    private readonly syncSdkSyncMap: SyncSdkSyncMap;\n\n    private readonly syncMapItemProvider: SyncMapItemProvider;\n\n    constructor(syncSdkSyncMap: SyncSdkSyncMap, syncMapItemProvider: SyncMapItemProvider) {\n        this.syncSdkSyncMap = syncSdkSyncMap;\n        this.syncMapItemProvider = syncMapItemProvider;\n    }\n\n    get sid(): string {\n        return this.syncSdkSyncMap.sid;\n    }\n\n    get dateUpdated(): Date {\n        return this.syncSdkSyncMap.dateUpdated;\n    }\n\n    get uniqueName(): string {\n        return this.syncSdkSyncMap.uniqueName;\n    }\n\n    async get(key: string): Promise<SyncMapItem<object>> {\n        return this.syncMapItemProvider(this.syncSdkSyncMap, key);\n    }\n\n    on(event: string, listener: (...args: unknown[]) => void): void {\n        this.syncSdkSyncMap.on(event, listener);\n    }\n\n    removeListener(event: string, listener: (...args: unknown[]) => void): void {\n        this.syncSdkSyncMap.removeListener(event, listener);\n    }\n}\n","import { SyncMap as SyncSdkSyncMap, SyncMapItem as SyncSdkSyncMapItem } from \"twilio-sync\";\nimport { SyncMapItem, Subscribable, SubscribableOptions } from \"~/modules/sync\";\nimport { InternalError } from \"~/errors\";\nimport { createSubscribable } from \"~/modules/sync/Subscribable/createSubscribable\";\n\nenum SubscribeEvent {\n    ItemUpdated = \"itemUpdated\"\n}\n\nconst defaultSubscribableOptions: SubscribableOptions = {\n    mapKeysToCamelCase: true,\n    dateFields: [\"timestampUpdated\"]\n};\n\ntype SubscribableValue<T = object> = {\n    options: SubscribableOptions;\n    value: Subscribable<T>;\n};\n\nexport class SyncMapItemImpl<T extends object = object> implements SyncMapItem<T> {\n    private subscribable?: SubscribableValue<T>;\n\n    private readonly subscribableSubItems: Map<string, SubscribableValue> = new Map();\n\n    private readonly subscribers: Function[] = [];\n\n    private readonly syncMap: SyncSdkSyncMap;\n\n    private readonly itemKey: string;\n\n    private _value: object;\n\n    constructor(syncMap: SyncSdkSyncMap, mapItem: SyncSdkSyncMapItem) {\n        this.syncMap = syncMap;\n        this.itemKey = mapItem.key;\n        this._value = mapItem.value;\n    }\n\n    get key(): string {\n        return this.itemKey;\n    }\n\n    get value(): object {\n        return this._value;\n    }\n\n    getSubscribable(options: Partial<SubscribableOptions> = {}): Subscribable<T> {\n        if (!this.subscribable) {\n            const finalOptions = { ...defaultSubscribableOptions, ...options };\n            this.subscribable = {\n                options: finalOptions,\n                value: createSubscribable(this._value, finalOptions, this.subscribe, this.unsubscribe)\n            };\n        }\n\n        return this.subscribable.value as Subscribable<T>;\n    }\n\n    getSubscribableForSubKey<K extends keyof T & string>(\n        subKey: K,\n        options: Partial<SubscribableOptions> = {}\n    ): Subscribable<T[K]> {\n        let subItem = this.subscribableSubItems.get(subKey);\n        if (!subItem) {\n            const subValue = this.getSubValue(subKey);\n            const finalOptions = { ...defaultSubscribableOptions, ...options };\n            const subscribable = createSubscribable(subValue, finalOptions, this.subscribe, this.unsubscribe);\n            subItem = { options: finalOptions, value: subscribable };\n            this.subscribableSubItems.set(subKey, subItem);\n        }\n\n        return subItem.value as Subscribable<T[K]>;\n    }\n\n    subscribe = (callback: Function) => {\n        this.subscribers.push(callback);\n\n        if (this.subscribers.length === 1) {\n            this.syncMap.on(SubscribeEvent.ItemUpdated, this.itemUpdatedHandler);\n        }\n    };\n\n    unsubscribe = (callback: Function) => {\n        const subscriberIndex = this.subscribers.indexOf(callback);\n        if (subscriberIndex < 0) {\n            return;\n        }\n\n        this.subscribers.splice(subscriberIndex, 1);\n        if (this.subscribers.length === 0) {\n            this.syncMap.removeListener(SubscribeEvent.ItemUpdated, this.itemUpdatedHandler);\n        }\n    };\n\n    private updateValue(value: object) {\n        this._value = value;\n\n        if (this.subscribable) {\n            const newSubscribable = createSubscribable(\n                value,\n                this.subscribable.options,\n                this.subscribe,\n                this.unsubscribe\n            );\n\n            this.deleteRemovedSubKeys(this.subscribable.value, newSubscribable);\n            Object.assign(this.subscribable.value, {\n                ...newSubscribable\n            });\n        }\n\n        this.subscribableSubItems.forEach((subValue, subKey) => {\n            const updatedSubValue = this.getSubValue(subKey);\n            const newSubItemSubscribable = createSubscribable(\n                updatedSubValue,\n                subValue.options,\n                this.subscribe,\n                this.unsubscribe\n            );\n\n            this.deleteRemovedSubKeys(subValue.value, newSubItemSubscribable);\n            Object.assign(subValue.value, {\n                ...newSubItemSubscribable\n            });\n        });\n    }\n\n    private deleteRemovedSubKeys(fromObject: object, newData: object) {\n        const source = fromObject as { [k: string]: unknown };\n        const removedKeys = Object.keys(source).filter((key) => !Object.prototype.hasOwnProperty.call(newData, key));\n\n        removedKeys.forEach((keyToRemove) => {\n            delete source[keyToRemove];\n        });\n    }\n\n    private readonly itemUpdatedHandler = ({ item }: { item: SyncSdkSyncMapItem }) => {\n        if (item.key === this.key) {\n            this.updateValue(item.value);\n\n            this.subscribers.forEach((fn) => fn());\n        }\n    };\n\n    private isIndexObject(value: object, subscribedSubKey: string): value is { [key: string]: object } {\n        return Object.prototype.hasOwnProperty.call(value, subscribedSubKey);\n    }\n\n    private getSubValue(subKey: string): object {\n        if (this.isIndexObject(this.value, subKey)) {\n            return this.value[subKey];\n        }\n\n        throw new InternalError(`Key ${subKey} does not exist in item ${this.itemKey}`);\n    }\n}\n","import { interfaces } from \"inversify\";\nimport { SyncClient } from \"twilio-sync\";\nimport { SyncMap, MapMode } from \"~/modules/sync\";\nimport { newableSyncMapRTTI, syncMapItemProviderRTTI } from \"~/modules/sync/sync.rtti\";\nimport { NewableSyncMap } from \"~/modules/sync/SyncMap/NewableSyncMap\";\nimport { SyncMapItemProvider } from \"~/modules/sync/SyncMapItemProvider/SyncMapItemProvider\";\nimport { FlexSdkError, ErrorCode } from \"~/errors\";\n\nexport async function getSyncMap(\n    container: interfaces.Container,\n    syncClient: SyncClient,\n    mapId: string,\n    mapMode: MapMode\n): Promise<SyncMap> {\n    try {\n        const sdkSyncMap = await syncClient.map({ id: mapId, mode: mapMode });\n        const SyncMapConstructor = container.get<NewableSyncMap>(newableSyncMapRTTI);\n        const syncMapItemProvider = container.get<SyncMapItemProvider>(syncMapItemProviderRTTI);\n\n        const syncMap = new SyncMapConstructor(sdkSyncMap, syncMapItemProvider);\n        return syncMap;\n    } catch ({ code, message }) {\n        throw new FlexSdkError(code || ErrorCode.SDK, message);\n    }\n}\n","import { interfaces } from \"inversify\";\nimport { SyncMap as SyncSdkSyncMap } from \"twilio-sync\";\nimport { SyncMapItem } from \"~/modules/sync\";\nimport { newableSyncMapItemRTTI } from \"~/modules/sync/sync.rtti\";\nimport { NewableSyncMapItem } from \"~/modules/sync/SyncMapItem/NewableSyncMapItem\";\nimport { FlexSdkError, ErrorCode } from \"~/errors\";\n\nexport async function getSyncMapItem(\n    container: interfaces.Container,\n    syncSdkSyncMap: SyncSdkSyncMap,\n    key: string\n): Promise<SyncMapItem> {\n    try {\n        const sdkSyncMapItem = await syncSdkSyncMap.get(key);\n        const SyncMapItemConstructor = container.get<NewableSyncMapItem>(newableSyncMapItemRTTI);\n        const item = new SyncMapItemConstructor(syncSdkSyncMap, sdkSyncMapItem);\n        return item;\n    } catch ({ code, message }) {\n        throw new FlexSdkError(code || ErrorCode.SDK, message);\n    }\n}\n","import { interfaces } from \"inversify\";\nimport { SyncProductId } from \"./SyncProductId\";\nimport { Sync } from \"~/modules/sync\";\nimport { syncCacheRTTI, syncRTTI } from \"../sync.rtti\";\nimport { Session, sessionRTTI } from \"~/modules/session\";\nimport { SyncEvent } from \"../Sync/SyncEvent\";\n\nexport const getSync = async (container: interfaces.Container, productId: SyncProductId): Promise<Sync> => {\n    const syncCache = container.get<Map<SyncProductId, Sync>>(syncCacheRTTI);\n    let sync = syncCache.get(productId);\n    if (!sync) {\n        const handleSyncDestroyed = () => {\n            syncCache.delete(productId);\n        };\n\n        sync = container.get<Sync>(syncRTTI);\n        syncCache.set(productId, sync);\n        sync.on(SyncEvent.Destroyed, handleSyncDestroyed);\n\n        const session = container.get<Session>(sessionRTTI);\n        try {\n            await sync.connect(session.token, productId);\n        } catch (e) {\n            syncCache.delete(productId);\n            throw e;\n        }\n    }\n\n    return sync;\n};\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { SyncClient as SyncSdkClient, SyncMap as SyncSdkSyncMap } from \"twilio-sync\";\nimport {\n    newableSyncClientRTTI,\n    syncRTTI,\n    syncMapProviderRTTI,\n    newableSyncMapRTTI,\n    newableSyncMapItemRTTI,\n    syncMapItemProviderRTTI,\n    syncProviderRTTI,\n    syncCacheRTTI\n} from \"./sync.rtti\";\nimport { MapMode } from \"./Sync/MapMode\";\nimport { NewableSyncClient, SyncClient } from \"./SyncClient/SyncClient\";\nimport { Sync } from \"./Sync/Sync\";\nimport { SyncImpl } from \"./Sync/SyncImpl\";\nimport { SyncMapProvider } from \"./SyncMapProvider/SyncMapProvider\";\nimport { SyncMapImpl } from \"./SyncMap/SyncMapImpl\";\nimport { SyncMapItemProvider } from \"./SyncMapItemProvider/SyncMapItemProvider\";\nimport { SyncMapItemImpl } from \"./SyncMapItem/SyncMapItemImpl\";\nimport { NewableSyncMap } from \"./SyncMap/NewableSyncMap\";\nimport { NewableSyncMapItem } from \"./SyncMapItem/NewableSyncMapItem\";\nimport { getSyncMap } from \"./SyncMapProvider/getSyncMap\";\nimport { getSyncMapItem } from \"./SyncMapItemProvider/getSyncMapItem\";\nimport { SyncProvider } from \"./SyncProvider/SyncProvider\";\nimport { getSync } from \"./SyncProvider/getSync\";\nimport { SyncProductId } from \"./SyncProvider/SyncProductId\";\n\nexport const syncModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<NewableSyncClient>(newableSyncClientRTTI).toConstructor(SyncClient);\n    bind<Sync>(syncRTTI).to(SyncImpl);\n    bind<NewableSyncMap>(newableSyncMapRTTI).toConstructor(SyncMapImpl);\n    bind<NewableSyncMapItem>(newableSyncMapItemRTTI).toConstructor(SyncMapItemImpl);\n\n    bind<SyncMapProvider>(syncMapProviderRTTI).toProvider((context: interfaces.Context) => {\n        return (syncSdkClient: SyncSdkClient, mapId: string, mapMode: MapMode) => {\n            return getSyncMap(context.container, syncSdkClient, mapId, mapMode);\n        };\n    });\n    bind<SyncMapItemProvider>(syncMapItemProviderRTTI).toProvider((context: interfaces.Context) => {\n        return (syncSdkSyncMap: SyncSdkSyncMap, key: string) => {\n            return getSyncMapItem(context.container, syncSdkSyncMap, key);\n        };\n    });\n    bind<SyncProvider>(syncProviderRTTI).toProvider<Sync>((context: interfaces.Context) => {\n        return (syncProductId: SyncProductId) => {\n            return getSync(context.container, syncProductId);\n        };\n    });\n    bind<Map<SyncProductId, Sync>>(syncCacheRTTI).toConstantValue(new Map());\n});\n","import { injectable, inject } from \"inversify\";\nimport { telemetryEventGroupFactoryRTTI } from \"~/modules/telemetry/telemetry.rtti\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, TelemetryLoggerName } from \"~/modules/logger\";\nimport { TelemetryEventGroup, TelemetryClient } from \"~/modules/telemetry\";\nimport { TelemetryEventGroupFactory } from \"~/modules/telemetry/TelemetryEventGroupFactory/TelemetryEventGroupFactory\";\n\n@injectable()\nexport class TelemetryClientImpl<U extends object> implements TelemetryClient<U> {\n    name: string;\n\n    sessionData?: U;\n\n    private readonly eventGroupFactory: TelemetryEventGroupFactory<unknown>;\n\n    private readonly logger: Logger;\n\n    constructor(\n        @inject(telemetryEventGroupFactoryRTTI) eventGroupFactory: TelemetryEventGroupFactory<unknown>,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory<TelemetryLoggerName>\n    ) {\n        this.eventGroupFactory = eventGroupFactory;\n        this.logger = getLogger(TelemetryLoggerName.TelemetryClient);\n    }\n\n    createEventGroup<T>(name?: string): TelemetryEventGroup<T> {\n        this.logger.debug(\"creating event group with name: \", name);\n        const eventGroup = this.eventGroupFactory(this, name);\n        return eventGroup;\n    }\n\n    \n    \n    async setSessionData(sessionData: U): Promise<void> {\n        this.sessionData = sessionData;\n    }\n}\n","import { injectable, inject } from \"inversify\";\nimport { TelemetryClient, TelemetryEvent, TelemetryEventGroup, TelemetryErrorEvent } from \"~/modules/telemetry\";\nimport { TelemetryProcessor } from \"~/modules/telemetry/TelemetryProcessor/TelemetryProcessor\";\nimport { telemetryProcessorRTTI } from \"~/modules/telemetry/telemetry.rtti\";\n\n@injectable()\nexport class TelemetryEventGroupImpl<T> implements TelemetryEventGroup<T> {\n    name?: string;\n\n    telemetryClient: TelemetryClient;\n\n    private readonly processor: TelemetryProcessor;\n\n    constructor(@inject(telemetryProcessorRTTI) processor: TelemetryProcessor) {\n        this.processor = processor;\n    }\n\n    async addEvents(...events: (T & TelemetryEvent)[]): Promise<void> {\n        return this.processor.processEvents(\n            this.telemetryClient.name,\n            this.name,\n            this.telemetryClient.sessionData,\n            ...events\n        );\n    }\n\n    async addErrorEvent(errorEvent: TelemetryErrorEvent): Promise<void> {\n        return this.processor.processEvents(\"error-v1\", this.name, undefined, errorEvent);\n    }\n}\n","import { TelemetryEvent } from \"~/modules/telemetry/\";\nimport { TelemetryBackendEvent } from \"~/backend/generated/Telemetry/model/telemetryBackendEvent\";\nimport { mapAllKeysToSnakeCase } from \"~/utils/mapKeys\";\nimport { Payload } from \"~/backend/generated/Telemetry/model/payload\";\nimport { FlexSdkError, ErrorCode } from \"~/errors\";\n\nfunction instanceOfPayload(object: object): object is Payload {\n    return (\n        Object.prototype.hasOwnProperty.call(object, \"event_name\") &&\n        Object.prototype.hasOwnProperty.call(object, \"client_timestamp\")\n    );\n}\n\nfunction toBackendEvent(\n    payloadType: string,\n    event: TelemetryEvent,\n    groupName?: string,\n    sessionData?: object\n): TelemetryBackendEvent {\n    const mappedSessionData = sessionData === undefined ? {} : mapAllKeysToSnakeCase(sessionData);\n    const mappedEventData = {\n        ...mapAllKeysToSnakeCase(event),\n        client_timestamp: new Date().toISOString(), \n        event_group: groupName \n    };\n    if (instanceOfPayload(mappedEventData)) {\n        return {\n            payload_type: payloadType, \n            payload: {\n                ...mappedEventData,\n                ...mappedSessionData\n            }\n        };\n    }\n    throw new FlexSdkError(ErrorCode.InvalidParams, \"Telemetry event has missing fields\");\n}\n\nexport function toSdkBackendEvents(\n    payloadType: string,\n    groupName?: string,\n    sessionData?: object,\n    ...events: TelemetryEvent[]\n): TelemetryBackendEvent[] {\n    return events.map((event: TelemetryEvent) => {\n        return toBackendEvent(payloadType, event, groupName, sessionData);\n    });\n}\n","import { injectable, inject } from \"inversify\";\nimport { TelemetryProcessor } from \"~/modules/telemetry/TelemetryProcessor/TelemetryProcessor\";\nimport { TelemetryEvent } from \"~/modules/telemetry\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, TelemetryLoggerName } from \"~/modules/logger\";\nimport { toSdkBackendEvents } from \"./toSdkBackendEvent\";\nimport { TelemetryBackendEvent } from \"~/backend/generated/Telemetry/model/telemetryBackendEvent\";\nimport { TelemetryService } from \"~/backend/generated/Telemetry/api/telemetry.serviceInterface\";\nimport { telemetryServiceRTTI } from \"~/backend/backend.rtti\";\n\nconst TELEMETRY_DISABLED_HTTP_STATUS_CODE = 409;\nconst MAX_NUMBER_OF_EVENTS_IN_BATCH = 50;\n\n@injectable()\nexport class TwilioTelemetryProcessor implements TelemetryProcessor {\n    private readonly logger: Logger;\n\n    private readonly telemetryService: TelemetryService;\n\n    private isTelemetryDisabled = false;\n\n    constructor(\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory<TelemetryLoggerName>,\n        @inject(telemetryServiceRTTI) telemetryService: TelemetryService\n    ) {\n        this.logger = getLogger(TelemetryLoggerName.TelemetryProcessor);\n        this.telemetryService = telemetryService;\n    }\n\n    async processEvents(\n        payloadType: string,\n        groupName?: string,\n        sessionData?: object,\n        ...events: TelemetryEvent[]\n    ): Promise<void> {\n        if (this.isTelemetryDisabled) {\n            this.logger.trace(\"Events not sent: telemetry disabled\");\n            return;\n        }\n        this.logger.debug(\"common attributes:\", sessionData);\n        const backendEvents = toSdkBackendEvents(payloadType, groupName, sessionData, ...events);\n\n        if (backendEvents) {\n            let backendEventsBatch;\n            const arrayOfPromises = [];\n            for (let i = 0; i < backendEvents.length; i += MAX_NUMBER_OF_EVENTS_IN_BATCH) {\n                backendEventsBatch = backendEvents.slice(i, i + MAX_NUMBER_OF_EVENTS_IN_BATCH);\n                arrayOfPromises.push(this.sendTelemetryEvents(...backendEventsBatch));\n            }\n            await Promise.all(arrayOfPromises);\n        }\n    }\n\n    private async sendTelemetryEvents(...events: TelemetryBackendEvent[]): Promise<void> {\n        this.logger.debug(\"Sending\", events.length, \"telemetry events\");\n        this.logger.trace(\"Events\", events);\n\n        try {\n            await this.telemetryService.postTelemetryEvents({ events });\n            this.logger.debug(\"Telemetry sent successfully\");\n        } catch (error) {\n            const httpErrorCode = error.source?.status;\n            if (httpErrorCode === TELEMETRY_DISABLED_HTTP_STATUS_CODE) {\n                this.logger.warn(\"Telemetry is disabled for this account\");\n                this.isTelemetryDisabled = true;\n                return;\n            }\n\n            throw error;\n        }\n    }\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    telemetryClientFactoryRTTI,\n    telemetryEventGroupFactoryRTTI,\n    telemetryClientRTTI,\n    telemetryEventGroupRTTI,\n    telemetryProcessorRTTI\n} from \"./telemetry.rtti\";\nimport {\n    createTelemetryClient,\n    TelemetryClient,\n    TelemetryClientFactory,\n    TelemetryEventGroup\n} from \"~/modules/telemetry\";\nimport { TelemetryProcessor } from \"./TelemetryProcessor/TelemetryProcessor\";\nimport { createEventGroup } from \"./TelemetryEventGroupFactory/createEventGroup\";\nimport { TelemetryClientImpl } from \"./TelemetryClient/TelemetryClientImpl/TelemetryClientImpl\";\nimport { TelemetryEventGroupImpl } from \"./TelemetryEventGroup/TelemetryEventGroupImpl/TelemetryEventGroupImpl\";\nimport { TelemetryEventGroupFactory } from \"./TelemetryEventGroupFactory/TelemetryEventGroupFactory\";\nimport { TwilioTelemetryProcessor } from \"./TelemetryProcessor/TwilioEventProcessor/TwilioTelemetryProcessor\";\n\nexport const telemetryModuleContainer = new ContainerModule(<U extends object>(bind: interfaces.Bind) => {\n    bind<TelemetryClientFactory<U>>(telemetryClientFactoryRTTI).toFactory((context: interfaces.Context) => {\n        return (name: string) => {\n            return createTelemetryClient(context.container, name);\n        };\n    });\n\n    bind<TelemetryClient<U>>(telemetryClientRTTI).to(TelemetryClientImpl);\n\n    bind<TelemetryEventGroupFactory<U>>(telemetryEventGroupFactoryRTTI).toFactory((context: interfaces.Context) => {\n        return (telemetryClient: TelemetryClient<object>, name?: string) => {\n            return createEventGroup(context.container, telemetryClient, name);\n        };\n    });\n\n    bind<TelemetryEventGroup<U>>(telemetryEventGroupRTTI).to(TelemetryEventGroupImpl);\n\n    bind<TelemetryProcessor>(telemetryProcessorRTTI).to(TwilioTelemetryProcessor).inSingletonScope();\n});\n","import { interfaces } from \"inversify\";\nimport { telemetryEventGroupRTTI } from \"~/modules/telemetry/telemetry.rtti\";\nimport { TelemetryClient, TelemetryEventGroup } from \"~/modules/telemetry\";\n\nexport function createEventGroup<T>(\n    container: interfaces.Container,\n    telemetryClient: TelemetryClient<object>,\n    name?: string\n): TelemetryEventGroup<T> {\n    const eventGroup = container.get<TelemetryEventGroup<T>>(telemetryEventGroupRTTI);\n    eventGroup.name = name;\n    eventGroup.telemetryClient = telemetryClient;\n    return eventGroup;\n}\n","import { interfaces } from \"inversify\";\nimport { QueueStats } from \"~/modules/stats\";\nimport { NewableQueueStats } from \"~/modules/stats/RealtimeStats/QueueStats/NewableQueueStats\";\nimport { TasksByTimeFactory } from \"~/modules/stats/RealtimeStats/QueueStats/TasksByTimeFactory/TasksByTimeFactory\";\nimport { tasksByTimeFactoryRTTI, newableQueueStatsRTTI } from \"~/modules/stats/stats.rtti\";\nimport { queueStatsServiceRTTI } from \"~/backend/backend.rtti\";\nimport { QueueStatsService } from \"~/backend/generated/RealtimeQueueStats/api/queueStats.serviceInterface\";\nimport { ErrorCode, FlexSdkError } from \"~/errors\";\n\nexport async function getQueueStats(container: interfaces.Container, queueSid: string): Promise<QueueStats> {\n    const getTasksByTime = container.get<TasksByTimeFactory>(tasksByTimeFactoryRTTI);\n    const tasksByTime = getTasksByTime(queueSid);\n\n    const QueueStatsConstructor = container.get<NewableQueueStats>(newableQueueStatsRTTI);\n    const queueStatsService = container.get<QueueStatsService>(queueStatsServiceRTTI);\n\n    try {\n        const metadata = await queueStatsService.getMetadata(queueSid);\n        const instance = new QueueStatsConstructor(queueSid, queueStatsService, tasksByTime, metadata);\n        return instance;\n    } catch (error) {\n        if (error.code === ErrorCode.SyncNameNotFoundError) {\n            throw new FlexSdkError(ErrorCode.NotFound, `Metadata statistics of the queue: ${queueSid}`, error);\n        }\n        throw error;\n    }\n}\n","import { QueueStats, WorkerStats, TaskChannelStats, TasksByTime } from \"~/modules/stats\";\nimport { SyncMapItem, Subscribable, SubscribableOptions } from \"~/modules/sync\";\nimport { QueueStatsService } from \"~/backend/generated/RealtimeQueueStats/api/queueStats.serviceInterface\";\nimport { Metadata } from \"~/backend/generated/RealtimeQueueStats/model/metadata\";\nimport { ErrorCode, FlexSdkError } from \"~/errors\";\n\nexport class QueueStatsImpl implements QueueStats {\n    readonly sid: string;\n\n    readonly friendlyName: string;\n\n    readonly tasks: TasksByTime;\n\n    readonly dateUpdated: Date;\n\n    private readonly queueStatsService: QueueStatsService;\n\n    constructor(\n        queueSid: string,\n        queueStatsService: QueueStatsService,\n        tasksByTime: TasksByTime,\n        metadataMapItem: SyncMapItem<Metadata>\n    ) {\n        this.sid = queueSid;\n        this.queueStatsService = queueStatsService;\n        this.tasks = tasksByTime;\n\n        const metadata = metadataMapItem.getSubscribable();\n        this.friendlyName = metadata.queueFriendlyName || \"\";\n    }\n\n    async getWorkerStats(): Promise<Subscribable<WorkerStats>> {\n        try {\n            const workerStats = await this.queueStatsService.getWorkerStats(this.sid);\n            const subscribableOptions: SubscribableOptions<keyof WorkerStats> = {\n                mapKeysToCamelCase: true,\n                dateFields: [\"timestampUpdated\"]\n            };\n            return workerStats.getSubscribable(subscribableOptions);\n        } catch (error) {\n            if (error.code === ErrorCode.SyncNameNotFoundError) {\n                throw new FlexSdkError(ErrorCode.NotFound, `Worker statistics of the queue: ${this.sid}`, error);\n            }\n            throw error;\n        }\n    }\n\n    async getTaskChannelStats(): Promise<Subscribable<TaskChannelStats>> {\n        return Promise.reject(new Error(\"Not implemented\"));\n    }\n\n    async getAllTaskChannelStats(): Promise<Subscribable<TaskChannelStats>[]> {\n        return Promise.reject(new Error(\"Not implemented\"));\n    }\n}\n","import { assertNotEmptyString } from \"~/utils/assert\";\nimport { Subscribable, SubscribableOptions } from \"~/modules/sync\";\nimport { TasksByTime, CurrentTasksStats, HistoricalTasksStats, TimeSpan } from \"~/modules/stats\";\n\nimport { QueueStatsService } from \"~/backend/generated/RealtimeQueueStats/api/queueStats.serviceInterface\";\nimport { ErrorCode, FlexSdkError } from \"~/errors\";\n\nconst MAP_ITEM_PROPERTY_KEY_QUEUE = \"queue\";\n\nexport class TasksByTimeImpl implements TasksByTime {\n    private readonly queueStatsService: QueueStatsService;\n\n    private readonly queueSid: string;\n\n    constructor(queueSid: string, queueStatsService: QueueStatsService) {\n        this.queueSid = queueSid;\n        this.queueStatsService = queueStatsService;\n    }\n\n    async getCurrentTasks(): Promise<Subscribable<CurrentTasksStats>> {\n        try {\n            const item = await this.queueStatsService.getCurrentTasksStats(this.queueSid);\n            const subscribableOptions: SubscribableOptions<keyof CurrentTasksStats> = {\n                mapKeysToCamelCase: true,\n                dateFields: [\"timestampUpdated\", \"longestTaskWaitingFrom\"]\n            };\n            const subscribable = item.getSubscribableForSubKey(MAP_ITEM_PROPERTY_KEY_QUEUE, subscribableOptions);\n            return subscribable;\n        } catch (error) {\n            if (error.code === ErrorCode.SyncNameNotFoundError) {\n                throw new FlexSdkError(\n                    ErrorCode.NotFound,\n                    `Statistics for current tasks of the queue: ${this.queueSid}`,\n                    error\n                );\n            }\n            throw error;\n        }\n    }\n\n    async getForPeriod(period: TimeSpan): Promise<Subscribable<HistoricalTasksStats>> {\n        assertNotEmptyString(period, \"period\");\n        try {\n            const item = await this.queueStatsService.getHistoricalStats(this.queueSid, period);\n            const subscribableOptions: SubscribableOptions<keyof HistoricalTasksStats> = {\n                mapKeysToCamelCase: true,\n                dateFields: [\"timestampUpdated\"]\n            };\n            const subscribable = item.getSubscribableForSubKey(MAP_ITEM_PROPERTY_KEY_QUEUE, subscribableOptions);\n            return subscribable;\n        } catch (error) {\n            if (error.code === ErrorCode.SyncNameNotFoundError) {\n                throw new FlexSdkError(\n                    ErrorCode.NotFound,\n                    `Historical statistics for the period ${period} of the queue: ${this.queueSid}`,\n                    error\n                );\n            }\n            throw error;\n        }\n    }\n}\n","import { inject, injectable } from \"inversify\";\nimport { QueueStats, RealtimeStats } from \"~/modules/stats\";\nimport { FlexSdkError, ErrorCode } from \"~/errors\";\nimport { queueStatsProviderRTTI } from \"~/modules/stats/stats.rtti\";\nimport { rbacRTTI, Rbac } from \"~/modules/rbac\";\nimport { QueueStatsProvider } from \"~/modules/stats/RealtimeStats/QueueStatsProvider/QueueStatsProvider\";\n\n@injectable()\nexport class RealtimeStatsImpl implements RealtimeStats {\n    private readonly getQueueStats: QueueStatsProvider;\n\n    private readonly rbac: Rbac;\n\n    constructor(@inject(queueStatsProviderRTTI) getQueueStats: QueueStatsProvider, @inject(rbacRTTI) rbac: Rbac) {\n        this.getQueueStats = getQueueStats;\n        this.rbac = rbac;\n    }\n\n    private validatePermissions() {\n        const isSupervisorOrAdmin: boolean = this.rbac.hasRole(\"supervisor\") || this.rbac.hasRole(\"admin\");\n        if (!isSupervisorOrAdmin) {\n            throw new FlexSdkError(ErrorCode.PermissionDeniedError);\n        }\n    }\n\n    async getQueueStatsBySid(queueSid: string): Promise<QueueStats> {\n        this.validatePermissions();\n        const queueStats = await this.getQueueStats(queueSid);\n        return queueStats;\n    }\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    realtimeStatsRTTI,\n    newableTasksByTimeRTTI,\n    newableQueueStatsRTTI,\n    tasksByTimeFactoryRTTI,\n    queueStatsProviderRTTI\n} from \"./stats.rtti\";\n\nimport { NewableQueueStats } from \"./RealtimeStats/QueueStats/NewableQueueStats\";\nimport { QueueStatsProvider } from \"./RealtimeStats/QueueStatsProvider/QueueStatsProvider\";\nimport { getQueueStats } from \"./RealtimeStats/QueueStatsProvider/getQueueStats\";\nimport { QueueStatsImpl } from \"./RealtimeStats/QueueStats/QueueStatsImpl/QueueStatsImpl\";\n\nimport { TasksByTimeImpl } from \"./RealtimeStats/QueueStats/TasksByTime/TasksByTimeImpl\";\nimport { NewableTasksByTime } from \"./RealtimeStats/QueueStats/TasksByTime/NewableTasksByTime\";\nimport { getTasksByTime } from \"./RealtimeStats/QueueStats/TasksByTimeFactory/getTasksByTime\";\nimport { TasksByTimeFactory } from \"./RealtimeStats/QueueStats/TasksByTimeFactory/TasksByTimeFactory\";\n\nimport { RealtimeStats } from \"./RealtimeStats/RealtimeStats\";\nimport { RealtimeStatsImpl } from \"./RealtimeStats/RealtimeStatsImpl\";\n\nexport const statsModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<RealtimeStats>(realtimeStatsRTTI).to(RealtimeStatsImpl).inSingletonScope();\n\n    bind<NewableQueueStats>(newableQueueStatsRTTI).toConstructor(QueueStatsImpl);\n    bind<QueueStatsProvider>(queueStatsProviderRTTI).toProvider((context: interfaces.Context) => {\n        return (queueSid: string) => {\n            return getQueueStats(context.container, queueSid);\n        };\n    });\n\n    bind<NewableTasksByTime>(newableTasksByTimeRTTI).toConstructor(TasksByTimeImpl);\n    bind<TasksByTimeFactory>(tasksByTimeFactoryRTTI).toFactory((context: interfaces.Context) => {\n        return (queueSid: string) => {\n            return getTasksByTime(context.container, queueSid);\n        };\n    });\n});\n","import { interfaces } from \"inversify\";\nimport { NewableTasksByTime } from \"~/modules/stats/RealtimeStats/QueueStats/TasksByTime/NewableTasksByTime\";\nimport { TasksByTime } from \"~/modules/stats\";\nimport { newableTasksByTimeRTTI } from \"~/modules/stats/stats.rtti\";\nimport { queueStatsServiceRTTI } from \"~/backend/backend.rtti\";\nimport { QueueStatsService } from \"~/backend/generated/RealtimeQueueStats/api/queueStats.serviceInterface\";\n\nexport function getTasksByTime(container: interfaces.Container, queueSid: string): TasksByTime {\n    const TaskByTimeConstructor = container.get<NewableTasksByTime>(newableTasksByTimeRTTI);\n    const queueStatsService = container.get<QueueStatsService>(queueStatsServiceRTTI);\n    const instance = new TaskByTimeConstructor(queueSid, queueStatsService);\n    return instance;\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { telemetrySdkClientRTTI } from \"./telemetrySdkClient.rtti\";\nimport { TelemetrySdkClient } from \"./TelemetrySdkClient/TelemetrySdkClient\";\nimport { TelemetrySDKSessionData } from \"./TelemetrySdkClient/TelemetrySDKSessionData\";\nimport { createTelemetryClient } from \"~/modules/telemetry\";\n\nexport const telemetrySdkClientModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<TelemetrySdkClient>(telemetrySdkClientRTTI)\n        .toDynamicValue((context: interfaces.Context) => {\n            return createTelemetryClient<TelemetrySDKSessionData>(context.container, \"sdk-v1\");\n        })\n        .inSingletonScope();\n});\n","import \"reflect-metadata\";\n\nimport { Container } from \"inversify\";\n\nimport { authModuleContainer } from \"./modules/auth/auth.ioc\";\nimport { sessionModuleContainer } from \"./modules/session/session.ioc\";\nimport { clientModuleContainer } from \"./modules/client/client.ioc\";\nimport { eventsModuleContainer } from \"./modules/events/events.ioc\";\nimport { configModuleContainer } from \"./modules/config/config.ioc\";\nimport { websocketModuleContainer } from \"./modules/websocket/websocket.ioc\";\nimport { rbacModuleContainer } from \"./modules/rbac/rbac.ioc\";\nimport { loggerModuleContainer } from \"./modules/logger/logger.ioc\";\nimport { syncModuleContainer } from \"./modules/sync/sync.ioc\";\nimport { telemetryModuleContainer } from \"./modules/telemetry/telemetry.ioc\";\nimport { statsModuleContainer } from \"./modules/stats/stats.ioc\";\nimport { telemetrySdkClientModuleContainer } from \"./modules/telemetrySdkClient/telemetrySdkClient.ioc\";\nimport { withContainer } from \"./backend/openApi.container\";\n\nexport function getContainer(): Container {\n    const container = new Container();\n    container.load(authModuleContainer);\n    container.load(configModuleContainer);\n    container.load(sessionModuleContainer);\n    container.load(clientModuleContainer);\n    container.load(eventsModuleContainer);\n    container.load(websocketModuleContainer);\n    container.load(rbacModuleContainer);\n    container.load(loggerModuleContainer);\n    container.load(syncModuleContainer);\n    container.load(telemetryModuleContainer);\n    container.load(telemetrySdkClientModuleContainer);\n    container.load(statsModuleContainer);\n    withContainer(container);\n    return container;\n}\n","import { interfaces } from \"inversify\";\nimport { ApiServiceBinder as TelemetryBinder } from \"./generated/Telemetry/ApiServiceBinder\";\nimport { ApiServiceBinder as RealtimeQueueStatsBinder } from \"./generated/RealtimeQueueStats/ApiServiceBinder\";\nimport { ApiServiceBinder as ConfigurationServiceBinder } from \"./generated/Configuration/ApiServiceBinder\";\n\nimport { TwilsockAdapter } from \"./TwilsockAdapter/TwilsockAdapter\";\nimport { syncAdapterRTTI, twilsockAdapterRTTI, httpAdapterRTTI } from \"./backend.rtti\";\nimport { SyncAdapter } from \"./SyncAdapter/SyncAdapter\";\nimport { SyncAdapterImpl } from \"./SyncAdapter/SyncAdapterImpl\";\nimport { TwilsockAdapterImpl } from \"./TwilsockAdapter/TwilsockAdapterImpl\";\nimport { HttpAdapter } from \"./HttpAdapter/HttpAdapter\";\nimport { HttpAdapterImpl } from \"./HttpAdapter/HttpAdapterImpl\";\n\nexport function withContainer(container: interfaces.Container) {\n    container.bind<SyncAdapter>(syncAdapterRTTI).to(SyncAdapterImpl).inSingletonScope();\n    container.bind<TwilsockAdapter>(twilsockAdapterRTTI).to(TwilsockAdapterImpl).inSingletonScope();\n    container.bind<HttpAdapter>(httpAdapterRTTI).to(HttpAdapterImpl).inSingletonScope();\n\n    TelemetryBinder.with(container);\n    RealtimeQueueStatsBinder.with(container);\n    ConfigurationServiceBinder.with(container);\n}\n","module.exports = require(\"reflect-metadata\");","module.exports = require(\"core-js/modules/es.reflect.get\");","module.exports = require(\"core-js/modules/es.array.find\");","module.exports = require(\"core-js/modules/es.number.constructor\");","module.exports = require(\"core-js/modules/es.number.is-nan\");","module.exports = require(\"core-js/modules/es.weak-map\");","module.exports = require(\"core-js/modules/es.string.ends-with\");","module.exports = require(\"core-js/modules/es.string.match\");","module.exports = require(\"core-js/modules/es.array.splice\");","module.exports = require(\"core-js/modules/es.object.assign\");","module.exports = require(\"core-js/modules/es.object.entries\");","module.exports = require(\"core-js/modules/es.regexp.constructor\");","module.exports = require(\"core-js/modules/es.string.split\");","module.exports = require(\"core-js/modules/es.string.starts-with\");","import { injectable } from \"inversify\";\nimport { AccountConfigKeys, AccountConfigData, AccountConfig } from \"~/modules/config\";\n\n@injectable()\nexport class AccountConfigMock implements AccountConfig {\n    private accountConfigData: AccountConfigData;\n\n    get<K extends AccountConfigKeys>(key: K): AccountConfigData[K] {\n        return this.accountConfigData[key];\n    }\n\n    set(values: Partial<AccountConfigData>): Promise<void> {\n        this.accountConfigData = { ...this.accountConfigData, ...values };\n        return Promise.resolve();\n    }\n\n    $set<K extends AccountConfigKeys>(key: K, value: AccountConfigData[K]) {\n        this.$setAccountConfigData({ [key]: value });\n    }\n\n    $setAccountConfigData(accountConfigData: Partial<AccountConfigData>) {\n        this.accountConfigData = { ...this.accountConfigData, ...accountConfigData };\n    }\n}\n","import { injectable, inject, postConstruct, optional } from \"inversify\";\nimport { Authenticator, IdpConfig, TokenData } from \"~/modules/auth\";\n\nimport { authenticatorMockOptionsRTTI } from \"~/modules/auth/auth.rtti\";\nimport { AuthenticatorMockOptions } from \"./AuthenticatorMockOptions\";\n\n\n\n\n@injectable()\nexport class AuthenticatorMock implements Authenticator {\n    private readonly mockOptions: AuthenticatorMockOptions;\n\n    private $idpUrl: string;\n\n    constructor(@inject(authenticatorMockOptionsRTTI) @optional() mockOptions: AuthenticatorMockOptions) {\n        this.mockOptions = mockOptions;\n    }\n\n    @postConstruct()\n    private onAuthenticatorConstructed() {\n        const onConstructed = this.mockOptions?.authenticatorConstructed;\n        if (onConstructed) {\n            onConstructed(this);\n        }\n    }\n\n    validateToken = jest.fn(\n        (): Promise<TokenData> => {\n            return Promise.resolve({\n                roles: [\"agent\"],\n                valid: true\n            });\n        }\n    );\n\n    refreshToken = jest.fn((token: string) => {\n        const mockToken = this.mockOptions?.refreshedToken || `token ${token}`;\n        return Promise.resolve(mockToken);\n    });\n\n    getIdpUrl = jest.fn((config: IdpConfig) => {\n        const url = this.$idpUrl || `idp ${config.redirectUrl}`;\n        return Promise.resolve(url);\n    });\n\n    setAccountSid = jest.fn();\n\n    $setIdpUrl(url: string) {\n        this.$idpUrl = url;\n    }\n}\n","import { injectable } from \"inversify\";\nimport { AuthenticatorDataContainer } from \"./AuthenticatorDataContainer\";\n\n@injectable()\nexport class AuthenticatorDataContainerMock implements AuthenticatorDataContainer {\n    private _accountSid: string;\n\n    constructor() {\n        this._accountSid = \"ACXABC\";\n    }\n\n    get accountSid(): string {\n        return this._accountSid;\n    }\n\n    set accountSid(accountSid: string) {\n        this._accountSid = accountSid;\n    }\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    authenticatorRTTI,\n    authenticatorFactoryRTTI,\n    twilioIdpUrlRTTI,\n    authenticatorDataContainerRTTI\n} from \"./auth.rtti\";\nimport { AuthenticatorMock } from \"./Authenticator/AuthenticatorMock/AuthenticatorMock\";\nimport { createAuthenticatorMock } from \"./AuthenticatorFactory/createAuthenticatorMock/createAuthenticatorMock\";\nimport { AuthenticatorMockFactory } from \"./AuthenticatorFactory/createAuthenticatorMock/AuthenticatorMockFactory\";\nimport { TwilioIdpUrlFunction } from \"./TwilioIdpUrlFunction/TwilioIdpUrl\";\nimport { getTwilioIdpUrlMock } from \"./TwilioIdpUrlFunction/TwilioIdpUrlMock/getTwilioIdpUrlMock\";\nimport { AuthenticatorDataContainer } from \"./AuthenticatorDataContainer/AuthenticatorDataContainer\";\nimport { AuthenticatorDataContainerMock } from \"./AuthenticatorDataContainer/AuthenticatorDataContainer.mock\";\n\nexport const authModuleContainerMock = new ContainerModule((bind: interfaces.Bind) => {\n    bind<AuthenticatorMock>(authenticatorRTTI).to(AuthenticatorMock).inSingletonScope();\n    bind<AuthenticatorDataContainer>(authenticatorDataContainerRTTI)\n        .to(AuthenticatorDataContainerMock)\n        .inSingletonScope();\n    bind<AuthenticatorMockFactory>(authenticatorFactoryRTTI).toFactory<AuthenticatorMock>(\n        (context: interfaces.Context) => {\n            return () => {\n                return createAuthenticatorMock(context.container);\n            };\n        }\n    );\n    bind<TwilioIdpUrlFunction>(twilioIdpUrlRTTI).toDynamicValue((context: interfaces.Context) => {\n        return (port?: string) => {\n            return getTwilioIdpUrlMock(context.container, port);\n        };\n    });\n});\n","import { interfaces } from \"inversify\";\nimport { authenticatorRTTI } from \"~/modules/auth\";\nimport { AuthenticatorMock } from \"~/modules/auth/mock\";\n\nexport function createAuthenticatorMock(container: interfaces.Container): AuthenticatorMock {\n    const auth = container.get<AuthenticatorMock>(authenticatorRTTI);\n    return auth;\n}\n","import { interfaces } from \"inversify\";\nimport { environmentConfigRTTI, EnvironmentConfig } from \"~/modules/config\";\nimport { twilioIdpUrlMockOptionsRTTI, TwilioIdpUrlMockOptions } from \"~/modules/auth/mock\";\n\nexport function getTwilioIdpUrlMock(container: interfaces.Container, port?: string): string {\n    const envConfig = container.get<EnvironmentConfig>(environmentConfigRTTI);\n\n    let twilioServiceLoginUrl = envConfig.twilioServiceLoginUrl;\n\n    const hasMockOptions = container.isBound(twilioIdpUrlMockOptionsRTTI);\n    if (hasMockOptions) {\n        const mockOptions = container.get<TwilioIdpUrlMockOptions>(twilioIdpUrlMockOptionsRTTI);\n        if (mockOptions && mockOptions.twilioIdpUrl) {\n            twilioServiceLoginUrl = mockOptions.twilioIdpUrl;\n        }\n    }\n\n    return port ? `${twilioServiceLoginUrl}?localPort=${port}` : twilioServiceLoginUrl;\n}\n","import { injectable, inject } from \"inversify\";\nimport { Session } from \"~/modules/session\";\nimport { Authenticator, authenticatorRTTI, Role } from \"~/modules/auth\";\nimport { Twilsock, twilsockRTTI } from \"~/modules/websocket\";\n\n@injectable()\nexport class SessionMock implements Session {\n    public token: string = \"token\";\n\n    private readonly auth: Authenticator;\n\n    private readonly connection: Twilsock;\n\n    public roles: Array<Role> = [];\n\n    constructor(@inject(authenticatorRTTI) auth: Authenticator, @inject(twilsockRTTI) connection: Twilsock) {\n        this.auth = auth;\n        this.connection = connection;\n    }\n\n    init = jest.fn((token: string) => {\n        this.token = token;\n        return Promise.resolve();\n    });\n\n    updateToken = jest.fn(() => {\n        return Promise.resolve();\n    });\n\n    destroy = jest.fn(() => Promise.resolve());\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { sessionRTTI, sessionSettingsRTTI } from \"./session.rtti\";\nimport { Session, SessionSettings } from \"./Session/Session\";\nimport { SessionMock } from \"./Session/Session.mock\";\nimport { getDefaultSessionSettings } from \"./SessionSettings/defaultSessionSettings\";\n\nexport const sessionModuleContainerMock = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Session>(sessionRTTI).to(SessionMock).inSingletonScope();\n\n    bind<SessionSettings>(sessionSettingsRTTI).toConstantValue(getDefaultSessionSettings());\n});\n","import { injectable, inject, optional } from \"inversify\";\nimport { Client, ClientConfigType, ClientEvent } from \"~/modules/client\";\nimport { Role } from \"~/modules/auth\";\nimport { Session, sessionRTTI } from \"~/modules/session\";\nimport { EventPublisher } from \"~/modules/events\";\nimport { AccountConfig, accountConfigRTTI } from \"~/modules/config\";\nimport { ClientMockOptions } from \"./ClientMockOptions\";\nimport { clientMockOptionsRTTI } from \"~/modules/client/mock\";\nimport { RealtimeStats, realtimeStatsRTTI } from \"~/modules/stats\";\n\n@injectable()\nexport class ClientMock extends EventPublisher<ClientEvent> implements Client {\n    private readonly session: Session;\n\n    public readonly config: ClientConfigType;\n\n    public roles: Array<Role> = [];\n\n    public token: string = \"custom token\";\n\n    public readonly realtimeStats: RealtimeStats;\n\n    constructor(\n        @inject(sessionRTTI) session: Session,\n        @inject(accountConfigRTTI) accountConfig: AccountConfig,\n        @inject(realtimeStatsRTTI) realtimeStats: RealtimeStats,\n        @inject(clientMockOptionsRTTI) @optional() mockOptions: ClientMockOptions\n    ) {\n        super();\n        this.session = session;\n        this.config = {\n            account: accountConfig\n        };\n        if (mockOptions && mockOptions.accountConfig) {\n            this.config = {\n                account: mockOptions.accountConfig\n            };\n        }\n        this.realtimeStats = realtimeStats;\n    }\n\n    init = jest.fn((token: string) => {\n        this.token = token;\n        return Promise.resolve();\n    });\n\n    updateToken = jest.fn(async (token: string) => {\n        await this.session.updateToken(token);\n        this.token = token;\n    });\n\n    destroy = jest.fn();\n\n    createTelemetryClient = jest.fn();\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { clientRTTI, clientProviderRTTI, clientSettingsRTTI } from \"./client.rtti\";\nimport { Client, ClientSettings, ClientUserSettings, ClientProvider } from \"~/modules/client\";\nimport { ClientMock } from \"./Client/ClientMock/Client.mock\";\nimport { createClient } from \"./ClientProvider/createClient\";\nimport { ClientSettingsStore } from \"./ClientSettings/ClientSettingsStore\";\n\nexport const clientModuleContainerMock = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Client>(clientRTTI).to(ClientMock).inSingletonScope();\n    bind<ClientProvider>(clientProviderRTTI).toProvider<Client>((context: interfaces.Context) => {\n        return (token: string, userSettings?: ClientUserSettings) => {\n            return createClient(context.container, token, userSettings);\n        };\n    });\n    bind<ClientSettings>(clientSettingsRTTI).to(ClientSettingsStore).inSingletonScope();\n});\n","import { EventEmitter } from \"events\";\nimport { ContainerModule, interfaces } from \"inversify\";\nimport { eventEmitterRTTI } from \"./events.rtti\";\nimport { Emitter } from \"./EventPublisher/Emitter\";\n\nexport const eventsModuleContainerMock = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Emitter>(eventEmitterRTTI).toDynamicValue(() => new EventEmitter());\n});\n","import { EnvironmentConfig } from \"~/modules/config\";\n\nexport const environmentConfigMock: EnvironmentConfig = {\n    authServiceUrl: \"authServiceUrl\",\n    twilioServiceLoginUrl: \"twilioServiceLoginUrl\"\n};\n","import { interfaces } from \"inversify\";\nimport { AccountSidOption, RuntimeDomainOption, PublicConfig } from \"~/modules/config\";\nimport { PublicConfigMockOptions, publicConfigMockOptionsRTTI } from \"~/modules/config/mock\";\nimport { XOR } from \"~/utils/utilityTypes\";\n\nexport async function getPublicConfigMock(\n    container: interfaces.Container,\n    \n    option: XOR<AccountSidOption, RuntimeDomainOption> \n): Promise<PublicConfig> {\n    let mockPublicConfig: PublicConfig = {\n        runtimeDomain: \"runtimeDomain\",\n        accountSid: \"accountSid\",\n        publicAttributes: { loginPopup: true }\n    };\n\n    const hasMockOptions = container.isBound(publicConfigMockOptionsRTTI);\n    if (hasMockOptions) {\n        const mockOptions = container.get<PublicConfigMockOptions>(publicConfigMockOptionsRTTI);\n        if (mockOptions && mockOptions.publicConfig) {\n            mockPublicConfig = mockOptions.publicConfig;\n        }\n    }\n\n    return Promise.resolve(mockPublicConfig);\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    AccountConfig,\n    AccountConfigProvider,\n    AccountConfigData,\n    PublicConfigProvider,\n    PublicConfig,\n    RuntimeDomainOption,\n    EnvironmentConfig,\n    AccountSidOption,\n    accountConfigRTTI,\n    environmentConfigRTTI,\n    accountConfigProviderRTTI,\n    publicConfigProviderRTTI,\n    configDataContainerRTTI\n} from \"~/modules/config\";\nimport { AccountConfigMock } from \"~/modules/config/mock\";\nimport { accountConfigUpdaterRTTI } from \"./config.rtti\";\nimport { environmentConfigMock } from \"./EnvironmentConfig/EnvironmentConfig.mock\";\nimport { AccountConfigUpdater } from \"./AccountConfig/AccountConfigUpdater\";\nimport { ConfigDataContainer } from \"./AccountConfig/ConfigDataContainer\";\nimport { getPublicConfigMock } from \"./PublicConfigProvider/PublicConfigProvideMock/getPublicConfigMock\";\nimport { XOR } from \"~/utils/utilityTypes\";\nimport { AccountConfigDataContainer } from \"./AccountConfig/AccountConfigImpl/AccountConfigDataContainer/AccountConfigDataContainer\";\n\nexport const configModuleContainerMock = new ContainerModule((bind: interfaces.Bind) => {\n    bind<AccountConfig>(accountConfigRTTI).to(AccountConfigMock).inSingletonScope();\n    bind<ConfigDataContainer<AccountConfigData>>(configDataContainerRTTI)\n        .to(AccountConfigDataContainer)\n        .inSingletonScope();\n    bind<AccountConfigProvider>(accountConfigProviderRTTI).toProvider<AccountConfig>((context: interfaces.Context) => {\n        return () => {\n            const accountConfig = context.container.get<AccountConfig>(accountConfigRTTI);\n            return Promise.resolve(accountConfig);\n        };\n    });\n    bind<AccountConfigUpdater>(accountConfigUpdaterRTTI).toDynamicValue((context: interfaces.Context) => {\n        return (_: string, config: Partial<AccountConfigData>) => {\n            const currentConfig = context.container\n                .get<ConfigDataContainer<AccountConfigData>>(configDataContainerRTTI)\n                .get();\n            const newConfig = { ...currentConfig, ...config };\n            return Promise.resolve(newConfig);\n        };\n    });\n    bind<EnvironmentConfig>(environmentConfigRTTI).toConstantValue(environmentConfigMock);\n    bind<PublicConfigProvider>(publicConfigProviderRTTI).toProvider<PublicConfig>((context: interfaces.Context) => {\n        return (option: XOR<AccountSidOption, RuntimeDomainOption>) => getPublicConfigMock(context.container, option);\n    });\n});\n","import { inject } from \"inversify\";\nimport { TwilsockClient } from \"twilsock\";\nimport { EventPublisher } from \"~/modules/events\";\nimport { Twilsock } from \"./Twilsock\";\nimport { TwilsockEvent } from \"./TwilsockEvent\";\nimport { newableTwilsockClientRTTI } from \"~/modules/websocket/websocket.rtti\";\nimport { NewableTwilsockClient } from \"~/modules/websocket/TwilsockClient/TwilsockClient\";\n\nexport class TwilsockMock extends EventPublisher<TwilsockEvent> implements Twilsock {\n    private readonly NewableTwilsockClient: NewableTwilsockClient;\n\n    private twilsockClient: TwilsockClient;\n\n    constructor(@inject(newableTwilsockClientRTTI) newableTwilsockClient: NewableTwilsockClient) {\n        super();\n        this.NewableTwilsockClient = newableTwilsockClient;\n    }\n\n    connect = jest.fn(() => {\n        return Promise.resolve();\n    });\n\n    destroy = jest.fn(() => {\n        this.$emit(TwilsockEvent.Disconnected);\n        this.removeAllListeners();\n        return Promise.resolve();\n    });\n\n    updateToken = jest.fn(() => {\n        return Promise.resolve();\n    });\n\n    getRawTwilsockClient = jest.fn(() => {\n        if (!this.twilsockClient) {\n            this.twilsockClient = new this.NewableTwilsockClient(\"token\", \"productID\");\n        }\n        return this.twilsockClient;\n    });\n\n    $emit(event: TwilsockEvent, ...args: unknown[]): boolean {\n        return super.emit(event, ...args);\n    }\n\n    post = jest.fn(() => {\n        return Promise.resolve({\n            status: {\n                code: 204,\n                status: \"No content\"\n            },\n            headers: {}\n        });\n    });\n}\n","import { EventEmitter } from \"events\";\n\nexport const { TwilsockClient: TwilsockClientMock } = jest.genMockFromModule(\"twilsock\");\n\nTwilsockClientMock.prototype.connect.mockImplementation();\nTwilsockClientMock.prototype.on.mockImplementation(EventEmitter.prototype.on);\nTwilsockClientMock.prototype.emit.mockImplementation(EventEmitter.prototype.emit);\nObject.defineProperty(TwilsockClientMock.prototype, \"isConnected\", {\n    value: false,\n    writable: true\n});\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { newableTwilsockClientRTTI, twilsockRTTI, productIdRTTI } from \"./websocket.rtti\";\nimport { Twilsock } from \"./Twilsock/Twilsock\";\nimport { TwilsockMock } from \"./Twilsock/Twilsock.mock\";\nimport { NewableTwilsockClient } from \"./TwilsockClient/TwilsockClient\";\nimport { TwilsockClientMock } from \"./TwilsockClient/TwilsockClient.mock\";\n\nexport const websocketModuleContainerMock = new ContainerModule((bind: interfaces.Bind) => {\n    bind<NewableTwilsockClient>(newableTwilsockClientRTTI).toConstructor(TwilsockClientMock);\n    bind<string>(productIdRTTI).toConstantValue(\"TEST_PRODUCT\");\n    bind<Twilsock>(twilsockRTTI).to(TwilsockMock).inSingletonScope();\n});\n","import { injectable } from \"inversify\";\nimport { Logger, LoggerLevelNumbers, Loglevel, LoggerLevel } from \"~/modules/logger\";\n\n@injectable()\nexport class LoggerImplMock implements Logger {\n    private readonly loglevel: Loglevel;\n\n    constructor(loglevel: Loglevel) {\n        this.loglevel = loglevel;\n    }\n\n    level: LoggerLevelNumbers = 1;\n\n    trace = jest.fn();\n\n    debug = jest.fn();\n\n    log = jest.fn();\n\n    info = jest.fn();\n\n    warn = jest.fn();\n\n    error = jest.fn();\n\n    setLevel = (level: LoggerLevel) => {\n        this.loglevel.setLevel(level);\n    };\n\n    getLevel = (): LoggerLevelNumbers => {\n        return this.loglevel.getLevel();\n    };\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { getLogger as getLoglevel } from \"loglevel\";\nimport { getLogger } from \"./LoggerFactory/getLogger\";\nimport { Logger, NewableLogger, LoggerSettings } from \"./Logger/Logger\";\nimport {\n    newableLoggerRTTI,\n    defaultPluginsRTTI,\n    loggerFactoryRTTI,\n    loglevelFactoryRTTI,\n    loggerSettingsRTTI,\n    loggerInstancesRTTI\n} from \"./logger.rtti\";\nimport { LoggerPlugin, LoglevelFactory, LoggerInstances } from \"./LoggerFactory/LoggerFactory\";\nimport { LoggerImplMock } from \"./Logger/LoggerMock/Logger.mock\";\nimport { getDefaultLoggerSettings } from \"./DefaultLoggerLevel/defaultLoggerLevel\";\n\nexport const loggerModuleContainerMock = new ContainerModule((bind: interfaces.Bind) => {\n    bind<LoglevelFactory>(loglevelFactoryRTTI).toConstantValue(getLoglevel);\n    bind<interfaces.Factory<Logger>>(loggerFactoryRTTI).toFactory<Logger>((context: interfaces.Context) =>\n        getLogger(context.container)\n    );\n    bind<NewableLogger>(newableLoggerRTTI).toConstructor(LoggerImplMock);\n    bind<LoggerPlugin[]>(defaultPluginsRTTI).toConstantValue([]);\n    bind<LoggerSettings>(loggerSettingsRTTI).toConstantValue(getDefaultLoggerSettings());\n    bind<LoggerInstances>(loggerInstancesRTTI).toConstantValue(new Map());\n});\n","import { EventEmitter } from \"events\";\nimport { SyncClientState, SyncClient, SyncClientEvent } from \"./SyncClient\";\n\nconst { SyncClient: SyncClientMock } = jest.genMockFromModule(\"twilio-sync\");\n\nSyncClientMock.prototype.on.mockImplementation(EventEmitter.prototype.on);\nSyncClientMock.prototype.emit.mockImplementation(EventEmitter.prototype.emit);\nSyncClientMock.prototype.shutdown.mockImplementation();\nObject.defineProperty(SyncClientMock.prototype, \"connectionState\", {\n    value: SyncClientState.Disconnected,\n    writable: true\n});\n\nconst $setConnectionState = (state: SyncClientState) => {\n    SyncClientMock.prototype.connectionState = state;\n};\n\nconst $getEventEmitHandler = (newState: SyncClientState) => {\n    const mockedHandler = {\n        apply: (target: Function, thisArg: SyncClient, argumentsList: [string]) => {\n            target.call(thisArg, ...argumentsList);\n            if (argumentsList[0] === SyncClientEvent.ConnectionStateChanged) {\n                thisArg.emit(argumentsList[0], newState);\n            }\n        }\n    };\n    return mockedHandler;\n};\n\nexport { $setConnectionState, $getEventEmitHandler, SyncClientMock };\n","import { SyncMapItem, Subscribable } from \"~/modules/sync\";\nimport { InternalError } from \"~/errors\";\nimport { createSubscribable } from \"~/modules/sync/Subscribable/createSubscribable\";\n\nexport class SyncMapItemMock<T extends object = object> implements SyncMapItem<T> {\n    \n    constructor(key: string, value?: T) {\n        this.key = key;\n        this.value = value || ({} as T);\n    }\n\n    private updateHandler?: Function;\n\n    readonly key: string;\n\n    value: object;\n\n    private readonly subscribableOptions = {\n        mapKeysToCamelCase: true,\n        dateFields: [\"timestampUpdated\"]\n    };\n\n    getSubscribable = jest.fn(() => {\n        return createSubscribable(this.value, this.subscribableOptions, this.subscribe, this.unsubscribe);\n    });\n\n    getSubscribableForSubKey = jest.fn(\n        <K extends keyof T>(subKey: K): Subscribable<T[K]> => {\n            \n            \n            const subValue = this.value[subKey];\n            if (typeof subValue === \"undefined\") {\n                throw new InternalError(`Key ${subKey} does not exist in item ${this.key}`);\n            }\n            \n            const mappedValue = createSubscribable<T[K]>(\n                subValue,\n                this.subscribableOptions,\n                this.subscribe,\n                this.unsubscribe\n            );\n            return mappedValue;\n        }\n    );\n\n    subscribe = jest.fn((cb) => {\n        this.updateHandler = cb;\n    });\n\n    unsubscribe = jest.fn(() => {\n        this.updateHandler = undefined;\n    });\n\n    $update = jest.fn((newValue) => {\n        this.value = newValue;\n        if (this.updateHandler) {\n            this.updateHandler();\n        }\n    });\n}\n","import { SyncMap } from \"~/modules/sync\";\nimport { SyncMapItemMock } from \"~/modules/sync/SyncMapItem/SyncMapItem.mock\";\nimport { FlexSdkError, ErrorCode } from \"~/errors\";\n\nexport class SyncMapMock implements SyncMap {\n    private readonly items: Map<string, SyncMapItemMock> = new Map();\n\n    uniqueName: string;\n\n    sid: string;\n\n    dateUpdated: Date;\n\n    get = jest.fn((key: string) => {\n        const item = this.items.get(key);\n        if (!item) {\n            return Promise.reject(new FlexSdkError(ErrorCode.SyncMapItemNotFoundError));\n        }\n\n        return Promise.resolve(item);\n    });\n\n    on = jest.fn();\n\n    removeListener = jest.fn();\n\n    $add<T extends object = object>(item: SyncMapItemMock<T>): void {\n        const existingItem = this.items.get(item.key);\n\n        if (existingItem) {\n            existingItem.$update(item.value);\n        } else {\n            this.items.set(item.key, item);\n        }\n    }\n\n    $createEmptyItem(key: string): SyncMapItemMock {\n        const item = new SyncMapItemMock(key);\n        this.items.set(key, item);\n        return item;\n    }\n}\n","import { injectable } from \"inversify\";\nimport { EventPublisher } from \"~/modules/events\";\nimport { Sync, SyncEvent } from \"~/modules/sync\";\nimport { SyncMapMock } from \"~/modules/sync/SyncMap/SyncMap.mock\";\nimport { MapMode } from \"~/modules/sync/Sync/MapMode\";\nimport { FlexSdkError, ErrorCode } from \"~/errors\";\n\n@injectable()\nexport class SyncMock extends EventPublisher<SyncEvent> implements Sync {\n    private readonly maps = new Map<string, SyncMapMock>();\n\n    isConnected = jest.fn(() => false);\n\n    connect = jest.fn(() => {\n        return Promise.resolve();\n    });\n\n    \n    getMapById = jest.fn((mapId: string, mapMode: MapMode = MapMode.OpenExisting) => {\n        let map = this.maps.get(mapId);\n        if (!map) {\n            if (mapMode === MapMode.OpenExisting) {\n                return Promise.reject(\n                    new FlexSdkError(\n                        ErrorCode.SyncNameNotFoundError,\n                        \"Unique name not found (status: 404, code: 54300)\"\n                    )\n                );\n            }\n\n            map = new SyncMapMock();\n            map.sid = mapId;\n            map.dateUpdated = new Date();\n            this.maps.set(mapId, map);\n        }\n\n        return Promise.resolve(map);\n    });\n\n    destroy = jest.fn(() => {\n        return new Promise<void>((resolve) => {\n            this.emit(SyncEvent.Destroyed);\n            resolve();\n        });\n    });\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { newableSyncClientRTTI, syncRTTI } from \"./sync.rtti\";\nimport { NewableSyncClient } from \"./SyncClient/SyncClient\";\nimport { Sync } from \"./Sync/Sync\";\nimport { SyncClientMock } from \"./SyncClient/SyncClient.mock\";\nimport { SyncMock } from \"./Sync/Sync.mock\";\n\nexport const syncModuleContainerMock = new ContainerModule((bind: interfaces.Bind) => {\n    bind<NewableSyncClient>(newableSyncClientRTTI).toConstructor(SyncClientMock);\n    bind<Sync>(syncRTTI).to(SyncMock);\n});\n","import { interfaces } from \"inversify\";\nimport { telemetryClientRTTI } from \"~/modules/telemetry\";\nimport { TelemetryClientMock } from \"./TelemetryClient.mock\";\n\nexport function createTelemetryClientMock<U extends object>(\n    container: interfaces.Container,\n    name: string\n): TelemetryClientMock<U> {\n    const telemetryClient = container.get<TelemetryClientMock<U>>(telemetryClientRTTI);\n    telemetryClient.name = name;\n    return telemetryClient;\n}\n","import { injectable, inject } from \"inversify\";\nimport { TelemetryEventGroup, TelemetryClient } from \"~/modules/telemetry\";\nimport { TelemetryEventGroupFactory } from \"~/modules/telemetry/TelemetryEventGroupFactory/TelemetryEventGroupFactory\";\nimport { telemetryEventGroupFactoryRTTI } from \"~/modules/telemetry/telemetry.rtti\";\n\n@injectable()\nexport class TelemetryClientMock<U extends object> implements TelemetryClient<U> {\n    name: string;\n\n    sessionData?: U;\n\n    private readonly eventGroupFactory: TelemetryEventGroupFactory<unknown>;\n\n    constructor(@inject(telemetryEventGroupFactoryRTTI) eventGroupFactory: TelemetryEventGroupFactory<U>) {\n        this.eventGroupFactory = eventGroupFactory;\n    }\n\n    createEventGroup = jest.fn(\n        <T>(name?: string): TelemetryEventGroup<T> => {\n            const eventGroup = this.eventGroupFactory(this, name);\n            return eventGroup;\n        }\n    );\n\n    setSessionData = jest.fn(\n        (sessionData: U): Promise<void> => {\n            this.sessionData = sessionData;\n            return Promise.resolve();\n        }\n    );\n}\n","import { injectable } from \"inversify\";\nimport { TelemetryClient, TelemetryErrorEvent, TelemetryEvent, TelemetryEventGroup } from \"~/modules/telemetry\";\n\n@injectable()\nexport class TelemetryEventGroupMock<T> implements TelemetryEventGroup<T> {\n    name?: string;\n\n    telemetryClient: TelemetryClient<object>;\n\n    events: TelemetryEvent[] = [];\n\n    addEvents = jest.fn((...events: (T & TelemetryEvent)[]) => {\n        this.events.push(...events);\n        return Promise.resolve();\n    });\n\n    addErrorEvent = jest.fn((errorEvent: TelemetryErrorEvent) => {\n        this.events.push(errorEvent);\n        return Promise.resolve();\n    });\n\n    $setName(name: string): void {\n        this.name = name;\n    }\n}\n","import { injectable, inject } from \"inversify\";\nimport { TelemetryEvent } from \"~/modules/telemetry\";\nimport { TelemetryProcessor } from \"~/modules/telemetry/TelemetryProcessor/TelemetryProcessor\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, TelemetryLoggerName } from \"~/modules/logger\";\n\n@injectable()\nexport class TelemetryProcessorMock implements TelemetryProcessor {\n    private readonly logger: Logger;\n\n    constructor(@inject(loggerFactoryRTTI) getLogger: LoggerFactory<TelemetryLoggerName>) {\n        this.logger = getLogger(TelemetryLoggerName.TelemetryProcessor);\n    }\n\n    processEvents = jest.fn(\n        (groupName: string, payloadType: string, sessionData?: object, ...events: TelemetryEvent[]) => {\n            this.logger.debug(\"common attributes: \", sessionData);\n            events.forEach((event) =>\n                this.logger.log(\"sending event for group: \", groupName, \"payload type\", payloadType, event.eventName)\n            );\n            return Promise.resolve();\n        }\n    );\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { telemetryEventGroupFactoryRTTI, telemetryProcessorRTTI } from \"./telemetry.rtti\";\nimport { TelemetryClientMock, createTelemetryClientMock, TelemetryEventGroupMock } from \"./mock\";\nimport { TelemetryProcessorMock } from \"./TelemetryProcessor/TelemetryProcessorMock/TelemetryProcessor.mock\";\nimport { createEventGroupMock } from \"./TelemetryEventGroup/TelemetryEventGroupMock/createEventGroup.mock\";\nimport {\n    TelemetryClientFactory,\n    TelemetryClient,\n    TelemetryEventGroup,\n    telemetryEventGroupRTTI,\n    telemetryClientFactoryRTTI,\n    telemetryClientRTTI\n} from \"~/modules/telemetry\";\nimport { TelemetryProcessor } from \"./TelemetryProcessor/TelemetryProcessor\";\nimport { TelemetryEventGroupFactory } from \"./TelemetryEventGroupFactory/TelemetryEventGroupFactory\";\n\nexport const telemetryModuleContainerMock = new ContainerModule(<U extends object>(bind: interfaces.Bind) => {\n    bind<TelemetryClientFactory<U>>(telemetryClientFactoryRTTI).toFactory((context: interfaces.Context) => {\n        return (name: string) => {\n            return createTelemetryClientMock(context.container, name);\n        };\n    });\n\n    bind<TelemetryClient<U>>(telemetryClientRTTI).to(TelemetryClientMock).inSingletonScope();\n\n    bind<TelemetryEventGroupFactory<U>>(telemetryEventGroupFactoryRTTI).toFactory((context: interfaces.Context) => {\n        return (telemetryClientAttributes: TelemetryClient<object>, name?: string) => {\n            return createEventGroupMock(context.container, name);\n        };\n    });\n\n    bind<TelemetryEventGroup<U>>(telemetryEventGroupRTTI).to(TelemetryEventGroupMock);\n\n    bind<TelemetryProcessor>(telemetryProcessorRTTI).to(TelemetryProcessorMock).inSingletonScope();\n});\n","import { interfaces } from \"inversify\";\nimport { telemetryEventGroupRTTI } from \"~/modules/telemetry\";\nimport { TelemetryEventGroupMock } from \"~/modules/telemetry/mock\";\n\nexport function createEventGroupMock<T>(container: interfaces.Container, name?: string): TelemetryEventGroupMock<T> {\n    const eventGroup = container.get<TelemetryEventGroupMock<T>>(telemetryEventGroupRTTI);\n    eventGroup.name = name;\n    return eventGroup;\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { telemetrySdkClientRTTI } from \"./telemetrySdkClient.rtti\";\nimport { TelemetrySdkClient } from \"./TelemetrySdkClient/TelemetrySdkClient\";\nimport { TelemetrySDKSessionData } from \"~/modules/telemetrySdkClient/TelemetrySdkClient/TelemetrySDKSessionData\";\nimport { createTelemetryClientMock } from \"~/modules/telemetry/mock\";\n\nexport const telemetrySdkClientModuleContainerMock = new ContainerModule((bind: interfaces.Bind) => {\n    bind<TelemetrySdkClient>(telemetrySdkClientRTTI)\n        .toDynamicValue((context: interfaces.Context) => {\n            return createTelemetryClientMock<TelemetrySDKSessionData>(context.container, \"sdk-v1\");\n        })\n        .inSingletonScope();\n});\n","import { injectable } from \"inversify\";\nimport { CurrentTasksStats, TasksByTime, HistoricalTasksStats } from \"~/modules/stats\";\nimport { SubscribableMock } from \"~/modules/sync/mock\";\n\n@injectable()\nexport class TasksByTimeMock implements TasksByTime {\n    getCurrentTasks = jest.fn<Promise<SubscribableMock<CurrentTasksStats>>, unknown[]>().mockResolvedValue({\n        subscribe: jest.fn(),\n        unsubscribe: jest.fn(),\n        activeTasks: 3,\n        waitingTasks: 2,\n        reservedTasks: 1,\n        pendingTasks: 1,\n        assignedTasks: 3,\n        wrappingTasks: 0,\n        totalTasks: 5,\n        longestTaskWaitingSid: \"WT_longest_sid\",\n        longestTaskWaitingFrom: new Date(),\n        longestTaskWaitingAge: 0,\n        tasksByPriority: {\n            \"1\": 5,\n            \"2\": 4\n        },\n        timestampUpdated: new Date()\n    });\n\n    getForPeriod = jest.fn<Promise<SubscribableMock<HistoricalTasksStats>>, unknown[]>().mockResolvedValue({\n        subscribe: jest.fn(),\n        unsubscribe: jest.fn(),\n        totalTasksCount: 10,\n        handledTasksCount: 8,\n        handledTasksWithinSlThresholdCount: 6,\n        handledTasksWithinSlThresholdPercentage: 0.6,\n        shortAbandonedTasksCount: 0,\n        shortAbandonedTasksPercentage: 0,\n        abandonedTasksCount: 0,\n        abandonedTasksPercentage: 0,\n        flowOutTasksCount: 0,\n        flowOutTasksPercentage: 0,\n        slaPercentage: 0.23,\n        timestampUpdated: new Date()\n    });\n}\n","import { injectable } from \"inversify\";\nimport { QueueStats, WorkerStats } from \"~/modules/stats\";\nimport { TasksByTimeMock } from \"~/modules/stats/RealtimeStats/QueueStats/TasksByTime/TasksByTime.mock\";\nimport { SubscribableMock } from \"~/modules/sync/mock\";\n\n@injectable()\nexport class QueueStatsMock implements QueueStats {\n    constructor(queueSid: string) {\n        this.sid = queueSid;\n    }\n\n    sid: string = \"WQ12345567890\";\n\n    friendlyName: string = \"Mock Queue\";\n\n    tasks: TasksByTimeMock = new TasksByTimeMock();\n\n    getWorkerStats = jest.fn<Promise<SubscribableMock<WorkerStats>>, unknown[]>().mockResolvedValue({\n        subscribe: jest.fn(),\n        unsubscribe: jest.fn(),\n        activityStatistics: [\n            { sid: \"sid\", friendlyName: \"friendlyName\", availableWorkers: 1, workers: 1 },\n            { sid: \"sid3\", friendlyName: \"friendlyName3\", availableWorkers: 2, workers: 2 }\n        ],\n        totalAvailableWorkers: 1,\n        totalUnavailableWorkers: 2,\n        totalOfflineWorkers: 3,\n        totalEligibleWorkers: 4,\n        timestampUpdated: new Date()\n    });\n\n    getAllTaskChannelStats() {\n        \n        return {} as any; \n    }\n\n    getTaskChannelStats() {\n        \n        return {} as any; \n    }\n}\n","import { injectable } from \"inversify\";\nimport { RealtimeStats } from \"~/modules/stats\";\nimport { QueueStatsMock } from \"~/modules/stats/RealtimeStats/QueueStats/QueueStatsMock/QueueStats.mock\";\n\n@injectable()\nexport class RealtimeStatsMock implements RealtimeStats {\n    getQueueStatsBySid = jest.fn((queueSid: string) => Promise.resolve(new QueueStatsMock(queueSid)));\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { realtimeStatsRTTI, newableQueueStatsRTTI, newableTasksByTimeRTTI } from \"./stats.rtti\";\nimport { RealtimeStats } from \"./RealtimeStats/RealtimeStats\";\nimport { RealtimeStatsMock } from \"./RealtimeStats/RealtimeStats.mock\";\nimport { NewableQueueStats } from \"./RealtimeStats/QueueStats/NewableQueueStats\";\nimport { QueueStatsMock } from \"./RealtimeStats/QueueStats/QueueStatsMock/QueueStats.mock\";\nimport { NewableTasksByTime } from \"./RealtimeStats/QueueStats/TasksByTime/NewableTasksByTime\";\nimport { TasksByTimeMock } from \"./RealtimeStats/QueueStats/TasksByTime/TasksByTime.mock\";\n\nexport const statsModuleContainerMock = new ContainerModule((bind: interfaces.Bind) => {\n    bind<RealtimeStats>(realtimeStatsRTTI).to(RealtimeStatsMock).inSingletonScope();\n    bind<NewableQueueStats>(newableQueueStatsRTTI).toConstructor(QueueStatsMock);\n    bind<NewableTasksByTime>(newableTasksByTimeRTTI).toConstructor(TasksByTimeMock);\n});\n","import \"reflect-metadata\";\n\nimport { Container } from \"inversify\";\nimport { getContainer } from \"./ioc.config\";\n\nimport { authModuleContainerMock } from \"./modules/auth/auth.ioc.mock\";\nimport { sessionModuleContainerMock } from \"./modules/session/session.ioc.mock\";\nimport { clientModuleContainerMock } from \"./modules/client/client.ioc.mock\";\nimport { eventsModuleContainerMock } from \"./modules/events/events.ioc.mock\";\nimport { configModuleContainerMock } from \"./modules/config/config.ioc.mock\";\nimport { websocketModuleContainerMock } from \"./modules/websocket/websocket.ioc.mock\";\nimport { loggerModuleContainerMock } from \"./modules/logger/logger.ioc.mock\";\nimport { syncModuleContainerMock } from \"./modules/sync/sync.ioc.mock\";\nimport { telemetryModuleContainerMock } from \"./modules/telemetry/telemetry.ioc.mock\";\nimport { telemetrySdkClientModuleContainerMock } from \"./modules/telemetrySdkClient/telemetrySdkClient.ioc.mock\";\nimport { statsModuleContainerMock } from \"./modules/stats/stats.ioc.mock\";\nimport { withContainerMock } from \"./backend/openApi.container.mock\";\n\n\n\n\n\nexport class MockContainer extends Container {\n    \n\n\n\n\n\n\n\n\n\n    constructor() {\n        super();\n\n        \n        this.loadModules();\n\n        \n        const originalContainer = getContainer();\n        this.parent = originalContainer;\n    }\n\n    private loadModules() {\n        this.load(authModuleContainerMock);\n        this.load(configModuleContainerMock);\n        this.load(sessionModuleContainerMock);\n        this.load(clientModuleContainerMock);\n        this.load(eventsModuleContainerMock);\n        this.load(websocketModuleContainerMock);\n        this.load(loggerModuleContainerMock);\n        this.load(syncModuleContainerMock);\n        this.load(telemetryModuleContainerMock);\n        this.load(telemetrySdkClientModuleContainerMock);\n        this.load(statsModuleContainerMock);\n        withContainerMock(this);\n    }\n\n    \n\n\n\n\n\n\n\n    bindOriginal(symbol: symbol) {\n        this.unbind(symbol);\n    }\n}\n","import { interfaces } from \"inversify\";\nimport { ApiServiceBinder as TelemetryBinder } from \"./generated/Telemetry/ApiServiceBinder\";\nimport { ApiServiceBinder as RealtimeQueueStatsBinder } from \"./generated/RealtimeQueueStats/ApiServiceBinder\";\nimport { ApiServiceBinder as ConfigurationBinder } from \"./generated/Configuration/ApiServiceBinder\";\n\nimport { TwilsockAdapter } from \"./TwilsockAdapter/TwilsockAdapter\";\nimport { syncAdapterRTTI, twilsockAdapterRTTI, httpAdapterRTTI } from \"./backend.rtti\";\nimport { SyncAdapter } from \"./SyncAdapter/SyncAdapter\";\nimport { SyncAdapterImpl } from \"./SyncAdapter/SyncAdapterImpl\";\nimport { TwilsockAdapterImpl } from \"./TwilsockAdapter/TwilsockAdapterImpl\";\nimport { HttpAdapter } from \"./HttpAdapter/HttpAdapter\";\nimport { HttpAdapterImpl } from \"./HttpAdapter/HttpAdapterImpl\";\n\nexport function withContainerMock(container: interfaces.Container) {\n    container.bind<TwilsockAdapter>(twilsockAdapterRTTI).to(TwilsockAdapterImpl).inSingletonScope();\n    container.bind<SyncAdapter>(syncAdapterRTTI).to(SyncAdapterImpl).inSingletonScope();\n    container.bind<HttpAdapter>(httpAdapterRTTI).to(HttpAdapterImpl).inSingletonScope();\n\n    TelemetryBinder.with(container);\n    RealtimeQueueStatsBinder.with(container);\n    ConfigurationBinder.with(container);\n}\n","import { publicConfigProviderRTTI, PublicConfigProvider } from \"./modules/config\";\nimport { PublicConfigMockOptions, publicConfigMockOptionsRTTI } from \"./modules/config/mock\";\nimport { clientProviderRTTI, ClientProvider } from \"./modules/client\";\nimport { clientMockOptionsRTTI, ClientMockOptions } from \"./modules/client/mock\";\nimport { authenticatorFactoryRTTI, twilioIdpUrlRTTI, TwilioIdpUrlFunction } from \"./modules/auth\";\nimport {\n    authenticatorMockOptionsRTTI,\n    AuthenticatorMockOptions,\n    AuthenticatorMockFactory,\n    TwilioIdpUrlMockOptions,\n    twilioIdpUrlMockOptionsRTTI\n} from \"./modules/auth/mock\";\nimport { LoggerFactory, loggerFactoryRTTI } from \"./modules/logger\";\nimport { MockContainer } from \"./ioc.config.mock\";\n\n\n\n\nexport type MockFactory<M, O = undefined> = (options?: O) => M;\n\nconst makeMockFactory = <M, O>(mockRTTI: symbol, optionsRTTI?: symbol): MockFactory<M, O> => (options): M => {\n    const container = new MockContainer();\n    if (optionsRTTI && options) {\n        container.bind(optionsRTTI).toConstantValue(options);\n    }\n    return container.get(mockRTTI);\n};\n\n\n\n\nexport type Mocks = {\n    auth: MockFactory<AuthenticatorMockFactory, AuthenticatorMockOptions>;\n    getLogger: MockFactory<LoggerFactory<string>>;\n    getTwilioIdpUrl: MockFactory<TwilioIdpUrlFunction, TwilioIdpUrlMockOptions>;\n    getPublicConfig: MockFactory<PublicConfigProvider, PublicConfigMockOptions>;\n    makeCreateClient: MockFactory<ClientProvider, ClientMockOptions>;\n};\n\nconst mocks: Mocks = {\n    auth: makeMockFactory(authenticatorFactoryRTTI, authenticatorMockOptionsRTTI),\n    getLogger: makeMockFactory(loggerFactoryRTTI),\n    getTwilioIdpUrl: makeMockFactory(twilioIdpUrlRTTI, twilioIdpUrlMockOptionsRTTI),\n    getPublicConfig: makeMockFactory(publicConfigProviderRTTI, publicConfigMockOptionsRTTI),\n    makeCreateClient: makeMockFactory(clientProviderRTTI, clientMockOptionsRTTI)\n};\n\n\n\n\nexport const getMock = <T extends keyof Mocks>(name: T, config?: Parameters<Mocks[T]>[0]): ReturnType<Mocks[T]> => {\n    \n\n\n    \n    return (<Function>mocks[name])(config);\n};\n\nexport { ClientMockOptions } from \"./modules/client/mock\";\nexport { PublicConfigMockOptions } from \"./modules/config/mock\";\nexport {\n    TwilioIdpUrlMockOptions,\n    AuthenticatorMockFactory,\n    AuthenticatorMock,\n    AuthenticatorMockOptions\n} from \"./modules/auth/mock\";\n"],"sourceRoot":""}